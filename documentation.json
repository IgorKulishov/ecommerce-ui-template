{
    "pipes": [
        {
            "name": "CurrencyFormatPipe",
            "id": "pipe-CurrencyFormatPipe-d3ff1b55433c9ae210eb8fec67b6e2a1",
            "file": "src/app/shared/pipes/currency-format.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [
                {
                    "name": "currencyPipe",
                    "defaultValue": "new CurrencyPipe(this.locale)",
                    "type": "CurrencyPipe",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "currencyCode",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "display",
                            "type": "\"code\" | \"symbol\" | \"symbol-narrow\" | string | boolean",
                            "optional": true
                        },
                        {
                            "name": "digitsInfo",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currencyCode",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "display",
                            "type": "\"code\" | \"symbol\" | \"symbol-narrow\" | string | boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "digitsInfo",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locale",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "currencyFormat",
            "sourceCode": "import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyPipe } from '@angular/common';\nimport { CurrencyService } from '../services/currency.service';\n\n@Pipe({\n    name: 'currencyFormat',\n    pure: false\n})\nexport class CurrencyFormatPipe implements PipeTransform {\n    currencyPipe: CurrencyPipe = new CurrencyPipe(this.locale);\n\n    constructor(\n        @Inject(LOCALE_ID) private locale: string,\n        private service: CurrencyService\n    ) { }\n\n    transform(\n        value: any,\n        currencyCode?: string,\n        display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean,\n        digitsInfo?: string,\n        locale?: string\n    ): string | null {\n        currencyCode = currencyCode || this.service.options.code;\n        display = display || this.service.options.display;\n        digitsInfo = digitsInfo || this.service.options.digitsInfo;\n        locale = locale || this.service.options.locale;\n\n        return this.currencyPipe.transform(value, currencyCode, display, digitsInfo, locale);\n    }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Address",
            "id": "interface-Address-0624e718983913846407d3a8e7363629",
            "file": "src/app/shared/interfaces/address.ts",
            "type": "interface",
            "sourceCode": "export interface Address {\r\n    default: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phone: string;\r\n    country: string;\r\n    city: string;\r\n    postcode: string;\r\n    address: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "city",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "country",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "default",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "postcode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppStates",
            "id": "interface-AppStates-42cac09589d51c1714e6476e9a570268",
            "file": "src/app/app.states.ts",
            "type": "interface",
            "sourceCode": "import { Products, ProductDetails, ProductSlug, Order, errorState } from './products/store/models/products.model';\nimport { UserDetails } from './auth/store/models/login.model';\nimport { INITIAL_PRODUCTS_DATA } from './products/store/states/products.states';\nimport { INITIAL_USER_DATA } from './auth/store/states/auth.states';\n\nexport interface AppStates {\n  storeData: Products[];\n  userDetails: UserDetails;\n  uiStateProductDetails: ProductDetails;\n  uiProductDetailsSlug: ProductSlug;\n  order: Order;\n  errorState: errorState;\n}\n\nexport const INITIAL_STORE_DATA: any = {\n  storeData: INITIAL_PRODUCTS_DATA,\n  uiProductDetailsSlug: {\n    'ProductSlug': undefined\n  },\n  uiStateProductDetails: {\n    'name':         undefined,\n    'description':  undefined,\n    'slug':         undefined,\n    'price':        null,\n    'productInfo':  [],\n    'id':           null,\n  },\n  order: {\n    'orderNumber': undefined,\n    'orderToken': null,\n    'userId': null,\n    'totalAmount': null,\n    'paymentId': null,\n    'paymentPlaced': null,\n    'paymentPaid': null,\n    'itemList': null,\n    'payment': null,\n    'id': null\n  },\n  'userDetails' : INITIAL_USER_DATA\n};\n",
            "properties": [
                {
                    "name": "errorState",
                    "type": "errorState",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "order",
                    "type": "Order",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "storeData",
                    "type": "Products[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "uiProductDetailsSlug",
                    "type": "ProductSlug",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "uiStateProductDetails",
                    "type": "ProductDetails",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "userDetails",
                    "type": "UserDetails",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BlockHeaderGroup",
            "id": "interface-BlockHeaderGroup-c73c3ea668fe96beae5d39aabdd24713",
            "file": "src/app/shared/interfaces/block-header-group.ts",
            "type": "interface",
            "sourceCode": "export interface BlockHeaderGroup {\r\n    name: string;\r\n    current: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "current",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BlockProductColumn",
            "id": "interface-BlockProductColumn-3bb090bc2b40bd6b418ece5c6e218d9f",
            "file": "src/app/shared/interfaces/block-product-column.ts",
            "type": "interface",
            "sourceCode": "export interface BlockProductColumn {\r\n    header: string;\r\n    products: any[];\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "products",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Brand",
            "id": "interface-Brand-f3844aafbbef744ea479a40dbcf69721",
            "file": "src/app/shared/interfaces/brand.ts",
            "type": "interface",
            "sourceCode": "export interface Brand {\r\n    image: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CartData",
            "id": "interface-CartData-2c22bedf8d236c7a58d084fd8701c71c",
            "file": "src/app/shared/services/cart.service.ts",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Product } from '../interfaces/product';\r\nimport { CartItem } from '../interfaces/cart-item';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface CartTotal {\r\n    title: string;\r\n    price: number;\r\n    type: 'shipping'|'fee'|'tax'|'other';\r\n}\r\n\r\ninterface CartData {\r\n    items: CartItem[];\r\n    quantity: number;\r\n    subtotal: number;\r\n    totals: CartTotal[];\r\n    total: number;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CartService {\r\n    private data: CartData = {\r\n        items: [],\r\n        quantity: 0,\r\n        subtotal: 0,\r\n        totals: [],\r\n        total: 0\r\n    };\r\n\r\n    private itemsSubject$: BehaviorSubject<CartItem[]> = new BehaviorSubject(this.data.items);\r\n    private quantitySubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.quantity);\r\n    private subtotalSubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.subtotal);\r\n    private totalsSubject$: BehaviorSubject<CartTotal[]> = new BehaviorSubject(this.data.totals);\r\n    private totalSubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.total);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    get items(): ReadonlyArray<CartItem> {\r\n        return this.data.items;\r\n    }\r\n\r\n    get quantity(): number {\r\n        return this.data.quantity;\r\n    }\r\n\r\n    readonly items$: Observable<CartItem[]> = this.itemsSubject$.asObservable();\r\n    readonly quantity$: Observable<number> = this.quantitySubject$.asObservable();\r\n    readonly subtotal$: Observable<number> = this.subtotalSubject$.asObservable();\r\n    readonly totals$: Observable<CartTotal[]> = this.totalsSubject$.asObservable();\r\n    readonly total$: Observable<number> = this.totalSubject$.asObservable();\r\n\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n            this.calc();\r\n        }\r\n    }\r\n\r\n    add(product: Product, quantity: number, options: {name: string; value: string}[] = []): Observable<CartItem> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            let item = this.items.find(eachItem => {\r\n                if (eachItem.product.id !== product.id || eachItem.options.length !== options.length) {\r\n                    return false;\r\n                }\r\n\r\n                if (eachItem.options.length) {\r\n                    for (const option of options) {\r\n                        if (!eachItem.options.find(itemOption => itemOption.name === option.name && itemOption.value === option.value)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            if (item) {\r\n                item.quantity += quantity;\r\n            } else {\r\n                item = {product, quantity, options};\r\n\r\n                this.data.items.push(item);\r\n            }\r\n\r\n            this.save();\r\n            this.calc();\r\n\r\n            return item;\r\n        }));\r\n    }\r\n\r\n    update(updates: {item: CartItem, quantity: number}[]): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            updates.forEach(update => {\r\n                const item = this.items.find(eachItem => eachItem === update.item);\r\n\r\n                if (item) {\r\n                    item.quantity = update.quantity;\r\n                }\r\n            });\r\n\r\n            this.save();\r\n            this.calc();\r\n        }));\r\n    }\r\n\r\n    remove(item: CartItem): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.data.items = this.data.items.filter(eachItem => eachItem !== item);\r\n\r\n            this.save();\r\n            this.calc();\r\n        }));\r\n    }\r\n\r\n    private calc(): void {\r\n        let quantity = 0;\r\n        let subtotal = 0;\r\n\r\n        this.data.items.forEach(item => {\r\n            quantity += item.quantity;\r\n            subtotal += item.product.price * item.quantity;\r\n        });\r\n\r\n        const totals: CartTotal[] = [];\r\n\r\n        totals.push({\r\n            title: 'Shipping',\r\n            price: 25,\r\n            type: 'shipping'\r\n        });\r\n        totals.push({\r\n            title: 'Tax',\r\n            price: subtotal * 0.20,\r\n            type: 'tax'\r\n        });\r\n\r\n        const total = subtotal + totals.reduce((acc, eachTotal) => acc + eachTotal.price, 0);\r\n\r\n        this.data.quantity = quantity;\r\n        this.data.subtotal = subtotal;\r\n        this.data.totals = totals;\r\n        this.data.total = total;\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n        this.quantitySubject$.next(this.data.quantity);\r\n        this.subtotalSubject$.next(this.data.subtotal);\r\n        this.totalsSubject$.next(this.data.totals);\r\n        this.totalSubject$.next(this.data.total);\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('cartItems', JSON.stringify(this.data.items));\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('cartItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n        }\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "CartItem[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "quantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subtotal",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totals",
                    "type": "CartTotal[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CartItem",
            "id": "interface-CartItem-22eb24f4b68cd833ffd32da2763d64a5",
            "file": "src/app/shared/interfaces/cart-item.ts",
            "type": "interface",
            "sourceCode": "import { Product } from './product';\r\n\r\nexport interface CartItem {\r\n    product: Product;\r\n    options: {\r\n        name: string;\r\n        value: string;\r\n    }[];\r\n    quantity: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CartState",
            "id": "interface-CartState-e7dc3d519b2d35c05a6b1101763bd9e4",
            "file": "src/app/cart/store/states/cart.states.ts",
            "type": "interface",
            "sourceCode": "import { ItemList } from \"../../models/cart.model\";\n\nexport interface CartState {\n  currentOrderInCart?:         any;\n  orderStoredInHistoryApi?:    OrderHistory[];\n  productToCartSuccess?:       any;\n  productsInCart?:             any;\n  checkOutConfirmationStatus?: any;\n  shoppingOrderNumber?:        any;\n  checkOutDetails?:            any;\n}\n\nexport interface OrderHistory {\n  checked:    boolean;\n  id:         string;\n  userid:     string;\n  orderDetails: OrderDetails;\n  updatedAt:  number;\n}\n\nexport interface OrderDetails {\n  id: number;\n  userId: number;\n  itemList: any;\n  orderNumber: string;\n  orderToken: string;\n  payment: string;\n  paymentId: number;\n  paymentPaid: string;\n  paymentPlaced: null\n  totalAmount: number;\n  totalQuantity: number;\n}\n\nexport interface CurrentOrderInCart {\n  orderNumber: string,\n  orderToken: number,\n  userId: number,\n  totalAmount: number,\n  totalQuantity: number,\n  paymentId: number,\n  paymentPlaced: number,\n  paymentPaid: number,\n  itemList: ItemList,\n  payment: number,\n  id: number\n}\n",
            "properties": [
                {
                    "name": "checkOutConfirmationStatus",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "checkOutDetails",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "currentOrderInCart",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "orderStoredInHistoryApi",
                    "type": "OrderHistory[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "productsInCart",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "productToCartSuccess",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "shoppingOrderNumber",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CartTotal",
            "id": "interface-CartTotal-2c22bedf8d236c7a58d084fd8701c71c",
            "file": "src/app/shared/services/cart.service.ts",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Product } from '../interfaces/product';\r\nimport { CartItem } from '../interfaces/cart-item';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface CartTotal {\r\n    title: string;\r\n    price: number;\r\n    type: 'shipping'|'fee'|'tax'|'other';\r\n}\r\n\r\ninterface CartData {\r\n    items: CartItem[];\r\n    quantity: number;\r\n    subtotal: number;\r\n    totals: CartTotal[];\r\n    total: number;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CartService {\r\n    private data: CartData = {\r\n        items: [],\r\n        quantity: 0,\r\n        subtotal: 0,\r\n        totals: [],\r\n        total: 0\r\n    };\r\n\r\n    private itemsSubject$: BehaviorSubject<CartItem[]> = new BehaviorSubject(this.data.items);\r\n    private quantitySubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.quantity);\r\n    private subtotalSubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.subtotal);\r\n    private totalsSubject$: BehaviorSubject<CartTotal[]> = new BehaviorSubject(this.data.totals);\r\n    private totalSubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.total);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    get items(): ReadonlyArray<CartItem> {\r\n        return this.data.items;\r\n    }\r\n\r\n    get quantity(): number {\r\n        return this.data.quantity;\r\n    }\r\n\r\n    readonly items$: Observable<CartItem[]> = this.itemsSubject$.asObservable();\r\n    readonly quantity$: Observable<number> = this.quantitySubject$.asObservable();\r\n    readonly subtotal$: Observable<number> = this.subtotalSubject$.asObservable();\r\n    readonly totals$: Observable<CartTotal[]> = this.totalsSubject$.asObservable();\r\n    readonly total$: Observable<number> = this.totalSubject$.asObservable();\r\n\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n            this.calc();\r\n        }\r\n    }\r\n\r\n    add(product: Product, quantity: number, options: {name: string; value: string}[] = []): Observable<CartItem> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            let item = this.items.find(eachItem => {\r\n                if (eachItem.product.id !== product.id || eachItem.options.length !== options.length) {\r\n                    return false;\r\n                }\r\n\r\n                if (eachItem.options.length) {\r\n                    for (const option of options) {\r\n                        if (!eachItem.options.find(itemOption => itemOption.name === option.name && itemOption.value === option.value)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            if (item) {\r\n                item.quantity += quantity;\r\n            } else {\r\n                item = {product, quantity, options};\r\n\r\n                this.data.items.push(item);\r\n            }\r\n\r\n            this.save();\r\n            this.calc();\r\n\r\n            return item;\r\n        }));\r\n    }\r\n\r\n    update(updates: {item: CartItem, quantity: number}[]): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            updates.forEach(update => {\r\n                const item = this.items.find(eachItem => eachItem === update.item);\r\n\r\n                if (item) {\r\n                    item.quantity = update.quantity;\r\n                }\r\n            });\r\n\r\n            this.save();\r\n            this.calc();\r\n        }));\r\n    }\r\n\r\n    remove(item: CartItem): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.data.items = this.data.items.filter(eachItem => eachItem !== item);\r\n\r\n            this.save();\r\n            this.calc();\r\n        }));\r\n    }\r\n\r\n    private calc(): void {\r\n        let quantity = 0;\r\n        let subtotal = 0;\r\n\r\n        this.data.items.forEach(item => {\r\n            quantity += item.quantity;\r\n            subtotal += item.product.price * item.quantity;\r\n        });\r\n\r\n        const totals: CartTotal[] = [];\r\n\r\n        totals.push({\r\n            title: 'Shipping',\r\n            price: 25,\r\n            type: 'shipping'\r\n        });\r\n        totals.push({\r\n            title: 'Tax',\r\n            price: subtotal * 0.20,\r\n            type: 'tax'\r\n        });\r\n\r\n        const total = subtotal + totals.reduce((acc, eachTotal) => acc + eachTotal.price, 0);\r\n\r\n        this.data.quantity = quantity;\r\n        this.data.subtotal = subtotal;\r\n        this.data.totals = totals;\r\n        this.data.total = total;\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n        this.quantitySubject$.next(this.data.quantity);\r\n        this.subtotalSubject$.next(this.data.subtotal);\r\n        this.totalsSubject$.next(this.data.totals);\r\n        this.totalSubject$.next(this.data.total);\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('cartItems', JSON.stringify(this.data.items));\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('cartItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n        }\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "\"shipping\" | \"fee\" | \"tax\" | \"other\"",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Category",
            "id": "interface-Category-50cd9ed6b915e136d682dccc61e47167",
            "file": "src/app/shared/interfaces/category.ts",
            "type": "interface",
            "sourceCode": "export interface Category {\r\n    name: string;\r\n    url: string;\r\n    children?: Category[];\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "type": "Category[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CheckoutInfo",
            "id": "interface-CheckoutInfo-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "payment_method_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CompareData",
            "id": "interface-CompareData-c3190040983a68dd2c57ae9649cbbe45",
            "file": "src/app/shared/services/compare.service.ts",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, OnDestroy, PLATFORM_ID } from '@angular/core';\r\nimport { Product } from '../interfaces/product';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface CompareData {\r\n    items: Product[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CompareService implements OnDestroy {\r\n    private data: CompareData = {\r\n        items: []\r\n    };\r\n\r\n    private destroy$: Subject<void> = new Subject();\r\n    private itemsSubject$: BehaviorSubject<Product[]> = new BehaviorSubject([]);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    readonly items$: Observable<Product[]> = this.itemsSubject$.pipe(takeUntil(this.destroy$));\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    add(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index === -1) {\r\n                this.data.items.push(product);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    remove(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index !== -1) {\r\n                this.data.items.splice(index, 1);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('compareItems', JSON.stringify(this.data.items));\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('compareItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n            this.itemsSubject$.next(this.data.items);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CurrencyFormatOptions",
            "id": "interface-CurrencyFormatOptions-df1df7412d1ed2d4de9e3a97d15655f2",
            "file": "src/app/shared/interfaces/currency-format-options.ts",
            "type": "interface",
            "sourceCode": "export interface CurrencyFormatOptions {\n    code?: string;\n    display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean;\n    digitsInfo?: string;\n    locale?: string;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "digitsInfo",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "display",
                    "type": "\"code\" | \"symbol\" | \"symbol-narrow\" | string | boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "locale",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>properties of the CurrencyFormatOptions interface fully complies\nwith the arguments of the built-in pipe &quot;currency&quot;\n<a href=\"https://angular.io/api/common/CurrencyPipe\">https://angular.io/api/common/CurrencyPipe</a></p>\n",
            "methods": []
        },
        {
            "name": "CurrencyServiceData",
            "id": "interface-CurrencyServiceData-f9bbf8929633fc93139a2153242fa082",
            "file": "src/app/shared/services/currency.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { CurrencyFormatOptions } from '../interfaces/currency-format-options';\n\ninterface CurrencyServiceData {\n    options: CurrencyFormatOptions;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrencyService {\n    private data: CurrencyServiceData = {\n        options: {}\n    };\n\n    private changesSubject$: Subject<CurrencyFormatOptions> = new Subject();\n\n    changes$: Observable<CurrencyFormatOptions> = this.changesSubject$.asObservable();\n\n    get options(): CurrencyFormatOptions {\n        return this.data.options;\n    }\n    set options(value: CurrencyFormatOptions) {\n        this.data.options = value;\n        this.changesSubject$.next(value);\n    }\n\n    constructor() { }\n}\n",
            "properties": [
                {
                    "name": "options",
                    "type": "CurrencyFormatOptions",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CurrentOrderInCart",
            "id": "interface-CurrentOrderInCart-e7dc3d519b2d35c05a6b1101763bd9e4",
            "file": "src/app/cart/store/states/cart.states.ts",
            "type": "interface",
            "sourceCode": "import { ItemList } from \"../../models/cart.model\";\n\nexport interface CartState {\n  currentOrderInCart?:         any;\n  orderStoredInHistoryApi?:    OrderHistory[];\n  productToCartSuccess?:       any;\n  productsInCart?:             any;\n  checkOutConfirmationStatus?: any;\n  shoppingOrderNumber?:        any;\n  checkOutDetails?:            any;\n}\n\nexport interface OrderHistory {\n  checked:    boolean;\n  id:         string;\n  userid:     string;\n  orderDetails: OrderDetails;\n  updatedAt:  number;\n}\n\nexport interface OrderDetails {\n  id: number;\n  userId: number;\n  itemList: any;\n  orderNumber: string;\n  orderToken: string;\n  payment: string;\n  paymentId: number;\n  paymentPaid: string;\n  paymentPlaced: null\n  totalAmount: number;\n  totalQuantity: number;\n}\n\nexport interface CurrentOrderInCart {\n  orderNumber: string,\n  orderToken: number,\n  userId: number,\n  totalAmount: number,\n  totalQuantity: number,\n  paymentId: number,\n  paymentPlaced: number,\n  paymentPaid: number,\n  itemList: ItemList,\n  payment: number,\n  id: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "itemList",
                    "type": "ItemList",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "orderToken",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "payment",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "paymentId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "paymentPaid",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "paymentPlaced",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "totalAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "totalQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "error_message",
            "id": "interface-error_message-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "error_message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ErrorMessage",
            "id": "interface-ErrorMessage-f34df0b5723f328b373c26b60513c277",
            "file": "src/app/auth/components/login/login.component.ts",
            "type": "interface",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport {Component, Inject, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { getAuthSelector, loginUserDetailsMapper, loginErrorMapper } from '../../store/select/auth.selectors';\nimport { UserCredentials } from '../../store/models/login.model';\nimport { SessionService } from '../../../core/services/session.service';\nimport { LoginAction } from '../../store/actions/login.actions';\n\nexport interface ErrorMessage {\n  message: any;\n  status: string;\n}\n\nexport class Message {\n  constructor(\n    public sender: string,\n    public content: string,\n    public isBroadcast = false,\n  ) { }\n}\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public ws_message: string;\n  loginForm: FormGroup;\n  errorMessage: ErrorMessage;\n  userName$;\n  loading = false;\n  user: string;\n  constructor(private sessionService: SessionService,\n              private router: Router,\n              private store: Store<UserCredentials>,\n              @Inject(FormBuilder) fb: FormBuilder) {\n\n\n    this.loginForm = fb.group({\n      userName: [null, Validators.minLength(3)],\n      password: [null, Validators.minLength(3)]\n    });\n  }\n  login() {\n    this.store.dispatch(new LoginAction(this.loginForm.value));\n    this.loading = true;\n  }\n\n  submitWsMessage() {\n    const submitMessage = new Message('client1', this.ws_message, false);\n  }\n\n  ngOnInit() {\n    // Login\n    this.store.select(getAuthSelector).pipe(\n      map(loginUserDetailsMapper))\n      .subscribe(res => {\n        if (res && res.token) {\n          this.loading = false;\n          this.router.navigate(['/products']);\n        }\n      });\n    // Error handing\n    this.store.select(getAuthSelector).pipe(\n      map(loginErrorMapper)\n    )\n    .subscribe((error: ErrorMessage) => {\n      if ( error && error.message ) {\n        this.errorMessage = error;\n        this.loading = false;\n      }\n    });\n\n    if (this.sessionService.getTokenFromStorage() != null) {\n      // this.router.navigate(['/products']);\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "message",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "errorState",
            "id": "interface-errorState-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ImageList",
            "id": "interface-ImageList-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "largeUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ItemList",
            "id": "interface-ItemList-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "productId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "quantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LibrariesDef",
            "id": "interface-LibrariesDef-eb2d023a730f59436d83e59128160264",
            "file": "src/app/shared/services/resources.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\ntype Task = () => Promise<void>;\r\n\r\ninterface LibrariesDef {\r\n    [name: string]: Task;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ResourcesService {\r\n    private loaded: { [url: string]: Promise<void>; } = {};\r\n\r\n    private libraries: LibrariesDef = {\r\n        photoSwipe: ResourcesService.parallel(\r\n            this.styleTask('assets/vendor/photoswipe/photoswipe.css'),\r\n            this.styleTask('assets/vendor/photoswipe/default-skin/default-skin.css'),\r\n            this.scriptTask('assets/vendor/photoswipe/photoswipe.min.js'),\r\n            this.scriptTask('assets/vendor/photoswipe/photoswipe-ui-default.min.js')\r\n        )\r\n    };\r\n\r\n    static series(...tasks: Task[]): Task {\r\n        if (!tasks.length) {\r\n            return () => Promise.resolve();\r\n        }\r\n\r\n        return () => tasks.shift()().then(ResourcesService.series(...tasks));\r\n    }\r\n\r\n    static parallel(...tasks: Task[]): Task {\r\n        if (!tasks.length) {\r\n            return () => Promise.resolve();\r\n        }\r\n\r\n        return () => Promise.all(tasks.map(task => task())).then(() => {});\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    loadScript(url: string): Promise<void> {\r\n        return this.scriptTask(url)();\r\n    }\r\n\r\n    loadStyle(url: string): Promise<void> {\r\n        return this.styleTask(url)();\r\n    }\r\n\r\n    loadLibrary(library: string): Promise<void> {\r\n        return this.libraries[library]();\r\n    }\r\n\r\n    private scriptTask(url: string): Task {\r\n        return () => {\r\n            if (!this.loaded.hasOwnProperty(url)) {\r\n                this.loaded[url] = new Promise<void>((resolve, reject) => {\r\n                    const script = document.createElement('script');\r\n\r\n                    script.onload = () => resolve();\r\n                    script.onerror = () => reject(new Error('Loading error: ' + url));\r\n                    script.src = url;\r\n\r\n                    document.head.appendChild(script);\r\n                });\r\n            }\r\n\r\n            return this.loaded[url];\r\n        };\r\n    }\r\n\r\n    private styleTask(url: string): Task {\r\n        return () => {\r\n            if (!this.loaded.hasOwnProperty(url)) {\r\n                this.loaded[url] = new Promise<void>((resolve, reject) => {\r\n                    const link = document.createElement('link');\r\n\r\n                    link.onload = () => resolve();\r\n                    link.onerror = () => reject(new Error('Loading error: ' + url));\r\n                    link.type = 'text/css';\r\n                    link.rel = 'stylesheet';\r\n                    link.href = url;\r\n\r\n                    document.head.appendChild(link);\r\n                });\r\n            }\r\n\r\n            return this.loaded[url];\r\n        };\r\n    }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-eb2d023a730f59436d83e59128160264",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "returnType": "Task",
                    "line": 5
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "Link",
            "id": "interface-Link-fc73f04a633e873dc7e82df7244c7630",
            "file": "src/app/shared/interfaces/link.ts",
            "type": "interface",
            "sourceCode": "export interface Link {\r\n    label: string;\r\n    url: string;\r\n    external?: boolean;\r\n    target?: '_self'|'_blank';\r\n}\r\n",
            "properties": [
                {
                    "name": "external",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "target",
                    "type": "\"_self\" | \"_blank\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Login",
            "id": "interface-Login-a3a2a9ad465c64becfef2be902bcf14d",
            "file": "src/app/auth/store/models/login.model.ts",
            "type": "interface",
            "sourceCode": "import {defaultLanguage} from '../../../core/consts/consts';\n\nexport interface UserCredentials {\n  'password': string;\n  'userName': string;\n}\n\nexport interface Role {\n  'description': string;\n  'id': number;\n  'roleName': string;\n}\n\nexport interface Login {\n  'id': number;\n  'roles': Role[];\n}\n\nexport interface UserDetails {\n  'id':          number;\n  'userName':    string;\n  'orderNumber'?: string;\n  'mobile':      number;\n  'token':       string;\n  'language'?:   string;\n  'login': Login;\n}\n\nexport interface RegisterUser {\n  'id':          number;\n  'userName':    string;\n  'password'?:   string;\n  'token':       string;\n  'mobile':      number;\n  'login':       Login;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "roles",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Megamenu",
            "id": "interface-Megamenu-331274f57d5f7df02aa2de34c8ac6566",
            "file": "src/app/shared/interfaces/megamenu.ts",
            "type": "interface",
            "sourceCode": "import { MegamenuColumn } from './megamenu-column';\r\n\r\nexport interface Megamenu {\r\n    type: 'megamenu';\r\n    size: 'xl'|'lg'|'nl'|'sm';\r\n    image?: string;\r\n    columns: MegamenuColumn[];\r\n}\r\n",
            "properties": [
                {
                    "name": "columns",
                    "type": "MegamenuColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "size",
                    "type": "\"xl\" | \"lg\" | \"nl\" | \"sm\"",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MegamenuColumn",
            "id": "interface-MegamenuColumn-1871bd5ebe76957fccc3cc196b8dda60",
            "file": "src/app/shared/interfaces/megamenu-column.ts",
            "type": "interface",
            "sourceCode": "import { NestedLink } from './nested-link';\r\n\r\nexport interface MegamenuColumn {\r\n    size: number;\r\n    items: NestedLink[];\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "NestedLink[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Menu",
            "id": "interface-Menu-245d670ae3475553ab12f856e7e5984a",
            "file": "src/app/shared/interfaces/menu.ts",
            "type": "interface",
            "sourceCode": "import { NestedLink } from './nested-link';\r\n\r\nexport interface Menu {\r\n    type: 'menu';\r\n    items: NestedLink[];\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "NestedLink[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MobileMenuItemBase",
            "id": "interface-MobileMenuItemBase-fcb300c3d494d4b5f8c0f2d47eac0446",
            "file": "src/app/shared/interfaces/mobile-menu-item.ts",
            "type": "interface",
            "sourceCode": "export interface MobileMenuItemBase {\r\n    label: string;\r\n    data?: any;\r\n    children?: MobileMenuItem[];\r\n}\r\n\r\nexport interface MobileMenuItemLink extends MobileMenuItemBase {\r\n    type: 'link';\r\n    url: string;\r\n}\r\n\r\nexport interface MobileMenuItemButton extends MobileMenuItemBase {\r\n    type: 'button';\r\n}\r\n\r\nexport type MobileMenuItem = MobileMenuItemLink | MobileMenuItemButton;\r\n",
            "properties": [
                {
                    "name": "children",
                    "type": "MobileMenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "data",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MobileMenuItemButton",
            "id": "interface-MobileMenuItemButton-fcb300c3d494d4b5f8c0f2d47eac0446",
            "file": "src/app/shared/interfaces/mobile-menu-item.ts",
            "type": "interface",
            "sourceCode": "export interface MobileMenuItemBase {\r\n    label: string;\r\n    data?: any;\r\n    children?: MobileMenuItem[];\r\n}\r\n\r\nexport interface MobileMenuItemLink extends MobileMenuItemBase {\r\n    type: 'link';\r\n    url: string;\r\n}\r\n\r\nexport interface MobileMenuItemButton extends MobileMenuItemBase {\r\n    type: 'button';\r\n}\r\n\r\nexport type MobileMenuItem = MobileMenuItemLink | MobileMenuItemButton;\r\n",
            "properties": [
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "MobileMenuItemBase"
        },
        {
            "name": "MobileMenuItemLink",
            "id": "interface-MobileMenuItemLink-fcb300c3d494d4b5f8c0f2d47eac0446",
            "file": "src/app/shared/interfaces/mobile-menu-item.ts",
            "type": "interface",
            "sourceCode": "export interface MobileMenuItemBase {\r\n    label: string;\r\n    data?: any;\r\n    children?: MobileMenuItem[];\r\n}\r\n\r\nexport interface MobileMenuItemLink extends MobileMenuItemBase {\r\n    type: 'link';\r\n    url: string;\r\n}\r\n\r\nexport interface MobileMenuItemButton extends MobileMenuItemBase {\r\n    type: 'button';\r\n}\r\n\r\nexport type MobileMenuItem = MobileMenuItemLink | MobileMenuItemButton;\r\n",
            "properties": [
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "MobileMenuItemBase"
        },
        {
            "name": "NavigationLink",
            "id": "interface-NavigationLink-603ef628012c80d0fac60485d8966733",
            "file": "src/app/shared/interfaces/navigation-link.ts",
            "type": "interface",
            "sourceCode": "import { Link } from './link';\r\nimport { Menu } from './menu';\r\nimport { Megamenu } from './megamenu';\r\n\r\nexport interface NavigationLink extends Link {\r\n    menu?: Menu|Megamenu;\r\n}\r\n",
            "properties": [
                {
                    "name": "menu",
                    "type": "Menu | Megamenu",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Link"
        },
        {
            "name": "NestedLink",
            "id": "interface-NestedLink-c1f840bdd50f0853a87cf738e4f68170",
            "file": "src/app/shared/interfaces/nested-link.ts",
            "type": "interface",
            "sourceCode": "import { Link } from './link';\r\n\r\nexport interface NestedLink extends Link {\r\n    items?: NestedLink[];\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "NestedLink[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Link"
        },
        {
            "name": "Order",
            "id": "interface-Order-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "itemList",
                    "type": "ItemList[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "orderToken",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "payment",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "paymentId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "paymentPaid",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "paymentPlaced",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "totalQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Order",
            "id": "interface-Order-51363064130d4a183629e3a420a972bf-1",
            "file": "src/app/shared/interfaces/order.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\r\n    id: number;\r\n    date: string;\r\n    status: string;\r\n    total: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "total",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Order-1"
        },
        {
            "name": "Order",
            "id": "interface-Order-d88d237859f05b09dbd9764125422071-2",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "itemList",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "orderToken",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "payment",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "paymentId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "paymentPaid",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "paymentPlaced",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "totalAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Order-2"
        },
        {
            "name": "OrderDetails",
            "id": "interface-OrderDetails-e7dc3d519b2d35c05a6b1101763bd9e4",
            "file": "src/app/cart/store/states/cart.states.ts",
            "type": "interface",
            "sourceCode": "import { ItemList } from \"../../models/cart.model\";\n\nexport interface CartState {\n  currentOrderInCart?:         any;\n  orderStoredInHistoryApi?:    OrderHistory[];\n  productToCartSuccess?:       any;\n  productsInCart?:             any;\n  checkOutConfirmationStatus?: any;\n  shoppingOrderNumber?:        any;\n  checkOutDetails?:            any;\n}\n\nexport interface OrderHistory {\n  checked:    boolean;\n  id:         string;\n  userid:     string;\n  orderDetails: OrderDetails;\n  updatedAt:  number;\n}\n\nexport interface OrderDetails {\n  id: number;\n  userId: number;\n  itemList: any;\n  orderNumber: string;\n  orderToken: string;\n  payment: string;\n  paymentId: number;\n  paymentPaid: string;\n  paymentPlaced: null\n  totalAmount: number;\n  totalQuantity: number;\n}\n\nexport interface CurrentOrderInCart {\n  orderNumber: string,\n  orderToken: number,\n  userId: number,\n  totalAmount: number,\n  totalQuantity: number,\n  paymentId: number,\n  paymentPlaced: number,\n  paymentPaid: number,\n  itemList: ItemList,\n  payment: number,\n  id: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "itemList",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "orderToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "payment",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "paymentId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "paymentPaid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "paymentPlaced",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "totalAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "totalQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "OrderHistory",
            "id": "interface-OrderHistory-e7dc3d519b2d35c05a6b1101763bd9e4",
            "file": "src/app/cart/store/states/cart.states.ts",
            "type": "interface",
            "sourceCode": "import { ItemList } from \"../../models/cart.model\";\n\nexport interface CartState {\n  currentOrderInCart?:         any;\n  orderStoredInHistoryApi?:    OrderHistory[];\n  productToCartSuccess?:       any;\n  productsInCart?:             any;\n  checkOutConfirmationStatus?: any;\n  shoppingOrderNumber?:        any;\n  checkOutDetails?:            any;\n}\n\nexport interface OrderHistory {\n  checked:    boolean;\n  id:         string;\n  userid:     string;\n  orderDetails: OrderDetails;\n  updatedAt:  number;\n}\n\nexport interface OrderDetails {\n  id: number;\n  userId: number;\n  itemList: any;\n  orderNumber: string;\n  orderToken: string;\n  payment: string;\n  paymentId: number;\n  paymentPaid: string;\n  paymentPlaced: null\n  totalAmount: number;\n  totalQuantity: number;\n}\n\nexport interface CurrentOrderInCart {\n  orderNumber: string,\n  orderToken: number,\n  userId: number,\n  totalAmount: number,\n  totalQuantity: number,\n  paymentId: number,\n  paymentPlaced: number,\n  paymentPaid: number,\n  itemList: ItemList,\n  payment: number,\n  id: number\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "orderDetails",
                    "type": "OrderDetails",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "updatedAt",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userid",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PaymentDescription",
            "id": "interface-PaymentDescription-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "paymentType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PaymentMethods",
            "id": "interface-PaymentMethods-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "payments",
                    "type": "PaymentDescription[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PhotoSwipeItem",
            "id": "interface-PhotoSwipeItem-4bcad4ac9e549edbe91ae6db409c65f5",
            "file": "src/app/shared/services/photo-swipe.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport { ResourcesService } from './resources.service';\r\nimport { Observable, Subscriber, from } from 'rxjs';\r\n\r\ndeclare const PhotoSwipe: any;\r\ndeclare const PhotoSwipeUI_Default: any;\r\n\r\nexport interface PhotoSwipeModelRef {\r\n    close: () => void;\r\n    listen: (eventName: string, callbackFn: (...args: any) => void) => void;\r\n    getCurrentIndex: () => number;\r\n}\r\n\r\nexport interface PhotoSwipeItem {\r\n    src: string;\r\n    w: number;\r\n    h: number;\r\n    msrc?: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface PhotoSwipeThumbBounds {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n}\r\n\r\nexport interface PhotoSwipeOptions {\r\n    index?: number;\r\n    getThumbBoundsFn?: (index: number) => PhotoSwipeThumbBounds;\r\n    showHideOpacity?: boolean;\r\n    bgOpacity?: number;\r\n    loop?: boolean;\r\n    history?: boolean;\r\n}\r\n\r\nconst template = `\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PhotoSwipeService implements OnDestroy {\r\n    initialized = false;\r\n    element: HTMLDivElement;\r\n\r\n    constructor(\r\n        private zone: NgZone,\r\n        private resources: ResourcesService\r\n    ) { }\r\n\r\n    load(): Observable<void> {\r\n        return from(this.loadLibrary());\r\n    }\r\n\r\n    open(items: PhotoSwipeItem[], options: PhotoSwipeOptions): Observable<PhotoSwipeModelRef> {\r\n        return new Observable(observer => {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.loadLibrary().then(() => {\r\n                    if (observer.closed) {\r\n                        return;\r\n                    }\r\n                    if (!this.initialized) {\r\n                        this.init();\r\n                    }\r\n\r\n                    this.createGallery(observer, items, options);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initialized) {\r\n            this.element.parentElement.removeChild(this.element);\r\n        }\r\n    }\r\n\r\n    private createGallery(observer: Subscriber<PhotoSwipeModelRef>, items: PhotoSwipeItem[], options: PhotoSwipeOptions): void {\r\n        let gallery = null;\r\n\r\n        gallery = new PhotoSwipe(this.element, PhotoSwipeUI_Default, items, options);\r\n        gallery.listen('destroy', () => this.zone.run(() => {\r\n            gallery = null;\r\n            this.zone.run(() => observer.complete());\r\n        }));\r\n        gallery.init();\r\n\r\n        const modelRef: PhotoSwipeModelRef = {\r\n            close: () => gallery.close(),\r\n            listen: (eventName, callbackFn) => gallery.listen(eventName, (...args) => {\r\n                this.zone.run(() => callbackFn(...args));\r\n            }),\r\n            getCurrentIndex: () => gallery.getCurrentIndex()\r\n        };\r\n\r\n        observer.add(() => {\r\n            if (gallery) {\r\n                gallery.destroy();\r\n            }\r\n        });\r\n\r\n        this.zone.run(() => observer.next(modelRef));\r\n    }\r\n\r\n    private loadLibrary(): Promise<void> {\r\n        return this.resources.loadLibrary('photoSwipe');\r\n    }\r\n\r\n    private init(): void {\r\n        this.initialized = true;\r\n\r\n        const div = document.createElement('div');\r\n\r\n        div.innerHTML = template;\r\n\r\n        this.element = div.firstElementChild as HTMLDivElement;\r\n\r\n        document.body.appendChild(this.element);\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "h",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "msrc",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "src",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "w",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PhotoSwipeModelRef",
            "id": "interface-PhotoSwipeModelRef-4bcad4ac9e549edbe91ae6db409c65f5",
            "file": "src/app/shared/services/photo-swipe.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport { ResourcesService } from './resources.service';\r\nimport { Observable, Subscriber, from } from 'rxjs';\r\n\r\ndeclare const PhotoSwipe: any;\r\ndeclare const PhotoSwipeUI_Default: any;\r\n\r\nexport interface PhotoSwipeModelRef {\r\n    close: () => void;\r\n    listen: (eventName: string, callbackFn: (...args: any) => void) => void;\r\n    getCurrentIndex: () => number;\r\n}\r\n\r\nexport interface PhotoSwipeItem {\r\n    src: string;\r\n    w: number;\r\n    h: number;\r\n    msrc?: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface PhotoSwipeThumbBounds {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n}\r\n\r\nexport interface PhotoSwipeOptions {\r\n    index?: number;\r\n    getThumbBoundsFn?: (index: number) => PhotoSwipeThumbBounds;\r\n    showHideOpacity?: boolean;\r\n    bgOpacity?: number;\r\n    loop?: boolean;\r\n    history?: boolean;\r\n}\r\n\r\nconst template = `\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PhotoSwipeService implements OnDestroy {\r\n    initialized = false;\r\n    element: HTMLDivElement;\r\n\r\n    constructor(\r\n        private zone: NgZone,\r\n        private resources: ResourcesService\r\n    ) { }\r\n\r\n    load(): Observable<void> {\r\n        return from(this.loadLibrary());\r\n    }\r\n\r\n    open(items: PhotoSwipeItem[], options: PhotoSwipeOptions): Observable<PhotoSwipeModelRef> {\r\n        return new Observable(observer => {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.loadLibrary().then(() => {\r\n                    if (observer.closed) {\r\n                        return;\r\n                    }\r\n                    if (!this.initialized) {\r\n                        this.init();\r\n                    }\r\n\r\n                    this.createGallery(observer, items, options);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initialized) {\r\n            this.element.parentElement.removeChild(this.element);\r\n        }\r\n    }\r\n\r\n    private createGallery(observer: Subscriber<PhotoSwipeModelRef>, items: PhotoSwipeItem[], options: PhotoSwipeOptions): void {\r\n        let gallery = null;\r\n\r\n        gallery = new PhotoSwipe(this.element, PhotoSwipeUI_Default, items, options);\r\n        gallery.listen('destroy', () => this.zone.run(() => {\r\n            gallery = null;\r\n            this.zone.run(() => observer.complete());\r\n        }));\r\n        gallery.init();\r\n\r\n        const modelRef: PhotoSwipeModelRef = {\r\n            close: () => gallery.close(),\r\n            listen: (eventName, callbackFn) => gallery.listen(eventName, (...args) => {\r\n                this.zone.run(() => callbackFn(...args));\r\n            }),\r\n            getCurrentIndex: () => gallery.getCurrentIndex()\r\n        };\r\n\r\n        observer.add(() => {\r\n            if (gallery) {\r\n                gallery.destroy();\r\n            }\r\n        });\r\n\r\n        this.zone.run(() => observer.next(modelRef));\r\n    }\r\n\r\n    private loadLibrary(): Promise<void> {\r\n        return this.resources.loadLibrary('photoSwipe');\r\n    }\r\n\r\n    private init(): void {\r\n        this.initialized = true;\r\n\r\n        const div = document.createElement('div');\r\n\r\n        div.innerHTML = template;\r\n\r\n        this.element = div.firstElementChild as HTMLDivElement;\r\n\r\n        document.body.appendChild(this.element);\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "close",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "getCurrentIndex",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "listen",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PhotoSwipeOptions",
            "id": "interface-PhotoSwipeOptions-4bcad4ac9e549edbe91ae6db409c65f5",
            "file": "src/app/shared/services/photo-swipe.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport { ResourcesService } from './resources.service';\r\nimport { Observable, Subscriber, from } from 'rxjs';\r\n\r\ndeclare const PhotoSwipe: any;\r\ndeclare const PhotoSwipeUI_Default: any;\r\n\r\nexport interface PhotoSwipeModelRef {\r\n    close: () => void;\r\n    listen: (eventName: string, callbackFn: (...args: any) => void) => void;\r\n    getCurrentIndex: () => number;\r\n}\r\n\r\nexport interface PhotoSwipeItem {\r\n    src: string;\r\n    w: number;\r\n    h: number;\r\n    msrc?: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface PhotoSwipeThumbBounds {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n}\r\n\r\nexport interface PhotoSwipeOptions {\r\n    index?: number;\r\n    getThumbBoundsFn?: (index: number) => PhotoSwipeThumbBounds;\r\n    showHideOpacity?: boolean;\r\n    bgOpacity?: number;\r\n    loop?: boolean;\r\n    history?: boolean;\r\n}\r\n\r\nconst template = `\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PhotoSwipeService implements OnDestroy {\r\n    initialized = false;\r\n    element: HTMLDivElement;\r\n\r\n    constructor(\r\n        private zone: NgZone,\r\n        private resources: ResourcesService\r\n    ) { }\r\n\r\n    load(): Observable<void> {\r\n        return from(this.loadLibrary());\r\n    }\r\n\r\n    open(items: PhotoSwipeItem[], options: PhotoSwipeOptions): Observable<PhotoSwipeModelRef> {\r\n        return new Observable(observer => {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.loadLibrary().then(() => {\r\n                    if (observer.closed) {\r\n                        return;\r\n                    }\r\n                    if (!this.initialized) {\r\n                        this.init();\r\n                    }\r\n\r\n                    this.createGallery(observer, items, options);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initialized) {\r\n            this.element.parentElement.removeChild(this.element);\r\n        }\r\n    }\r\n\r\n    private createGallery(observer: Subscriber<PhotoSwipeModelRef>, items: PhotoSwipeItem[], options: PhotoSwipeOptions): void {\r\n        let gallery = null;\r\n\r\n        gallery = new PhotoSwipe(this.element, PhotoSwipeUI_Default, items, options);\r\n        gallery.listen('destroy', () => this.zone.run(() => {\r\n            gallery = null;\r\n            this.zone.run(() => observer.complete());\r\n        }));\r\n        gallery.init();\r\n\r\n        const modelRef: PhotoSwipeModelRef = {\r\n            close: () => gallery.close(),\r\n            listen: (eventName, callbackFn) => gallery.listen(eventName, (...args) => {\r\n                this.zone.run(() => callbackFn(...args));\r\n            }),\r\n            getCurrentIndex: () => gallery.getCurrentIndex()\r\n        };\r\n\r\n        observer.add(() => {\r\n            if (gallery) {\r\n                gallery.destroy();\r\n            }\r\n        });\r\n\r\n        this.zone.run(() => observer.next(modelRef));\r\n    }\r\n\r\n    private loadLibrary(): Promise<void> {\r\n        return this.resources.loadLibrary('photoSwipe');\r\n    }\r\n\r\n    private init(): void {\r\n        this.initialized = true;\r\n\r\n        const div = document.createElement('div');\r\n\r\n        div.innerHTML = template;\r\n\r\n        this.element = div.firstElementChild as HTMLDivElement;\r\n\r\n        document.body.appendChild(this.element);\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "bgOpacity",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "getThumbBoundsFn",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "history",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "index",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "loop",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showHideOpacity",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PhotoSwipeThumbBounds",
            "id": "interface-PhotoSwipeThumbBounds-4bcad4ac9e549edbe91ae6db409c65f5",
            "file": "src/app/shared/services/photo-swipe.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport { ResourcesService } from './resources.service';\r\nimport { Observable, Subscriber, from } from 'rxjs';\r\n\r\ndeclare const PhotoSwipe: any;\r\ndeclare const PhotoSwipeUI_Default: any;\r\n\r\nexport interface PhotoSwipeModelRef {\r\n    close: () => void;\r\n    listen: (eventName: string, callbackFn: (...args: any) => void) => void;\r\n    getCurrentIndex: () => number;\r\n}\r\n\r\nexport interface PhotoSwipeItem {\r\n    src: string;\r\n    w: number;\r\n    h: number;\r\n    msrc?: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface PhotoSwipeThumbBounds {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n}\r\n\r\nexport interface PhotoSwipeOptions {\r\n    index?: number;\r\n    getThumbBoundsFn?: (index: number) => PhotoSwipeThumbBounds;\r\n    showHideOpacity?: boolean;\r\n    bgOpacity?: number;\r\n    loop?: boolean;\r\n    history?: boolean;\r\n}\r\n\r\nconst template = `\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PhotoSwipeService implements OnDestroy {\r\n    initialized = false;\r\n    element: HTMLDivElement;\r\n\r\n    constructor(\r\n        private zone: NgZone,\r\n        private resources: ResourcesService\r\n    ) { }\r\n\r\n    load(): Observable<void> {\r\n        return from(this.loadLibrary());\r\n    }\r\n\r\n    open(items: PhotoSwipeItem[], options: PhotoSwipeOptions): Observable<PhotoSwipeModelRef> {\r\n        return new Observable(observer => {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.loadLibrary().then(() => {\r\n                    if (observer.closed) {\r\n                        return;\r\n                    }\r\n                    if (!this.initialized) {\r\n                        this.init();\r\n                    }\r\n\r\n                    this.createGallery(observer, items, options);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initialized) {\r\n            this.element.parentElement.removeChild(this.element);\r\n        }\r\n    }\r\n\r\n    private createGallery(observer: Subscriber<PhotoSwipeModelRef>, items: PhotoSwipeItem[], options: PhotoSwipeOptions): void {\r\n        let gallery = null;\r\n\r\n        gallery = new PhotoSwipe(this.element, PhotoSwipeUI_Default, items, options);\r\n        gallery.listen('destroy', () => this.zone.run(() => {\r\n            gallery = null;\r\n            this.zone.run(() => observer.complete());\r\n        }));\r\n        gallery.init();\r\n\r\n        const modelRef: PhotoSwipeModelRef = {\r\n            close: () => gallery.close(),\r\n            listen: (eventName, callbackFn) => gallery.listen(eventName, (...args) => {\r\n                this.zone.run(() => callbackFn(...args));\r\n            }),\r\n            getCurrentIndex: () => gallery.getCurrentIndex()\r\n        };\r\n\r\n        observer.add(() => {\r\n            if (gallery) {\r\n                gallery.destroy();\r\n            }\r\n        });\r\n\r\n        this.zone.run(() => observer.next(modelRef));\r\n    }\r\n\r\n    private loadLibrary(): Promise<void> {\r\n        return this.resources.loadLibrary('photoSwipe');\r\n    }\r\n\r\n    private init(): void {\r\n        this.initialized = true;\r\n\r\n        const div = document.createElement('div');\r\n\r\n        div.innerHTML = template;\r\n\r\n        this.element = div.firstElementChild as HTMLDivElement;\r\n\r\n        document.body.appendChild(this.element);\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "w",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Post",
            "id": "interface-Post-6547772e65ee826ab2205a94c3464c15",
            "file": "src/app/shared/interfaces/post.ts",
            "type": "interface",
            "sourceCode": "export interface Post {\r\n    title: string;\r\n    image: string;\r\n    categories: string[];\r\n    date: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "categories",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PostComment",
            "id": "interface-PostComment-7014b56c79a530e15574f5814e959825",
            "file": "src/app/shared/interfaces/post-comment.ts",
            "type": "interface",
            "sourceCode": "export interface PostComment {\r\n    author: string;\r\n    avatar?: string;\r\n    date: string;\r\n    text: string;\r\n    postTitle?: string;\r\n    children?: PostComment[];\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "children",
                    "type": "PostComment[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "postTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PostCommentsList",
            "id": "interface-PostCommentsList-f3fce6eacdceb1381f5f35fb36888a64",
            "file": "src/app/shared/interfaces/post-comments-list.ts",
            "type": "interface",
            "sourceCode": "import { PostComment } from './post-comment';\r\n\r\nexport interface PostCommentsList {\r\n    count: number;\r\n    items: PostComment[];\r\n}\r\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "items",
                    "type": "PostComment[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "productInfo",
                    "type": "ProductInfo",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-2c61b0644538de46dfdad1a4fb177040-1",
            "file": "src/app/shared/interfaces/product.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFeature {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ProductFeaturesSection {\r\n    name: string;\r\n    features: ProductFeature[];\r\n}\r\n\r\nexport interface ProductReview {\r\n    avatar: string;\r\n    author: string;\r\n    rating: number;\r\n    date: string;\r\n    text: string;\r\n}\r\n\r\nexport interface Product {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    compareAtPrice: number|null;\r\n    images: string[];\r\n    badges: ('sale'|'new'|'hot')[];\r\n    rating: number;\r\n    reviews: number;\r\n    availability: string;\r\n    features: ProductFeature[];\r\n    options: Array<any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "availability",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "badges",
                    "type": "(\"sale\" | \"new\" | \"hot\")[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "compareAtPrice",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "features",
                    "type": "ProductFeature[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "images",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "options",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "reviews",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Product-1"
        },
        {
            "name": "ProductDetails",
            "id": "interface-ProductDetails-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "defaultMaxQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "productInfo",
                    "type": "ProductInfo",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductFeature",
            "id": "interface-ProductFeature-2c61b0644538de46dfdad1a4fb177040",
            "file": "src/app/shared/interfaces/product.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFeature {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ProductFeaturesSection {\r\n    name: string;\r\n    features: ProductFeature[];\r\n}\r\n\r\nexport interface ProductReview {\r\n    avatar: string;\r\n    author: string;\r\n    rating: number;\r\n    date: string;\r\n    text: string;\r\n}\r\n\r\nexport interface Product {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    compareAtPrice: number|null;\r\n    images: string[];\r\n    badges: ('sale'|'new'|'hot')[];\r\n    rating: number;\r\n    reviews: number;\r\n    availability: string;\r\n    features: ProductFeature[];\r\n    options: Array<any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductFeaturesSection",
            "id": "interface-ProductFeaturesSection-2c61b0644538de46dfdad1a4fb177040",
            "file": "src/app/shared/interfaces/product.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFeature {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ProductFeaturesSection {\r\n    name: string;\r\n    features: ProductFeature[];\r\n}\r\n\r\nexport interface ProductReview {\r\n    avatar: string;\r\n    author: string;\r\n    rating: number;\r\n    date: string;\r\n    text: string;\r\n}\r\n\r\nexport interface Product {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    compareAtPrice: number|null;\r\n    images: string[];\r\n    badges: ('sale'|'new'|'hot')[];\r\n    rating: number;\r\n    reviews: number;\r\n    availability: string;\r\n    features: ProductFeature[];\r\n    options: Array<any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "features",
                    "type": "ProductFeature[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductFilterBase",
            "id": "interface-ProductFilterBase-d798807a8a00ae8d964805a4288837c9",
            "file": "src/app/shared/interfaces/product-filter.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFilterBase {\r\n    name: string;\r\n}\r\n\r\nexport interface ProductFilterCategory extends ProductFilterBase {\r\n    type: 'categories';\r\n    options: {\r\n        items: {\r\n            type: 'parent'|'current'|'child';\r\n            count: number;\r\n            name: string;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterPrice extends ProductFilterBase {\r\n    type: 'price';\r\n    options: {\r\n        min: number;\r\n        max: number;\r\n        from: number;\r\n        to: number;\r\n    };\r\n}\r\n\r\nexport interface ProductFilterCheckbox extends ProductFilterBase {\r\n    type: 'checkbox';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterRadio extends ProductFilterBase {\r\n    type: 'radio';\r\n    options: {\r\n        name: string;\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterColor extends ProductFilterBase {\r\n    type: 'color';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            color: string;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n            white: boolean;\r\n            light: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport type ProductFilter = ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor;\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductFilterCategory",
            "id": "interface-ProductFilterCategory-d798807a8a00ae8d964805a4288837c9",
            "file": "src/app/shared/interfaces/product-filter.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFilterBase {\r\n    name: string;\r\n}\r\n\r\nexport interface ProductFilterCategory extends ProductFilterBase {\r\n    type: 'categories';\r\n    options: {\r\n        items: {\r\n            type: 'parent'|'current'|'child';\r\n            count: number;\r\n            name: string;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterPrice extends ProductFilterBase {\r\n    type: 'price';\r\n    options: {\r\n        min: number;\r\n        max: number;\r\n        from: number;\r\n        to: number;\r\n    };\r\n}\r\n\r\nexport interface ProductFilterCheckbox extends ProductFilterBase {\r\n    type: 'checkbox';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterRadio extends ProductFilterBase {\r\n    type: 'radio';\r\n    options: {\r\n        name: string;\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterColor extends ProductFilterBase {\r\n    type: 'color';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            color: string;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n            white: boolean;\r\n            light: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport type ProductFilter = ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor;\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ProductFilterBase"
        },
        {
            "name": "ProductFilterCheckbox",
            "id": "interface-ProductFilterCheckbox-d798807a8a00ae8d964805a4288837c9",
            "file": "src/app/shared/interfaces/product-filter.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFilterBase {\r\n    name: string;\r\n}\r\n\r\nexport interface ProductFilterCategory extends ProductFilterBase {\r\n    type: 'categories';\r\n    options: {\r\n        items: {\r\n            type: 'parent'|'current'|'child';\r\n            count: number;\r\n            name: string;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterPrice extends ProductFilterBase {\r\n    type: 'price';\r\n    options: {\r\n        min: number;\r\n        max: number;\r\n        from: number;\r\n        to: number;\r\n    };\r\n}\r\n\r\nexport interface ProductFilterCheckbox extends ProductFilterBase {\r\n    type: 'checkbox';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterRadio extends ProductFilterBase {\r\n    type: 'radio';\r\n    options: {\r\n        name: string;\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterColor extends ProductFilterBase {\r\n    type: 'color';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            color: string;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n            white: boolean;\r\n            light: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport type ProductFilter = ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor;\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ProductFilterBase"
        },
        {
            "name": "ProductFilterColor",
            "id": "interface-ProductFilterColor-d798807a8a00ae8d964805a4288837c9",
            "file": "src/app/shared/interfaces/product-filter.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFilterBase {\r\n    name: string;\r\n}\r\n\r\nexport interface ProductFilterCategory extends ProductFilterBase {\r\n    type: 'categories';\r\n    options: {\r\n        items: {\r\n            type: 'parent'|'current'|'child';\r\n            count: number;\r\n            name: string;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterPrice extends ProductFilterBase {\r\n    type: 'price';\r\n    options: {\r\n        min: number;\r\n        max: number;\r\n        from: number;\r\n        to: number;\r\n    };\r\n}\r\n\r\nexport interface ProductFilterCheckbox extends ProductFilterBase {\r\n    type: 'checkbox';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterRadio extends ProductFilterBase {\r\n    type: 'radio';\r\n    options: {\r\n        name: string;\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterColor extends ProductFilterBase {\r\n    type: 'color';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            color: string;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n            white: boolean;\r\n            light: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport type ProductFilter = ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor;\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ProductFilterBase"
        },
        {
            "name": "ProductFilterPrice",
            "id": "interface-ProductFilterPrice-d798807a8a00ae8d964805a4288837c9",
            "file": "src/app/shared/interfaces/product-filter.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFilterBase {\r\n    name: string;\r\n}\r\n\r\nexport interface ProductFilterCategory extends ProductFilterBase {\r\n    type: 'categories';\r\n    options: {\r\n        items: {\r\n            type: 'parent'|'current'|'child';\r\n            count: number;\r\n            name: string;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterPrice extends ProductFilterBase {\r\n    type: 'price';\r\n    options: {\r\n        min: number;\r\n        max: number;\r\n        from: number;\r\n        to: number;\r\n    };\r\n}\r\n\r\nexport interface ProductFilterCheckbox extends ProductFilterBase {\r\n    type: 'checkbox';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterRadio extends ProductFilterBase {\r\n    type: 'radio';\r\n    options: {\r\n        name: string;\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterColor extends ProductFilterBase {\r\n    type: 'color';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            color: string;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n            white: boolean;\r\n            light: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport type ProductFilter = ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor;\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ProductFilterBase"
        },
        {
            "name": "ProductFilterRadio",
            "id": "interface-ProductFilterRadio-d798807a8a00ae8d964805a4288837c9",
            "file": "src/app/shared/interfaces/product-filter.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFilterBase {\r\n    name: string;\r\n}\r\n\r\nexport interface ProductFilterCategory extends ProductFilterBase {\r\n    type: 'categories';\r\n    options: {\r\n        items: {\r\n            type: 'parent'|'current'|'child';\r\n            count: number;\r\n            name: string;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterPrice extends ProductFilterBase {\r\n    type: 'price';\r\n    options: {\r\n        min: number;\r\n        max: number;\r\n        from: number;\r\n        to: number;\r\n    };\r\n}\r\n\r\nexport interface ProductFilterCheckbox extends ProductFilterBase {\r\n    type: 'checkbox';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterRadio extends ProductFilterBase {\r\n    type: 'radio';\r\n    options: {\r\n        name: string;\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport interface ProductFilterColor extends ProductFilterBase {\r\n    type: 'color';\r\n    options: {\r\n        items: {\r\n            label: string;\r\n            count: number;\r\n            color: string;\r\n            checked: boolean;\r\n            disabled: boolean;\r\n            white: boolean;\r\n            light: boolean;\r\n        }[];\r\n    };\r\n}\r\n\r\nexport type ProductFilter = ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor;\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ProductFilterBase"
        },
        {
            "name": "ProductImage",
            "id": "interface-ProductImage-f4c62df057a536ef99305bad82baba36",
            "file": "src/app/shared/components/product/product.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Inject, Input, OnInit, PLATFORM_ID, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { Product } from '../../interfaces/product';\r\nimport { CarouselComponent, SlidesOutputData } from 'ngx-owl-carousel-o';\r\nimport { FormControl } from '@angular/forms';\r\nimport { CartService } from '../../services/cart.service';\r\nimport { WishlistService } from '../../services/wishlist.service';\r\nimport { CompareService } from '../../services/compare.service';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { OwlCarouselOConfig } from 'ngx-owl-carousel-o/lib/carousel/owl-carousel-o-config';\r\nimport { PhotoSwipeService } from '../../services/photo-swipe.service';\r\nimport { DirectionService } from '../../services/direction.service';\r\n\r\ninterface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    active: boolean;\r\n}\r\n\r\nexport type Layout = 'standard'|'sidebar'|'columnar'|'quickview';\r\n\r\n@Component({\r\n    selector: 'app-product',\r\n    templateUrl: './product.component.html',\r\n    styleUrls: ['./product.component.scss']\r\n})\r\nexport class ProductComponent implements OnInit {\r\n    private dataProduct: Product;\r\n    private dataLayout: Layout = 'standard';\r\n\r\n    showGallery = true;\r\n    showGalleryTimeout: number;\r\n\r\n    @ViewChild('featuredCarousel', { read: CarouselComponent, static: false }) featuredCarousel: CarouselComponent;\r\n    @ViewChild('thumbnailsCarousel', { read: CarouselComponent, static: false }) thumbnailsCarousel: CarouselComponent;\r\n    @ViewChildren('imageElement', {read: ElementRef}) imageElements: QueryList<ElementRef>;\r\n\r\n    @Input() set layout(value: Layout) {\r\n        this.dataLayout = value;\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // this dirty hack is needed to re-initialize the gallery after changing the layout\r\n            clearTimeout(this.showGalleryTimeout);\r\n            this.showGallery = false;\r\n            this.showGalleryTimeout = window.setTimeout(() => {\r\n                this.showGallery = true;\r\n            }, 0);\r\n        }\r\n    }\r\n    get layout(): Layout {\r\n        return this.dataLayout;\r\n    }\r\n\r\n    @Input() set product(value: Product) {\r\n        this.dataProduct = value;\r\n        this.images = value ? this.dataProduct.images.map((url, index) => {\r\n            return {\r\n                id: index.toString(),\r\n                url,\r\n                active: index === 0\r\n            };\r\n        }) : [];\r\n    }\r\n    get product(): Product {\r\n        return this.dataProduct;\r\n    }\r\n\r\n    images: ProductImage[] = [];\r\n\r\n    carouselOptions: Partial<OwlCarouselOConfig> = {\r\n        dots: false,\r\n        autoplay: false,\r\n        responsive: {\r\n            0: {items: 1}\r\n        },\r\n        rtl: this.direction.isRTL()\r\n    };\r\n\r\n    thumbnailsCarouselOptions: Partial<OwlCarouselOConfig> = {\r\n        dots: false,\r\n        autoplay: false,\r\n        margin: 10,\r\n        items: 5,\r\n        responsive: {\r\n            480: {items: 5},\r\n            380: {items: 4},\r\n              0: {items: 3}\r\n        },\r\n        rtl: this.direction.isRTL()\r\n    };\r\n\r\n    quantity: FormControl = new FormControl(1);\r\n\r\n    addingToCart = false;\r\n    addingToWishlist = false;\r\n    addingToCompare = false;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: any,\r\n        private cart: CartService,\r\n        private wishlist: WishlistService,\r\n        private compare: CompareService,\r\n        private photoSwipe: PhotoSwipeService,\r\n        private direction: DirectionService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.layout !== 'quickview' && isPlatformBrowser(this.platformId)) {\r\n            this.photoSwipe.load().subscribe();\r\n        }\r\n    }\r\n\r\n    setActiveImage(image: ProductImage): void {\r\n        this.images.forEach(eachImage => eachImage.active = eachImage === image);\r\n    }\r\n\r\n    featuredCarouselTranslated(event: SlidesOutputData): void {\r\n        if (event.slides.length) {\r\n            const activeImageId = event.slides[0].id;\r\n\r\n            this.images.forEach(eachImage => eachImage.active = eachImage.id === activeImageId);\r\n\r\n            if (!this.thumbnailsCarousel.slidesData.find(slide => slide.id === event.slides[0].id && slide.isActive)) {\r\n                this.thumbnailsCarousel.to(event.slides[0].id);\r\n            }\r\n        }\r\n    }\r\n\r\n    addToCart(): void {\r\n        if (!this.addingToCart && this.product && this.quantity.value > 0) {\r\n            this.addingToCart = true;\r\n\r\n            this.cart.add(this.product, this.quantity.value).subscribe({complete: () => this.addingToCart = false});\r\n        }\r\n    }\r\n\r\n    addToWishlist(): void {\r\n        if (!this.addingToWishlist && this.product) {\r\n            this.addingToWishlist = true;\r\n\r\n            this.wishlist.add(this.product).subscribe({complete: () => this.addingToWishlist = false});\r\n        }\r\n    }\r\n\r\n    addToCompare(): void {\r\n        if (!this.addingToCompare && this.product) {\r\n            this.addingToCompare = true;\r\n\r\n            this.compare.add(this.product).subscribe({complete: () => this.addingToCompare = false});\r\n        }\r\n    }\r\n\r\n    openPhotoSwipe(event: MouseEvent, image: ProductImage): void {\r\n        if (this.layout !== 'quickview') {\r\n            event.preventDefault();\r\n\r\n            const images = this.images.map(eachImage => {\r\n                return {\r\n                    src: eachImage.url,\r\n                    msrc: eachImage.url,\r\n                    w: 700,\r\n                    h: 700\r\n                };\r\n            });\r\n            const options = {\r\n                getThumbBoundsFn: index => {\r\n                    const imageElement = this.imageElements.toArray()[index].nativeElement;\r\n                    const pageYScroll = window.pageYOffset || document.documentElement.scrollTop;\r\n                    const rect = imageElement.getBoundingClientRect();\r\n\r\n                    return {x: rect.left, y: rect.top + pageYScroll, w: rect.width};\r\n                },\r\n                index: this.images.indexOf(image),\r\n                bgOpacity: .9,\r\n                history: false\r\n            };\r\n\r\n            this.photoSwipe.open(images, options).subscribe(galleryRef => {\r\n                galleryRef.listen('beforeChange', () => {\r\n                    this.featuredCarousel.to(this.images[galleryRef.getCurrentIndex()].id);\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductInfo",
            "id": "interface-ProductInfo-af155833da0894405e2afc17ecf940cb",
            "file": "src/app/cart/models/cart.model.ts",
            "type": "interface",
            "sourceCode": "export interface Order {\n  'id':  number;\n  'itemList': ItemList[];\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'totalQuantity': number;\n  'userId': number;\n}\n\nexport interface ItemList {\n  \"id\": number;\n  \"productId\": number;\n  \"quantity\": number;\n  \"orderNumber\": string;\n  \"product\": Product;\n}\n\nexport interface Product {\n  \"id\":number;\n  \"name\":string;\n  \"description\":string;\n  \"slug\":string;\n  \"price\": number;\n  \"productInfo\": ProductInfo;\n}\n\nexport interface ProductInfo {\n  \"id\":number;\n  \"imageList\": [{\n    \"_id\": number;\n    \"largeUrl\": string;\n    }];\n  }\n\nexport interface CheckoutInfo {\n  payment_method_id: string;\n  amount: number;\n}\n\nexport interface PaymentMethods {\n  \"payments\": PaymentDescription[];\n}\n\nexport interface PaymentDescription {\n  \"_id\": number;\n  \"paymentType\": string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "imageList",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductInfo",
            "id": "interface-ProductInfo-d88d237859f05b09dbd9764125422071-1",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "imageList",
                    "type": "ImageList",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ProductInfo-1"
        },
        {
            "name": "ProductReview",
            "id": "interface-ProductReview-2c61b0644538de46dfdad1a4fb177040",
            "file": "src/app/shared/interfaces/product.ts",
            "type": "interface",
            "sourceCode": "export interface ProductFeature {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport interface ProductFeaturesSection {\r\n    name: string;\r\n    features: ProductFeature[];\r\n}\r\n\r\nexport interface ProductReview {\r\n    avatar: string;\r\n    author: string;\r\n    rating: number;\r\n    date: string;\r\n    text: string;\r\n}\r\n\r\nexport interface Product {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    compareAtPrice: number|null;\r\n    images: string[];\r\n    badges: ('sale'|'new'|'hot')[];\r\n    rating: number;\r\n    reviews: number;\r\n    availability: string;\r\n    features: ProductFeature[];\r\n    options: Array<any>;\r\n}\r\n",
            "properties": [
                {
                    "name": "author",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "avatar",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Products",
            "id": "interface-Products-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "availability",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "badges",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "features",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "options",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "productInfo",
                    "type": "ProductInfo",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rating",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "reviews",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>*\nProducts</p>\n",
            "methods": []
        },
        {
            "name": "ProductSlug",
            "id": "interface-ProductSlug-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RegisterUser",
            "id": "interface-RegisterUser-a3a2a9ad465c64becfef2be902bcf14d",
            "file": "src/app/auth/store/models/login.model.ts",
            "type": "interface",
            "sourceCode": "import {defaultLanguage} from '../../../core/consts/consts';\n\nexport interface UserCredentials {\n  'password': string;\n  'userName': string;\n}\n\nexport interface Role {\n  'description': string;\n  'id': number;\n  'roleName': string;\n}\n\nexport interface Login {\n  'id': number;\n  'roles': Role[];\n}\n\nexport interface UserDetails {\n  'id':          number;\n  'userName':    string;\n  'orderNumber'?: string;\n  'mobile':      number;\n  'token':       string;\n  'language'?:   string;\n  'login': Login;\n}\n\nexport interface RegisterUser {\n  'id':          number;\n  'userName':    string;\n  'password'?:   string;\n  'token':       string;\n  'mobile':      number;\n  'login':       Login;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "login",
                    "type": "Login",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "mobile",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RemoveItemId",
            "id": "interface-RemoveItemId-d88d237859f05b09dbd9764125422071",
            "file": "src/app/products/store/models/products.model.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'error':       string;\n  'price': number;\n  'productInfo': ProductInfo;\n  'id': number;\n  'badges'        ?: string[];\n  'rating'        ?: number;\n  'reviews'       ?: number;\n  'availability'  ?: string;\n  'features'      ?: {name: string; value: string;}[];\n  'options'       ?: string[];\n}\n\nexport interface ProductInfo {\n  'imageList': ImageList;\n  'id': number;\n}\n\nexport interface ImageList {\n  '_id':      number;\n  'largeUrl': string;\n  'imageUrl': string;\n}\n\nexport interface ProductSlug {\n  'slug':    string;\n}\n\nexport interface errorState {\n  status: string;\n  message: string;\n}\n\nexport interface ProductDetails {\n  'id'?:           number;\n  'name':         string;\n  'description':  string;\n  'slug':         string;\n  'price':        number;\n  'productInfo':  ProductInfo;\n  'defaultMaxQuantity': number;\n}\n\nexport const initStateOfProductDetails = {\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n};\n\nexport interface RemoveItemId {\n  'id':          number;\n}\n\nexport interface error_message {\n  'error_message': string;\n}\n\nexport interface Order {\n  'id':  number;\n  'itemList': number;\n  'orderNumber': string;\n  'orderToken': number;\n  'payment': number;\n  'paymentId': number;\n  'paymentPaid': number;\n  'paymentPlaced': number;\n  'totalAmount': number;\n  'userId': number;\n}\n\n\n// {\n// // id  оформления заказа\n//    id: number,\n//    total_price: number,\n//    orderNumber : string\n//    orderToken : string,\n//    order_items: [{\n//        // id - номер добавления в корзину из п2\n//        id: number,\n//        quantity: number\n//        price: string,\n//        total: string,\n//        // implemented:\n//        productInfo: {\n//           // id товаров - мы это уже имплементировали ранее\n//           id: number,\n//           price : string,\n//           name: string,\n//           description: string,\n//           slug: string,\n//           imageList: [{\n//             id: number,\n//             largeUrl: string\n//           }]\n//       }\n//   }]\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-a3a2a9ad465c64becfef2be902bcf14d",
            "file": "src/app/auth/store/models/login.model.ts",
            "type": "interface",
            "sourceCode": "import {defaultLanguage} from '../../../core/consts/consts';\n\nexport interface UserCredentials {\n  'password': string;\n  'userName': string;\n}\n\nexport interface Role {\n  'description': string;\n  'id': number;\n  'roleName': string;\n}\n\nexport interface Login {\n  'id': number;\n  'roles': Role[];\n}\n\nexport interface UserDetails {\n  'id':          number;\n  'userName':    string;\n  'orderNumber'?: string;\n  'mobile':      number;\n  'token':       string;\n  'language'?:   string;\n  'login': Login;\n}\n\nexport interface RegisterUser {\n  'id':          number;\n  'userName':    string;\n  'password'?:   string;\n  'token':       string;\n  'mobile':      number;\n  'login':       Login;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "roleName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserCredentials",
            "id": "interface-UserCredentials-a3a2a9ad465c64becfef2be902bcf14d",
            "file": "src/app/auth/store/models/login.model.ts",
            "type": "interface",
            "sourceCode": "import {defaultLanguage} from '../../../core/consts/consts';\n\nexport interface UserCredentials {\n  'password': string;\n  'userName': string;\n}\n\nexport interface Role {\n  'description': string;\n  'id': number;\n  'roleName': string;\n}\n\nexport interface Login {\n  'id': number;\n  'roles': Role[];\n}\n\nexport interface UserDetails {\n  'id':          number;\n  'userName':    string;\n  'orderNumber'?: string;\n  'mobile':      number;\n  'token':       string;\n  'language'?:   string;\n  'login': Login;\n}\n\nexport interface RegisterUser {\n  'id':          number;\n  'userName':    string;\n  'password'?:   string;\n  'token':       string;\n  'mobile':      number;\n  'login':       Login;\n}\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserDetails",
            "id": "interface-UserDetails-a3a2a9ad465c64becfef2be902bcf14d",
            "file": "src/app/auth/store/models/login.model.ts",
            "type": "interface",
            "sourceCode": "import {defaultLanguage} from '../../../core/consts/consts';\n\nexport interface UserCredentials {\n  'password': string;\n  'userName': string;\n}\n\nexport interface Role {\n  'description': string;\n  'id': number;\n  'roleName': string;\n}\n\nexport interface Login {\n  'id': number;\n  'roles': Role[];\n}\n\nexport interface UserDetails {\n  'id':          number;\n  'userName':    string;\n  'orderNumber'?: string;\n  'mobile':      number;\n  'token':       string;\n  'language'?:   string;\n  'login': Login;\n}\n\nexport interface RegisterUser {\n  'id':          number;\n  'userName':    string;\n  'password'?:   string;\n  'token':       string;\n  'mobile':      number;\n  'login':       Login;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "language",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "login",
                    "type": "Login",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "mobile",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "WishlistData",
            "id": "interface-WishlistData-42795ad7b70a13cdfb06ca687d47097e",
            "file": "src/app/shared/services/wishlist.service.ts",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable, OnDestroy, PLATFORM_ID } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { Product } from '../interfaces/product';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface WishlistData {\r\n    items: Product[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WishlistService implements OnDestroy {\r\n    private data: WishlistData = {\r\n        items: []\r\n    };\r\n\r\n    private destroy$: Subject<void> = new Subject();\r\n    private itemsSubject$: BehaviorSubject<Product[]> = new BehaviorSubject([]);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    readonly items$: Observable<Product[]> = this.itemsSubject$.pipe(takeUntil(this.destroy$));\r\n    readonly count$: Observable<number> = this.itemsSubject$.pipe(map(items => items.length));\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    add(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index === -1) {\r\n                this.data.items.push(product);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    remove(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index !== -1) {\r\n                this.data.items.splice(index, 1);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('wishlistItems', JSON.stringify(this.data.items));\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('wishlistItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n            this.itemsSubject$.next(this.data.items);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CartEffects",
            "id": "injectable-CartEffects-b0266954ac58984a45104e4cb0593edc",
            "file": "src/app/cart/store/effects/cart.effects.ts",
            "properties": [
                {
                    "name": "addToCart$",
                    "defaultValue": "this.addToCartAction$.pipe(\n      ofType(ADD_TO_CART),\n      switchMap((productToCart: any) => this.cartService.addProductToShoppingCart(productToCart).pipe(\n        map((data: any) => new AddToCartSuccess( data )),\n        // TODO: need to replace with Error action:\n        catchError(err => of(new Error('error')))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "checkoutShoppingCart$",
                    "defaultValue": "this.checkoutShoppingCartAtion$.pipe(\n      ofType(CHECK_OUT),\n      map( data => {\n        this.sessionService.setPlacedOrderNumberInStorage(this.sessionService.getOrderNumberFromStorage());\n        return data;\n      }),\n      switchMap((orderPaymentDetails: any) => this.cartService.checkoutShoppingCart(orderPaymentDetails.payload)),\n      switchMap(data => [\n          new SaveOrderInHistoryApi(),\n          new SavePlacedOrder( this.sessionService.getOrderNumberFromStorage() ),\n          new GetOrderNumber( this.sessionService.getUserDetails() ),\n          new CheckOutSuccess( data )\n      ])\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteSubmittedOrderFromApi",
                    "defaultValue": "this.deleteOrderInHistoryApiAction$.pipe(\n    ofType(DELETE_ORDER_FROM_HISTORY_API),\n    switchMap((deleteOrderObj: {type: string; payload: any}) => this.ordersHistoryService.deleteOrder(deleteOrderObj.payload).pipe(\n      map((data: any) => {\n        return new FetchOrderHistory();\n      }),\n      catchError(err => {\n        console.log(`Was not able to delete order, error: ${err}`);\n        return of( new FetchOrderHistory());\n      })\n    ))\n  )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getOrdersFromtStore$",
                    "defaultValue": "this.getOrdersFromtStoreAction$.pipe(\n      ofType(GET_CURRENT_ORDER_FROM_STORE),\n      map((data: any) => new GetCurrentOrderFromStoreSuccess(data))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getSubmittedOrdersFromHistoryApi$",
                    "defaultValue": "this.getOrdersFromtStoreAction$.pipe(\n    ofType(FETCH_ORDERS_HISTORY),\n    switchMap(() => this.ordersHistoryService.fetchOrdersHistory().pipe(\n      map((data: any) => {\n        return new StoreProcessedOrderInHistoryApiSuccess(data);\n      }),\n      catchError(err => {\n        console.error(err);\n        return of(new Error('error'));\n      })\n    ))\n  )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "removeFromCart$",
                    "defaultValue": "this.removeFromCartAction$.pipe(\n    ofType(REMOVE_FROM_CART),\n    switchMap((removeProductInfo: any) => this.cartService.removeProductFromShoppingCart(removeProductInfo).pipe(\n      map((data: any) => new AddToCartSuccess( data )),\n      catchError(err => of(new EffectError({error_message: 'remove_product_error'})))\n    ))\n  )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "saveProductsInStoreAPI$",
                    "defaultValue": "this.saveProductsInStoreAPIAction$.pipe(\n      ofType(ADD_TO_CART_SUCCESS),\n      switchMap((productToCart: any) => this.cartService.productsShoppingCart().pipe(\n        map((data: any) => new StoreCurrentOrder( data )),\n        // TODO: need to replace with Error action:\n        catchError(err => of(new Error('error')))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "saveSubmittedOrderToHistoryApi$",
                    "defaultValue": "this.saveOrderInHistoryApiAction$.pipe(\n    ofType(SAVE_ORDER_IN_HISTORY_API),\n    switchMap(() => this.ordersHistoryService.saveOrder().pipe(\n      map((data: any) => {\n        return new StoreProcessedOrderInHistoryApiSuccess(data);\n      }),\n      catchError(err => {\n        console.log(err);\n        return of(new Error('error'));\n      })\n    ))\n  )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {switchMap, map, catchError, filter} from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Store, Action } from '@ngrx/store';\nimport { of ,  Observable } from 'rxjs';\nimport { OrdersHistoryApiService } from '../../service/orders-history-api.service';\nimport { SessionService } from '../../../core/services/session.service';\n\nimport {\n  ADD_TO_CART, ADD_TO_CART_SUCCESS,\n  GET_CURRENT_ORDER_FROM_STORE,\n  CHECK_OUT, REMOVE_FROM_CART, SAVE_PLACED_ORDER, DELETE_ORDER_FROM_HISTORY_API,\n  FETCH_ORDERS_HISTORY, SAVE_ORDER_IN_HISTORY_API,\n  AddToCart, AddToCartSuccess, StoreCurrentOrder,\n  GetCurrentOrderFromStoreSuccess, CheckOutSuccess, SavePlacedOrder,\n  SaveOrderInHistoryApi, StoreProcessedOrderInHistoryApiSuccess, FetchOrderHistory\n} from '../actions/cart.actions';\n// TODO: need to add order models\n\nimport { CartService } from '../../../core/services/cart.service';\nimport { CartState } from '../states/cart.states';\nimport {ProductsService} from '../../../core/services/products.service';\nimport {EffectError} from '../../../products/store/actions/products.actions';\nimport {GetOrderNumber} from '../../../auth/store/actions/login.actions';\n\n@Injectable()\nexport class CartEffects {\n  constructor(private addToCartAction$: Actions,\n              private checkoutShoppingCartAtion$: Actions,\n              private saveProductsInStoreAPIAction$: Actions,\n              private getOrdersFromtStoreAction$: Actions,\n              private getProcessedOrdersFromtStoreAction$: Actions,\n              private removeFromCartAction$: Actions,\n              private savePlacedOrderActions$: Actions,\n              private saveOrderInHistoryApiAction$: Actions,\n              private deleteOrderInHistoryApiAction$: Actions,\n              private productService: ProductsService,\n              private store: Store<CartState>,\n              private cartService: CartService,\n              private sessionService: SessionService,\n              private ordersHistoryService: OrdersHistoryApiService) {}\n    // Add to cart\n  @Effect() addToCart$: any = this.addToCartAction$.pipe(\n      ofType(ADD_TO_CART),\n      switchMap((productToCart: any) => this.cartService.addProductToShoppingCart(productToCart).pipe(\n        map((data: any) => new AddToCartSuccess( data )),\n        // TODO: need to replace with Error action:\n        catchError(err => of(new Error('error')))\n      ))\n    );\n  @Effect() saveProductsInStoreAPI$: any = this.saveProductsInStoreAPIAction$.pipe(\n      ofType(ADD_TO_CART_SUCCESS),\n      switchMap((productToCart: any) => this.cartService.productsShoppingCart().pipe(\n        map((data: any) => new StoreCurrentOrder( data )),\n        // TODO: need to replace with Error action:\n        catchError(err => of(new Error('error')))\n      ))\n    );\n  // Remove from cart\n  @Effect() removeFromCart$: any = this.removeFromCartAction$.pipe(\n    ofType(REMOVE_FROM_CART),\n    switchMap((removeProductInfo: any) => this.cartService.removeProductFromShoppingCart(removeProductInfo).pipe(\n      map((data: any) => new AddToCartSuccess( data )),\n      catchError(err => of(new EffectError({error_message: 'remove_product_error'})))\n    ))\n  );\n    // get order from store\n   @Effect() getOrdersFromtStore$: any = this.getOrdersFromtStoreAction$.pipe(\n      ofType(GET_CURRENT_ORDER_FROM_STORE),\n      map((data: any) => new GetCurrentOrderFromStoreSuccess(data))\n    );\n\n   // a) make payment b) get updated order number c) update store\n   @Effect() checkoutShoppingCart$: any = this.checkoutShoppingCartAtion$.pipe(\n      ofType(CHECK_OUT),\n      map( data => {\n        this.sessionService.setPlacedOrderNumberInStorage(this.sessionService.getOrderNumberFromStorage());\n        return data;\n      }),\n      switchMap((orderPaymentDetails: any) => this.cartService.checkoutShoppingCart(orderPaymentDetails.payload)),\n      switchMap(data => [\n          new SaveOrderInHistoryApi(),\n          new SavePlacedOrder( this.sessionService.getOrderNumberFromStorage() ),\n          new GetOrderNumber( this.sessionService.getUserDetails() ),\n          new CheckOutSuccess( data )\n      ])\n    );\n\n  // get order from store\n  @Effect() getSubmittedOrdersFromHistoryApi$: any = this.getOrdersFromtStoreAction$.pipe(\n    ofType(FETCH_ORDERS_HISTORY),\n    switchMap(() => this.ordersHistoryService.fetchOrdersHistory().pipe(\n      map((data: any) => {\n        return new StoreProcessedOrderInHistoryApiSuccess(data);\n      }),\n      catchError(err => {\n        console.error(err);\n        return of(new Error('error'));\n      })\n    ))\n  );\n\n  @Effect() saveSubmittedOrderToHistoryApi$: any = this.saveOrderInHistoryApiAction$.pipe(\n    ofType(SAVE_ORDER_IN_HISTORY_API),\n    switchMap(() => this.ordersHistoryService.saveOrder().pipe(\n      map((data: any) => {\n        return new StoreProcessedOrderInHistoryApiSuccess(data);\n      }),\n      catchError(err => {\n        console.log(err);\n        return of(new Error('error'));\n      })\n    ))\n  );\n\n  @Effect() deleteSubmittedOrderFromApi: any = this.deleteOrderInHistoryApiAction$.pipe(\n    ofType(DELETE_ORDER_FROM_HISTORY_API),\n    switchMap((deleteOrderObj: {type: string; payload: any}) => this.ordersHistoryService.deleteOrder(deleteOrderObj.payload).pipe(\n      map((data: any) => {\n        return new FetchOrderHistory();\n      }),\n      catchError(err => {\n        console.log(`Was not able to delete order, error: ${err}`);\n        return of( new FetchOrderHistory());\n      })\n    ))\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "addToCartAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "checkoutShoppingCartAtion$",
                        "type": "Actions"
                    },
                    {
                        "name": "saveProductsInStoreAPIAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "getOrdersFromtStoreAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "getProcessedOrdersFromtStoreAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "removeFromCartAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "savePlacedOrderActions$",
                        "type": "Actions"
                    },
                    {
                        "name": "saveOrderInHistoryApiAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "deleteOrderInHistoryApiAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    },
                    {
                        "name": "cartService",
                        "type": "CartService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "ordersHistoryService",
                        "type": "OrdersHistoryApiService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "addToCartAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutShoppingCartAtion$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "saveProductsInStoreAPIAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "getOrdersFromtStoreAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "getProcessedOrdersFromtStoreAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "removeFromCartAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "savePlacedOrderActions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "saveOrderInHistoryApiAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deleteOrderInHistoryApiAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ordersHistoryService",
                        "type": "OrdersHistoryApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-a80855481868203946aa18966785b011",
            "file": "src/app/core/services/cart.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addProductToShoppingCart",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkoutShoppingCart",
                    "args": [
                        {
                            "name": "paymentInfo",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "paymentInfo",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMethodsOfPayment",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 134
                },
                {
                    "name": "getOrderNumber",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "productsShoppingCart",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "removeProductFromShoppingCart",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { SessionService } from './session.service';\nimport {catchError, map} from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class CartService {\n\n  constructor(private http: HttpClient,\n              private sessionService: SessionService) { }\n\n  getOrderNumber(data: any): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.post(\n        environment.REST_API + '/rest/api/order/add', { 'userId': data.payload.id }, options\n      ).pipe(\n        map((res: Response) => {\n          const respObj = res;\n          this.sessionService.storeOrderNumberInStorage(respObj);\n          return respObj;\n        })\n      );\n    }\n  }\n\n  addProductToShoppingCart(data: any): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    const orderNumber = this.sessionService.getOrderNumberFromStorage();\n    if (token && orderNumber) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.post(\n        environment.REST_API + `/rest/api/item/add/${orderNumber}`,\n        {\n          'quantity' : data.payload.quantity,\n          'productId': data.payload.id\n        },\n        options\n      ).pipe(\n        map((res: Response) => {\n          const respObj = res;\n          return respObj;\n        })\n      );\n    }\n  }\n  removeProductFromShoppingCart(data: any): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    const orderNumber = this.sessionService.getOrderNumberFromStorage();\n    if (token && orderNumber) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.post(\n        environment.REST_API + `/rest/api/item/remove/${orderNumber}`,\n        {\n          'itemId': data.payload.id\n        },\n        options\n      );\n    }\n  }\n  productsShoppingCart(): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    const orderNumber = this.sessionService.getOrderNumberFromStorage();\n    if (token && orderNumber) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.get(\n        environment.REST_API + `/rest/api/order/number/${orderNumber}`,\n        options\n      ).pipe(\n        map((res: Response) => {\n          const respObj = res;\n          return respObj;\n        })\n      );\n    }\n  }\n  checkoutShoppingCart(paymentInfo: any) {\n    // order_token is not used yet\n    const order_token = null;\n    const token = this.sessionService.getTokenFromStorage();\n    const orderNumber = this.sessionService.getOrderNumberFromStorage();\n    if (token && orderNumber) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.post(\n        environment.REST_API + `/rest/api/order/number/${orderNumber}/makePayment?order_token=${order_token}`,\n        {\n            payment_method_id : paymentInfo.payment_method_id,\n            amount: paymentInfo.amount\n        },\n        options\n      ).pipe(\n        map((res: Response) => {\n          const respObj = res;\n          return respObj;\n        })\n      );\n    }\n\n  }\n\n  getMethodsOfPayment() {\n    const token = this.sessionService.getTokenFromStorage();\n    const orderNumber = this.sessionService.getOrderNumberFromStorage();\n\n    if (token && orderNumber) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.get(\n        environment.REST_API + `/rest/api/payment/all`,\n        options\n      ).pipe(\n        map((res: Response) => {\n          const respObj = res;\n          return respObj;\n        })\n      );\n    }\n\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-2c22bedf8d236c7a58d084fd8701c71c-1",
            "file": "src/app/shared/services/cart.service.ts",
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "{\r\n        items: [],\r\n        quantity: 0,\r\n        subtotal: 0,\r\n        totals: [],\r\n        total: 0\r\n    }",
                    "type": "CartData",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "this.itemsSubject$.asObservable()",
                    "type": "Observable<CartItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "itemsSubject$",
                    "defaultValue": "new BehaviorSubject(this.data.items)",
                    "type": "BehaviorSubject<CartItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onAdding$",
                    "defaultValue": "this.onAddingSubject$.asObservable()",
                    "type": "Observable<Product>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "onAddingSubject$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<Product>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "quantity$",
                    "defaultValue": "this.quantitySubject$.asObservable()",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "quantitySubject$",
                    "defaultValue": "new BehaviorSubject(this.data.quantity)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subtotal$",
                    "defaultValue": "this.subtotalSubject$.asObservable()",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "subtotalSubject$",
                    "defaultValue": "new BehaviorSubject(this.data.subtotal)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "total$",
                    "defaultValue": "this.totalSubject$.asObservable()",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "totals$",
                    "defaultValue": "this.totalsSubject$.asObservable()",
                    "type": "Observable<CartTotal[]>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "totalsSubject$",
                    "defaultValue": "new BehaviorSubject(this.data.totals)",
                    "type": "BehaviorSubject<CartTotal[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "totalSubject$",
                    "defaultValue": "new BehaviorSubject(this.data.total)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        },
                        {
                            "name": "quantity",
                            "type": "number"
                        },
                        {
                            "name": "options",
                            "type": "literal type[]",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CartItem>",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type[]",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calc",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "updates",
                            "type": "literal type[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "updates",
                            "type": "literal type[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { Product } from '../interfaces/product';\r\nimport { CartItem } from '../interfaces/cart-item';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface CartTotal {\r\n    title: string;\r\n    price: number;\r\n    type: 'shipping'|'fee'|'tax'|'other';\r\n}\r\n\r\ninterface CartData {\r\n    items: CartItem[];\r\n    quantity: number;\r\n    subtotal: number;\r\n    totals: CartTotal[];\r\n    total: number;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CartService {\r\n    private data: CartData = {\r\n        items: [],\r\n        quantity: 0,\r\n        subtotal: 0,\r\n        totals: [],\r\n        total: 0\r\n    };\r\n\r\n    private itemsSubject$: BehaviorSubject<CartItem[]> = new BehaviorSubject(this.data.items);\r\n    private quantitySubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.quantity);\r\n    private subtotalSubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.subtotal);\r\n    private totalsSubject$: BehaviorSubject<CartTotal[]> = new BehaviorSubject(this.data.totals);\r\n    private totalSubject$: BehaviorSubject<number> = new BehaviorSubject(this.data.total);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    get items(): ReadonlyArray<CartItem> {\r\n        return this.data.items;\r\n    }\r\n\r\n    get quantity(): number {\r\n        return this.data.quantity;\r\n    }\r\n\r\n    readonly items$: Observable<CartItem[]> = this.itemsSubject$.asObservable();\r\n    readonly quantity$: Observable<number> = this.quantitySubject$.asObservable();\r\n    readonly subtotal$: Observable<number> = this.subtotalSubject$.asObservable();\r\n    readonly totals$: Observable<CartTotal[]> = this.totalsSubject$.asObservable();\r\n    readonly total$: Observable<number> = this.totalSubject$.asObservable();\r\n\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n            this.calc();\r\n        }\r\n    }\r\n\r\n    add(product: Product, quantity: number, options: {name: string; value: string}[] = []): Observable<CartItem> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            let item = this.items.find(eachItem => {\r\n                if (eachItem.product.id !== product.id || eachItem.options.length !== options.length) {\r\n                    return false;\r\n                }\r\n\r\n                if (eachItem.options.length) {\r\n                    for (const option of options) {\r\n                        if (!eachItem.options.find(itemOption => itemOption.name === option.name && itemOption.value === option.value)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            if (item) {\r\n                item.quantity += quantity;\r\n            } else {\r\n                item = {product, quantity, options};\r\n\r\n                this.data.items.push(item);\r\n            }\r\n\r\n            this.save();\r\n            this.calc();\r\n\r\n            return item;\r\n        }));\r\n    }\r\n\r\n    update(updates: {item: CartItem, quantity: number}[]): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            updates.forEach(update => {\r\n                const item = this.items.find(eachItem => eachItem === update.item);\r\n\r\n                if (item) {\r\n                    item.quantity = update.quantity;\r\n                }\r\n            });\r\n\r\n            this.save();\r\n            this.calc();\r\n        }));\r\n    }\r\n\r\n    remove(item: CartItem): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.data.items = this.data.items.filter(eachItem => eachItem !== item);\r\n\r\n            this.save();\r\n            this.calc();\r\n        }));\r\n    }\r\n\r\n    private calc(): void {\r\n        let quantity = 0;\r\n        let subtotal = 0;\r\n\r\n        this.data.items.forEach(item => {\r\n            quantity += item.quantity;\r\n            subtotal += item.product.price * item.quantity;\r\n        });\r\n\r\n        const totals: CartTotal[] = [];\r\n\r\n        totals.push({\r\n            title: 'Shipping',\r\n            price: 25,\r\n            type: 'shipping'\r\n        });\r\n        totals.push({\r\n            title: 'Tax',\r\n            price: subtotal * 0.20,\r\n            type: 'tax'\r\n        });\r\n\r\n        const total = subtotal + totals.reduce((acc, eachTotal) => acc + eachTotal.price, 0);\r\n\r\n        this.data.quantity = quantity;\r\n        this.data.subtotal = subtotal;\r\n        this.data.totals = totals;\r\n        this.data.total = total;\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n        this.quantitySubject$.next(this.data.quantity);\r\n        this.subtotalSubject$.next(this.data.subtotal);\r\n        this.totalsSubject$.next(this.data.totals);\r\n        this.totalSubject$.next(this.data.total);\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('cartItems', JSON.stringify(this.data.items));\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('cartItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "ReadonlyArray<CartItem>",
                        "line": 41
                    }
                },
                "quantity": {
                    "name": "quantity",
                    "getSignature": {
                        "name": "quantity",
                        "type": "number",
                        "returnType": "number",
                        "line": 45
                    }
                }
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CartService-1"
        },
        {
            "name": "CompareService",
            "id": "injectable-CompareService-c3190040983a68dd2c57ae9649cbbe45",
            "file": "src/app/shared/services/compare.service.ts",
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "{\r\n        items: []\r\n    }",
                    "type": "CompareData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "this.itemsSubject$.pipe(takeUntil(this.destroy$))",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "itemsSubject$",
                    "defaultValue": "new BehaviorSubject([])",
                    "type": "BehaviorSubject<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onAdding$",
                    "defaultValue": "this.onAddingSubject$.asObservable()",
                    "type": "Observable<Product>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "onAddingSubject$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<Product>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, OnDestroy, PLATFORM_ID } from '@angular/core';\r\nimport { Product } from '../interfaces/product';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface CompareData {\r\n    items: Product[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CompareService implements OnDestroy {\r\n    private data: CompareData = {\r\n        items: []\r\n    };\r\n\r\n    private destroy$: Subject<void> = new Subject();\r\n    private itemsSubject$: BehaviorSubject<Product[]> = new BehaviorSubject([]);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    readonly items$: Observable<Product[]> = this.itemsSubject$.pipe(takeUntil(this.destroy$));\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    add(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index === -1) {\r\n                this.data.items.push(product);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    remove(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index !== -1) {\r\n                this.data.items.splice(index, 1);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('compareItems', JSON.stringify(this.data.items));\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('compareItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n            this.itemsSubject$.next(this.data.items);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CurrencyService",
            "id": "injectable-CurrencyService-f9bbf8929633fc93139a2153242fa082",
            "file": "src/app/shared/services/currency.service.ts",
            "properties": [
                {
                    "name": "changes$",
                    "defaultValue": "this.changesSubject$.asObservable()",
                    "type": "Observable<CurrencyFormatOptions>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "changesSubject$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<CurrencyFormatOptions>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "{\n        options: {}\n    }",
                    "type": "CurrencyServiceData",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { CurrencyFormatOptions } from '../interfaces/currency-format-options';\n\ninterface CurrencyServiceData {\n    options: CurrencyFormatOptions;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrencyService {\n    private data: CurrencyServiceData = {\n        options: {}\n    };\n\n    private changesSubject$: Subject<CurrencyFormatOptions> = new Subject();\n\n    changes$: Observable<CurrencyFormatOptions> = this.changesSubject$.asObservable();\n\n    get options(): CurrencyFormatOptions {\n        return this.data.options;\n    }\n    set options(value: CurrencyFormatOptions) {\n        this.data.options = value;\n        this.changesSubject$.next(value);\n    }\n\n    constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "CurrencyFormatOptions",
                        "line": 21
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DepartmentsService",
            "id": "injectable-DepartmentsService-3df04e56ea26bee2961edbcfd2ca9662",
            "file": "src/app/shared/services/departments.service.ts",
            "properties": [
                {
                    "name": "areaElement$",
                    "defaultValue": "this.areaElementSubject$.asObservable()",
                    "type": "Observable<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "areaElementSubject$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setAreaElement",
                    "args": [
                        {
                            "name": "value",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DepartmentsService {\r\n    private areaElementSubject$: BehaviorSubject<HTMLElement> = new BehaviorSubject(null);\r\n\r\n    areaElement$: Observable<HTMLElement> = this.areaElementSubject$.asObservable();\r\n\r\n    constructor() { }\r\n\r\n    setAreaElement(value: HTMLElement): void {\r\n        this.areaElementSubject$.next(value);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "DirectionService",
            "id": "injectable-DirectionService-f3fe0f7cd75982452af8e50b023bc31b",
            "file": "src/app/shared/services/direction.service.ts",
            "properties": [
                {
                    "name": "direction",
                    "defaultValue": "'ltr'",
                    "type": "Direction",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isLTR",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "isRTL",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ntype Direction = 'ltr'|'rtl';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DirectionService {\n    private direction: Direction = 'ltr';\n\n    get value(): Direction {\n        return this.direction;\n    }\n\n    set value(value: Direction) {\n        this.direction = value;\n\n        if (isPlatformBrowser(this.platformId)) {\n            document.dir = this.direction;\n        }\n    }\n\n    constructor(\n        @Inject(PLATFORM_ID) private platformId: any\n    ) {\n        if (isPlatformBrowser(this.platformId)) {\n            this.direction = getComputedStyle(document.body).direction as Direction;\n        }\n    }\n\n    isLTR(): boolean {\n        return this.value === 'ltr';\n    }\n\n    isRTL(): boolean {\n        return this.value === 'rtl';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "Direction",
                        "line": 12
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "LoginEffects",
            "id": "injectable-LoginEffects-3d64b6068a14c5270d268bb482c87cb7",
            "file": "src/app/auth/store/effects/login.effects.ts",
            "properties": [
                {
                    "name": "CreateOrder$",
                    "defaultValue": "this.createOrder$.pipe(\n      ofType(GET_ORDER_NUMBER),\n      switchMap((userInfo: any) => this.cartService.getOrderNumber(userInfo).pipe(\n          map((orderData: any) => new CreateOrderNumber( orderData )),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "Login$",
                    "defaultValue": "this.loginActions$.pipe(\n      ofType(LOGIN_USER),\n      switchMap((userCreds: any) =>  this.loginService.login(userCreds).pipe(\n          map((loginData: any) => {\n            this.sessionService.setUserContent(JSON.stringify(loginData));\n            return new GetOrderNumber( loginData );\n          }),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "Logout$",
                    "defaultValue": "this.logOut$.pipe(\n      ofType(LOG_OUT),\n      switchMap(() => this.sessionService.logout().pipe(\n          map(() => new FinishStorageClearence()),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "RegisterUserEffect$",
                    "defaultValue": "this.RegisterUserActions$.pipe(\n      ofType(REGISTER_USER),\n      switchMap((registerUserInfo: any) => this.loginService.register(registerUserInfo.payload).pipe(\n          map((registrtionConfirmationData: any) => new RegisterUserSuccess(registrtionConfirmationData)),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {switchMap,  map, catchError } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Store, Action } from '@ngrx/store';\nimport {Observable, of} from 'rxjs';\nimport {LOGIN_USER, GET_ORDER_NUMBER,\n  FinishStorageClearence, GetOrderNumber, EffectError, LOG_OUT} from '../actions/login.actions';\nimport { AppStates } from '../../../app.states';\nimport { LoginService } from '../../../core/services/login.service';\nimport { CartService } from '../../../core/services/cart.service';\nimport { CreateOrderNumber } from '../actions/login.actions';\nimport { SessionService } from '../../../core/services/session.service';\nimport { REGISTER_USER, RegisterUserSuccess } from '../actions/login.actions';\n@Injectable()\nexport class LoginEffects {\n  constructor(private loginActions$: Actions,\n              private createOrder$: Actions,\n              private logOut$: Actions,\n              private loginService: LoginService,\n              private cartService: CartService,\n              private sessionService: SessionService,\n              private RegisterUserActions$: Actions,\n              private store: Store<AppStates>) { }\n\n  @Effect() Login$: Observable<any> = this.loginActions$.pipe(\n      ofType(LOGIN_USER),\n      switchMap((userCreds: any) =>  this.loginService.login(userCreds).pipe(\n          map((loginData: any) => {\n            this.sessionService.setUserContent(JSON.stringify(loginData));\n            return new GetOrderNumber( loginData );\n          }),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    );\n  @Effect() CreateOrder$: any = this.createOrder$.pipe(\n      ofType(GET_ORDER_NUMBER),\n      switchMap((userInfo: any) => this.cartService.getOrderNumber(userInfo).pipe(\n          map((orderData: any) => new CreateOrderNumber( orderData )),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    );\n\n  @Effect() Logout$: any = this.logOut$.pipe(\n      ofType(LOG_OUT),\n      switchMap(() => this.sessionService.logout().pipe(\n          map(() => new FinishStorageClearence()),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    );\n\n  @Effect() RegisterUserEffect$: any = this.RegisterUserActions$.pipe(\n      ofType(REGISTER_USER),\n      switchMap((registerUserInfo: any) => this.loginService.register(registerUserInfo.payload).pipe(\n          map((registrtionConfirmationData: any) => new RegisterUserSuccess(registrtionConfirmationData)),\n          catchError(err => of(new EffectError(err)))\n        )\n      )\n    );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "loginActions$",
                        "type": "Actions"
                    },
                    {
                        "name": "createOrder$",
                        "type": "Actions"
                    },
                    {
                        "name": "logOut$",
                        "type": "Actions"
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService"
                    },
                    {
                        "name": "cartService",
                        "type": "CartService"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "RegisterUserActions$",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "loginActions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createOrder$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logOut$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "RegisterUserActions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-0385461cf9bcd74a93fe9c778d0ad334",
            "file": "src/app/core/services/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserDetails>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RegisterUser>",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserCredentials, UserDetails, RegisterUser } from '../../auth/store/models/login.model';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { SessionService } from './session.service';\nimport { environment } from '../../../environments/environment';\n@Injectable()\nexport class LoginService {\n\n  constructor(private http: HttpClient,\n              private sessionService: SessionService) { }\n\n  login(data?: {action: string; payload: UserCredentials}): Observable<UserDetails> {\n    const userCredentials: UserCredentials = data.payload;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const options = {\n      headers: headers\n    };\n\n    return this.http.post<Observable<UserDetails>>(\n      environment.REST_API + '/rest/login/', userCredentials, options\n    ).pipe(\n        map((res: any) => {\n            this.sessionService.storeTokenInSession(res);\n            return res;\n        })\n    );\n  }\n\n  register(data?: any): Observable<RegisterUser> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const options = {\n      headers: headers\n    };\n    return this.http.post(\n      environment.REST_API + '/rest/register', data, options\n    ).pipe(\n      map((res: any) => {\n        return res;\n      })\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MobileMenuService",
            "id": "injectable-MobileMenuService-12ef120f4b4863421ef30d823060e524",
            "file": "src/app/shared/services/mobile-menu.service.ts",
            "properties": [
                {
                    "name": "isOpen$",
                    "defaultValue": "this.openSubject$.asObservable()",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "openSubject$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MobileMenuService {\r\n    private openSubject$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    isOpen$: Observable<boolean> = this.openSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) { }\r\n\r\n    open(): void {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            const bodyWidth = document.body.offsetWidth;\r\n\r\n            document.body.style.overflow = 'hidden';\r\n            document.body.style.paddingRight = (document.body.offsetWidth - bodyWidth) + 'px';\r\n\r\n            this.openSubject$.next(true);\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            document.body.style.overflow = 'auto';\r\n            document.body.style.paddingRight = '';\r\n\r\n            this.openSubject$.next(false);\r\n        }\r\n    }\r\n\r\n    toggle(): void {\r\n        this.openSubject$.next(!this.openSubject$.value);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OrdersHistoryApiService",
            "id": "injectable-OrdersHistoryApiService-526e3f6108c1f0d2fd0290ca37bf6bcc",
            "file": "src/app/cart/service/orders-history-api.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteOrder",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchOrdersHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "saveOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { catchError, map, switchMap, take } from 'rxjs/operators';\nimport { SessionService } from '../../core/services/session.service';\nimport {of, combineLatest, Observable} from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { UserDetails, Role } from '../../auth/store/models/login.model';\nimport { loginUserDetailsMapper } from '../../auth/store/select/auth.selectors';\n// TODO: move to new module for AWS microservices\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrdersHistoryApiService {\n  constructor(\n      private http: HttpClient,\n      private sessionService: SessionService,\n      private store: Store\n  ) {}\n  fetchOrdersHistory(): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    const userid = this.sessionService.getUserIdFromStorage();\n    if (!!token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.get(environment.ORDER_HISTORY_API + `/orders/userid/${userid}`, options );\n    }\n  }\n  saveOrder() {\n    const token = this.sessionService.getTokenFromStorage();\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return combineLatest([\n        this.store.select(storeData => {\n          if (storeData && storeData['userLoginReducer'] && storeData['userLoginReducer']['userDetails']) {\n            return storeData['userLoginReducer']['userDetails'];\n          }\n        }),\n        this.store.select(storeData => {\n          if (storeData && storeData['cart'] && storeData['cart']['currentOrderInCart']) {\n            return storeData['cart']['currentOrderInCart'];\n          }\n        })\n      ]).pipe(\n            take(1),\n            switchMap( ([storeDate, orderInCart]) => {\n              console.log(orderInCart);\n              const userRole = storeDate.login.roles.filter((role: Role) => role.roleName === 'seller').length > 0 ? 'seller' : 'buyer';\n              return this.http.post(\n                environment.ORDER_HISTORY_API + '/orders',\n                {\n                  userid: typeof storeDate.id === 'string' ? storeDate.id : JSON.stringify(storeDate.id),\n                  orderid: orderInCart.orderNumber,\n                  userRole: userRole,\n                  orderDetails: JSON.stringify(orderInCart)\n                }, options\n              );\n            })\n      );\n  }\n  deleteOrder(orderId: string): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    const userid = this.sessionService.getUserIdFromStorage();\n    if (!!token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.delete(environment.ORDER_HISTORY_API + `/orders/${orderId}`, options );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PhotoSwipeService",
            "id": "injectable-PhotoSwipeService-4bcad4ac9e549edbe91ae6db409c65f5",
            "file": "src/app/shared/services/photo-swipe.service.ts",
            "properties": [
                {
                    "name": "element",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "initialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methods": [
                {
                    "name": "createGallery",
                    "args": [
                        {
                            "name": "observer",
                            "type": "Subscriber<PhotoSwipeModelRef>"
                        },
                        {
                            "name": "items",
                            "type": "PhotoSwipeItem[]"
                        },
                        {
                            "name": "options",
                            "type": "PhotoSwipeOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "observer",
                            "type": "Subscriber<PhotoSwipeModelRef>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "type": "PhotoSwipeItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "PhotoSwipeOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "loadLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 140,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "items",
                            "type": "PhotoSwipeItem[]"
                        },
                        {
                            "name": "options",
                            "type": "PhotoSwipeOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PhotoSwipeModelRef>",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "PhotoSwipeItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "PhotoSwipeOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport { ResourcesService } from './resources.service';\r\nimport { Observable, Subscriber, from } from 'rxjs';\r\n\r\ndeclare const PhotoSwipe: any;\r\ndeclare const PhotoSwipeUI_Default: any;\r\n\r\nexport interface PhotoSwipeModelRef {\r\n    close: () => void;\r\n    listen: (eventName: string, callbackFn: (...args: any) => void) => void;\r\n    getCurrentIndex: () => number;\r\n}\r\n\r\nexport interface PhotoSwipeItem {\r\n    src: string;\r\n    w: number;\r\n    h: number;\r\n    msrc?: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface PhotoSwipeThumbBounds {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n}\r\n\r\nexport interface PhotoSwipeOptions {\r\n    index?: number;\r\n    getThumbBoundsFn?: (index: number) => PhotoSwipeThumbBounds;\r\n    showHideOpacity?: boolean;\r\n    bgOpacity?: number;\r\n    loop?: boolean;\r\n    history?: boolean;\r\n}\r\n\r\nconst template = `\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PhotoSwipeService implements OnDestroy {\r\n    initialized = false;\r\n    element: HTMLDivElement;\r\n\r\n    constructor(\r\n        private zone: NgZone,\r\n        private resources: ResourcesService\r\n    ) { }\r\n\r\n    load(): Observable<void> {\r\n        return from(this.loadLibrary());\r\n    }\r\n\r\n    open(items: PhotoSwipeItem[], options: PhotoSwipeOptions): Observable<PhotoSwipeModelRef> {\r\n        return new Observable(observer => {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.loadLibrary().then(() => {\r\n                    if (observer.closed) {\r\n                        return;\r\n                    }\r\n                    if (!this.initialized) {\r\n                        this.init();\r\n                    }\r\n\r\n                    this.createGallery(observer, items, options);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.initialized) {\r\n            this.element.parentElement.removeChild(this.element);\r\n        }\r\n    }\r\n\r\n    private createGallery(observer: Subscriber<PhotoSwipeModelRef>, items: PhotoSwipeItem[], options: PhotoSwipeOptions): void {\r\n        let gallery = null;\r\n\r\n        gallery = new PhotoSwipe(this.element, PhotoSwipeUI_Default, items, options);\r\n        gallery.listen('destroy', () => this.zone.run(() => {\r\n            gallery = null;\r\n            this.zone.run(() => observer.complete());\r\n        }));\r\n        gallery.init();\r\n\r\n        const modelRef: PhotoSwipeModelRef = {\r\n            close: () => gallery.close(),\r\n            listen: (eventName, callbackFn) => gallery.listen(eventName, (...args) => {\r\n                this.zone.run(() => callbackFn(...args));\r\n            }),\r\n            getCurrentIndex: () => gallery.getCurrentIndex()\r\n        };\r\n\r\n        observer.add(() => {\r\n            if (gallery) {\r\n                gallery.destroy();\r\n            }\r\n        });\r\n\r\n        this.zone.run(() => observer.next(modelRef));\r\n    }\r\n\r\n    private loadLibrary(): Promise<void> {\r\n        return this.resources.loadLibrary('photoSwipe');\r\n    }\r\n\r\n    private init(): void {\r\n        this.initialized = true;\r\n\r\n        const div = document.createElement('div');\r\n\r\n        div.innerHTML = template;\r\n\r\n        this.element = div.firstElementChild as HTMLDivElement;\r\n\r\n        document.body.appendChild(this.element);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone"
                    },
                    {
                        "name": "resources",
                        "type": "ResourcesService"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resources",
                        "type": "ResourcesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsEffects",
            "id": "injectable-ProductsEffects-dcbb63ae315a3f0655ec1605653acb9f",
            "file": "src/app/products/store/effects/products.effects.ts",
            "properties": [
                {
                    "name": "CreateNewProduct$",
                    "defaultValue": "this.CreateNewProductActions$.pipe(\n      ofType(CREATE_NEW_PRODUCT),\n      switchMap((productDetails: any) => this.productService.create(productDetails.payload).pipe(\n        map( (res: any) => new CreateNewProductSuccess(res) ),\n        catchError(err => of(new EffectError()))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "DeleteProduct",
                    "defaultValue": "this.DeleteProductAction$.pipe(\n      ofType(REMOVE_ITEM_FROM_PRODUCT_LIST),\n      switchMap((removeProduct: any) => this.productService.removeItemFromProductList(removeProduct.payload).pipe(\n        map( (res: any) => new GetProducts() ),\n        catchError(err => of(new EffectError({error_message:'remove_product_error'})))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "GetProductDetail$",
                    "defaultValue": "this.getDetailsActions$.pipe(\n      ofType(GET_PRODUCT_DETAILS),\n      // .map((data: any) => new GetProductDetailsSuccess(data.payload));\n      switchMap((action: GetProductDetails) => this.productService.getProductDetails(action.payload).pipe(\n        map((data: ProductDetails) => new GetProductDetailsSuccess(data)),\n        catchError(err => of(new EffectError()))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "Products$",
                    "defaultValue": "this.actions$.pipe(\n      ofType(GET_PRODUCTS),\n      switchMap(() => this.productService.getAllProducts().pipe(\n        map((data: any) => new GetProductsSuccess( data )),\n        catchError(err => of(new EffectError()))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "UploadProductImage$",
                    "defaultValue": "this.UploadProductImageActions$.pipe(\n      ofType(UPLOAD_PRODUCT_IMAGE),\n      switchMap((imageDetails: any) => this.productService.uploadProductImage(imageDetails.payload).pipe(\n        map( (res: any) => new uploadImageSuccess(res) ),\n        catchError(err => of(new EffectError(err)))\n      ))\n    )",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "<ol>\n<li>inside &#39;map((data)&#39; no need of an additional &#39;dispatch&#39; it dispatches action GetProductsSuccess</li>\n</ol>\n",
            "sourceCode": "import {switchMap,  map, catchError } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Store, Action } from '@ngrx/store';\nimport { of ,  Observable } from 'rxjs';\n\nimport {\n  GET_PRODUCTS, GET_PRODUCT_DETAILS, CREATE_NEW_PRODUCT, REMOVE_ITEM_FROM_PRODUCT_LIST, UPLOAD_PRODUCT_IMAGE,\n  GetProductDetails, GetProductsSuccess, GetProductDetailsSuccess, CreateNewProductSuccess,\n  EffectError, GetProducts, uploadImageSuccess\n} from '../actions/products.actions';\nimport { ProductDetails, RemoveItemId } from '../models/products.model';\n\nimport { AppStates } from '../../../app.states';\nimport {ProductsService} from '../../../core/services/products.service';\n\n/**\n * 1.  inside 'map((data)' no need of an additional 'dispatch' it dispatches action GetProductsSuccess\n */\n\n@Injectable()\nexport class ProductsEffects {\n  constructor(private actions$: Actions,\n              private getDetailsActions$: Actions,\n              private productService: ProductsService,\n              private CreateNewProductActions$: Actions,\n              private UploadProductImageActions$: Actions,\n              private DeleteProductAction$: Actions,\n              private store: Store<AppStates>){}\n\n  @Effect() Products$: any = this.actions$.pipe(\n      ofType(GET_PRODUCTS),\n      switchMap(() => this.productService.getAllProducts().pipe(\n        map((data: any) => new GetProductsSuccess( data )),\n        catchError(err => of(new EffectError()))\n      ))\n    );\n\n  @Effect() GetProductDetail$: any = this.getDetailsActions$.pipe(\n      ofType(GET_PRODUCT_DETAILS),\n      // .map((data: any) => new GetProductDetailsSuccess(data.payload));\n      switchMap((action: GetProductDetails) => this.productService.getProductDetails(action.payload).pipe(\n        map((data: ProductDetails) => new GetProductDetailsSuccess(data)),\n        catchError(err => of(new EffectError()))\n      ))\n    );\n\n  @Effect() CreateNewProduct$: any = this.CreateNewProductActions$.pipe(\n      ofType(CREATE_NEW_PRODUCT),\n      switchMap((productDetails: any) => this.productService.create(productDetails.payload).pipe(\n        map( (res: any) => new CreateNewProductSuccess(res) ),\n        catchError(err => of(new EffectError()))\n      ))\n    );\n\n  @Effect() UploadProductImage$: any = this.UploadProductImageActions$.pipe(\n      ofType(UPLOAD_PRODUCT_IMAGE),\n      switchMap((imageDetails: any) => this.productService.uploadProductImage(imageDetails.payload).pipe(\n        map( (res: any) => new uploadImageSuccess(res) ),\n        catchError(err => of(new EffectError(err)))\n      ))\n    );\n\n  @Effect() DeleteProduct: any = this.DeleteProductAction$.pipe(\n      ofType(REMOVE_ITEM_FROM_PRODUCT_LIST),\n      switchMap((removeProduct: any) => this.productService.removeItemFromProductList(removeProduct.payload).pipe(\n        map( (res: any) => new GetProducts() ),\n        catchError(err => of(new EffectError({error_message:'remove_product_error'})))\n      ))\n    );\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "getDetailsActions$",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "CreateNewProductActions$",
                        "type": "Actions"
                    },
                    {
                        "name": "UploadProductImageActions$",
                        "type": "Actions"
                    },
                    {
                        "name": "DeleteProductAction$",
                        "type": "Actions"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "getDetailsActions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "CreateNewProductActions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "UploadProductImageActions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "DeleteProductAction$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-28623ab778076085ac0157c7420f16eb",
            "file": "src/app/core/services/products.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getProductDetails",
                    "args": [
                        {
                            "name": "path",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "description": "<ul>\n<li>use if you need to make a call to get data for product details **</li>\n</ul>\n",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemFromProductList",
                    "args": [
                        {
                            "name": "removeItemId",
                            "type": "RemoveItemId",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "removeItemId",
                            "type": "RemoveItemId",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadProductImage",
                    "args": [
                        {
                            "name": "imageDetails",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "imageDetails",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { SessionService } from './session.service';\nimport { environment } from '../../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport {RemoveItemId} from '../../products/store/models/products.model';\n\n@Injectable()\nexport class ProductsService {\n\n  constructor(private http: HttpClient,\n              private sessionService: SessionService) { }\n\n  getAllProducts(): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.get(\n        environment.REST_API + '/rest/api/product/all', options\n      ).pipe(\n        map((res: any) => res.products)\n      );\n    }\n  }\n\n  /*** use if you need to make a call to get data for product details ***/\n  getProductDetails(path: any) {\n    const token = this.sessionService.getTokenFromStorage();\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n      return this.http.get(\n        environment.REST_API + `/rest/api/product/slug/${path.slug}`, options\n      ).pipe(\n        map((res: any) => res)\n      )\n    }\n\n  }\n\n  create(data?: any): Observable<any> {\n    const token = this.sessionService.getTokenFromStorage();\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n\n      return this.http.post(\n        environment.REST_API + '/rest/api/product/add', data, options\n      ).pipe(\n        map((res: any) => res)\n      );\n    }\n  }\n\n  uploadProductImage(imageDetails: {file: File, productId: number}): Observable<any> {\n\n    const token = this.sessionService.getTokenFromStorage();\n    const uploadImage = new FormData();\n\n    uploadImage.append('uploads[]', imageDetails['file'], imageDetails['file']['name']);\n\n    if (token) {\n      const headers = new HttpHeaders({\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n\n      return this.http.post(\n        environment.REST_API + `/rest/api/image/add/${imageDetails.productId}`, uploadImage, options\n      ).pipe(\n        map((res: any) => res)\n      );\n    }\n  }\n\n  removeItemFromProductList( removeItemId ?: RemoveItemId ): Observable<any> {\n\n    const token = this.sessionService.getTokenFromStorage();\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      });\n      const options = {\n        headers: headers\n      };\n\n      return this.http.delete(\n        // TODO: temp placed wromg, please use second URL:\n        `${environment.REST_API}/api/product/delete/${removeItemId.id}`, options\n      ).pipe(\n        map((res: any) => res)\n      );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuickviewService",
            "id": "injectable-QuickviewService-66537d342308e51052b2cf04d913f6bb",
            "file": "src/app/shared/services/quickview.service.ts",
            "properties": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "show$",
                    "defaultValue": "this.showSubject$.pipe(takeUntil(this.destroy$))",
                    "type": "Observable<Product>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showSubject$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<Product>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Product } from '../interfaces/product';\r\nimport { Observable, Subject, timer } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class QuickviewService implements OnDestroy {\r\n    private destroy$: Subject<void> = new Subject();\r\n    private showSubject$: Subject<Product> = new Subject();\r\n\r\n    show$: Observable<Product> = this.showSubject$.pipe(takeUntil(this.destroy$));\r\n\r\n    constructor() { }\r\n\r\n    show(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.showSubject$.next(product);\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "ResourcesService",
            "id": "injectable-ResourcesService-eb2d023a730f59436d83e59128160264",
            "file": "src/app/shared/services/resources.service.ts",
            "properties": [
                {
                    "name": "libraries",
                    "defaultValue": "{\r\n        photoSwipe: ResourcesService.parallel(\r\n            this.styleTask('assets/vendor/photoswipe/photoswipe.css'),\r\n            this.styleTask('assets/vendor/photoswipe/default-skin/default-skin.css'),\r\n            this.scriptTask('assets/vendor/photoswipe/photoswipe.min.js'),\r\n            this.scriptTask('assets/vendor/photoswipe/photoswipe-ui-default.min.js')\r\n        )\r\n    }",
                    "type": "LibrariesDef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "loadLibrary",
                    "args": [
                        {
                            "name": "library",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "library",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScript",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadStyle",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parallel",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "Task[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Task",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "Task[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scriptTask",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Task",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "series",
                    "args": [
                        {
                            "name": "tasks",
                            "type": "Task[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Task",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "tasks",
                            "type": "Task[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "styleTask",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Task",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\ntype Task = () => Promise<void>;\r\n\r\ninterface LibrariesDef {\r\n    [name: string]: Task;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ResourcesService {\r\n    private loaded: { [url: string]: Promise<void>; } = {};\r\n\r\n    private libraries: LibrariesDef = {\r\n        photoSwipe: ResourcesService.parallel(\r\n            this.styleTask('assets/vendor/photoswipe/photoswipe.css'),\r\n            this.styleTask('assets/vendor/photoswipe/default-skin/default-skin.css'),\r\n            this.scriptTask('assets/vendor/photoswipe/photoswipe.min.js'),\r\n            this.scriptTask('assets/vendor/photoswipe/photoswipe-ui-default.min.js')\r\n        )\r\n    };\r\n\r\n    static series(...tasks: Task[]): Task {\r\n        if (!tasks.length) {\r\n            return () => Promise.resolve();\r\n        }\r\n\r\n        return () => tasks.shift()().then(ResourcesService.series(...tasks));\r\n    }\r\n\r\n    static parallel(...tasks: Task[]): Task {\r\n        if (!tasks.length) {\r\n            return () => Promise.resolve();\r\n        }\r\n\r\n        return () => Promise.all(tasks.map(task => task())).then(() => {});\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    loadScript(url: string): Promise<void> {\r\n        return this.scriptTask(url)();\r\n    }\r\n\r\n    loadStyle(url: string): Promise<void> {\r\n        return this.styleTask(url)();\r\n    }\r\n\r\n    loadLibrary(library: string): Promise<void> {\r\n        return this.libraries[library]();\r\n    }\r\n\r\n    private scriptTask(url: string): Task {\r\n        return () => {\r\n            if (!this.loaded.hasOwnProperty(url)) {\r\n                this.loaded[url] = new Promise<void>((resolve, reject) => {\r\n                    const script = document.createElement('script');\r\n\r\n                    script.onload = () => resolve();\r\n                    script.onerror = () => reject(new Error('Loading error: ' + url));\r\n                    script.src = url;\r\n\r\n                    document.head.appendChild(script);\r\n                });\r\n            }\r\n\r\n            return this.loaded[url];\r\n        };\r\n    }\r\n\r\n    private styleTask(url: string): Task {\r\n        return () => {\r\n            if (!this.loaded.hasOwnProperty(url)) {\r\n                this.loaded[url] = new Promise<void>((resolve, reject) => {\r\n                    const link = document.createElement('link');\r\n\r\n                    link.onload = () => resolve();\r\n                    link.onerror = () => reject(new Error('Loading error: ' + url));\r\n                    link.type = 'text/css';\r\n                    link.rel = 'stylesheet';\r\n                    link.href = url;\r\n\r\n                    document.head.appendChild(link);\r\n                });\r\n            }\r\n\r\n            return this.loaded[url];\r\n        };\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 38
            },
            "type": "injectable"
        },
        {
            "name": "RootService",
            "id": "injectable-RootService-449972e71197b10182294944ae0f7762",
            "file": "src/app/shared/services/root.service.ts",
            "properties": [
                {
                    "name": "path",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "post",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "product",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | string",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "url",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RootService {\r\n    path = '';\r\n\r\n    constructor() { }\r\n\r\n    product(id: number): any[] | string {\r\n        return `${this.path}/shop/product/${id}`;\r\n    }\r\n\r\n    post(): string {\r\n        return `${this.path}/blog/post-classic`;\r\n    }\r\n\r\n    url(url: string): string {\r\n        return this.path + url;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-a2ddcdd27df3b30544f377f78365ceeb",
            "file": "src/app/core/services/session.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteSession",
                    "args": [
                        {
                            "name": "sessionObjectName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionObjectName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderNumberFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getPlacedOrderNumberFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getSession",
                    "args": [
                        {
                            "name": "sessionObjectName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionObjectName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTokenFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getUserContent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "getUserIdFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getUserNameFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setPlacedOrderNumberInStorage",
                    "args": [
                        {
                            "name": "placedOrderNumber",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "placedOrderNumber",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "sessionObjectName",
                            "type": "string"
                        },
                        {
                            "name": "sessionObjectKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionObjectName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sessionObjectKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserContent",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeOrderNumberInStorage",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeTokenInSession",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class SessionService {\n  constructor() {}\n\n  static getSession(sessionObjectName: string) {\n    return window.sessionStorage.getItem(sessionObjectName);\n  }\n  static setSession(sessionObjectName: string, sessionObjectKey: string): void {\n    window.sessionStorage.setItem(sessionObjectName, sessionObjectKey);\n  }\n  static deleteSession(sessionObjectName: string): void {\n    window.sessionStorage.removeItem(sessionObjectName);\n  }\n\n  public logout(): any {\n    SessionService.deleteSession('token');\n    SessionService.deleteSession('userId');\n    SessionService.deleteSession('orderId');\n    SessionService.deleteSession('orderNumber');\n    SessionService.deleteSession('userName');\n    SessionService.deleteSession('userContent');\n  }\n\n  public storeTokenInSession(data: any): void {\n    SessionService.setSession('token', data.token);\n    SessionService.setSession('userId', data.id);\n    SessionService.setSession('userName', data.userName );\n  }\n\n  public setUserContent(data: any): void {\n    SessionService.setSession('userContent', data);\n  }\n\n  public getUserContent(): any {\n    return SessionService.getSession('userContent');\n  }\n\n  public storeOrderNumberInStorage(data: any): void {\n    SessionService.setSession('orderNumber', data.orderNumber);\n    SessionService.setSession('orderId', data.id);\n  }\n\n  public getOrderNumberFromStorage(): any {\n    return SessionService.getSession('orderNumber');\n  }\n\n  public setPlacedOrderNumberInStorage(placedOrderNumber: any): void {\n    SessionService.setSession('placedOrderId', placedOrderNumber);\n  }\n\n  public getPlacedOrderNumberFromStorage(): any {\n    return SessionService.getSession('placedOrderId');\n  }\n\n  public getTokenFromStorage(): any {\n    return SessionService.getSession('token');\n  }\n  public getUserNameFromStorage(): any {\n    return SessionService.getSession('userName');\n  }\n  public getUserIdFromStorage(): any {\n    return SessionService.getSession('userId');\n  }\n\n  getUserDetails() {\n    const token = this.getTokenFromStorage();\n    const userName = this.getUserNameFromStorage();\n    const userId = this.getUserIdFromStorage();\n    const orderNumber = this.getOrderNumberFromStorage();\n    let userDetails: any;\n\n    if (token && userName && userId && orderNumber) {\n      userDetails = {\n        token : token,\n        userName : userName,\n        id : userId,\n        orderNumber : orderNumber\n      };\n    } else {\n      userDetails = {};\n    }\n    return userDetails;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "ShopSidebarService",
            "id": "injectable-ShopSidebarService-dfb33f0cccdc7022dcadc81638ee8bff",
            "file": "src/app/products/services/shop-sidebar.service.ts",
            "properties": [
                {
                    "name": "isOpen$",
                    "defaultValue": "this.isOpenSubject$.asObservable()",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isOpenSubject$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable()\nexport class ShopSidebarService {\n    private isOpenSubject$: Subject<boolean> = new Subject();\n\n    isOpen$: Observable<boolean> = this.isOpenSubject$.asObservable();\n\n    constructor() { }\n\n    open(): void {\n        this.isOpenSubject$.next(true);\n    }\n\n    close(): void {\n        this.isOpenSubject$.next(false);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "StoreService",
            "id": "injectable-StoreService-727aae5518580124d2c4a5fafed40951",
            "file": "src/app/shared/services/store.service.ts",
            "properties": [
                {
                    "name": "address",
                    "defaultValue": "'715 Fake Street, New York 10021 USA'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "defaultValue": "'stroyka@example.com'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hours",
                    "defaultValue": "'Mon-Sat 10:00pm - 7:00pm'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "phone",
                    "defaultValue": "['(800) 060-0730', '(800) 060-0730']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class StoreService {\r\n    address = '715 Fake Street, New York 10021 USA';\r\n    email = 'stroyka@example.com';\r\n    phone = ['(800) 060-0730', '(800) 060-0730'];\r\n    hours = 'Mon-Sat 10:00pm - 7:00pm';\r\n\r\n    get primaryPhone(): string|null {\r\n        return this.phone.length > 0 ? this.phone[0] : null;\r\n    }\r\n\r\n    constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "accessors": {
                "primaryPhone": {
                    "name": "primaryPhone",
                    "getSignature": {
                        "name": "primaryPhone",
                        "type": "",
                        "returnType": "string | null",
                        "line": 12
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "WishlistService",
            "id": "injectable-WishlistService-42795ad7b70a13cdfb06ca687d47097e",
            "file": "src/app/shared/services/wishlist.service.ts",
            "properties": [
                {
                    "name": "count$",
                    "defaultValue": "this.itemsSubject$.pipe(map(items => items.length))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "{\r\n        items: []\r\n    }",
                    "type": "WishlistData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "this.itemsSubject$.pipe(takeUntil(this.destroy$))",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "itemsSubject$",
                    "defaultValue": "new BehaviorSubject([])",
                    "type": "BehaviorSubject<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onAdding$",
                    "defaultValue": "this.onAddingSubject$.asObservable()",
                    "type": "Observable<Product>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "onAddingSubject$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<Product>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, OnDestroy, PLATFORM_ID } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject, timer } from 'rxjs';\r\nimport { Product } from '../interfaces/product';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\ninterface WishlistData {\r\n    items: Product[];\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WishlistService implements OnDestroy {\r\n    private data: WishlistData = {\r\n        items: []\r\n    };\r\n\r\n    private destroy$: Subject<void> = new Subject();\r\n    private itemsSubject$: BehaviorSubject<Product[]> = new BehaviorSubject([]);\r\n    private onAddingSubject$: Subject<Product> = new Subject();\r\n\r\n    readonly items$: Observable<Product[]> = this.itemsSubject$.pipe(takeUntil(this.destroy$));\r\n    readonly count$: Observable<number> = this.itemsSubject$.pipe(map(items => items.length));\r\n    readonly onAdding$: Observable<Product> = this.onAddingSubject$.asObservable();\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID)\r\n        private platformId: any\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.load();\r\n        }\r\n    }\r\n\r\n    add(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            this.onAddingSubject$.next(product);\r\n\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index === -1) {\r\n                this.data.items.push(product);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    remove(product: Product): Observable<void> {\r\n        // timer only for demo\r\n        return timer(1000).pipe(map(() => {\r\n            const index = this.data.items.findIndex(item => item.id === product.id);\r\n\r\n            if (index !== -1) {\r\n                this.data.items.splice(index, 1);\r\n                this.save();\r\n            }\r\n        }));\r\n    }\r\n\r\n    private save(): void {\r\n        localStorage.setItem('wishlistItems', JSON.stringify(this.data.items));\r\n\r\n        this.itemsSubject$.next(this.data.items);\r\n    }\r\n\r\n    private load(): void {\r\n        const items = localStorage.getItem('wishlistItems');\r\n\r\n        if (items) {\r\n            this.data.items = JSON.parse(items);\r\n            this.itemsSubject$.next(this.data.items);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddToCart",
            "id": "class-AddToCart-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_TO_CART",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddToCartSuccess",
            "id": "class-AddToCartSuccess-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_TO_CART_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-dcb32ef2c05e7b804ba490103360d420",
            "file": "e2e/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getParagraphText() {\n    return element(by.css('app-root h1')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CheckOut",
            "id": "class-CheckOut-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "CHECK_OUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CheckOutSuccess",
            "id": "class-CheckOutSuccess-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "CHECK_OUT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateNewProduct",
            "id": "class-CreateNewProduct-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "CREATE_NEW_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateNewProductSuccess",
            "id": "class-CreateNewProductSuccess-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "CREATE_NEW_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateOrderNumber",
            "id": "class-CreateOrderNumber-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "CREATE_ORDER_NUMBER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteOrderFromHistoryApi",
            "id": "class-DeleteOrderFromHistoryApi-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_ORDER_FROM_HISTORY_API",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EffectError",
            "id": "class-EffectError-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ERROR_LOADING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EffectError",
            "id": "class-EffectError-48ae4262b78dc097b91cfd7a3ab03231-1",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "error_message",
                        "optional": true
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "error_message",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "error_message",
                    "optional": true,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ERROR_LOADING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "EffectError-1"
        },
        {
            "name": "FetchOrderHistory",
            "id": "class-FetchOrderHistory-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "FETCH_ORDERS_HISTORY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FinishStorageClearence",
            "id": "class-FinishStorageClearence-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "FINISH_STORAGE_CLEARENCE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetCurrentOrderFromStore",
            "id": "class-GetCurrentOrderFromStore-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GET_CURRENT_ORDER_FROM_STORE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetCurrentOrderFromStoreSuccess",
            "id": "class-GetCurrentOrderFromStoreSuccess-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GET_CURRENT_ORDER_FROM_STORE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetOrderNumber",
            "id": "class-GetOrderNumber-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "UserDetails"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "UserDetails",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "UserDetails",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GET_ORDER_NUMBER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetProductDetails",
            "id": "class-GetProductDetails-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ProductSlug"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ProductSlug",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "ProductSlug",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GET_PRODUCT_DETAILS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetProductDetailsSuccess",
            "id": "class-GetProductDetailsSuccess-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ProductDetails"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ProductDetails",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "ProductDetails",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GET_PRODUCT_DETAILS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetProducts",
            "id": "class-GetProducts-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "GET_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetProductsSuccess",
            "id": "class-GetProductsSuccess-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "GET_PRODUCTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoginAction",
            "id": "class-LoginAction-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "UserCredentials"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "UserCredentials",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "UserCredentials",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LOGIN_USER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LOG_OUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Message",
            "id": "class-Message-f34df0b5723f328b373c26b60513c277",
            "file": "src/app/auth/components/login/login.component.ts",
            "type": "class",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport {Component, Inject, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { getAuthSelector, loginUserDetailsMapper, loginErrorMapper } from '../../store/select/auth.selectors';\nimport { UserCredentials } from '../../store/models/login.model';\nimport { SessionService } from '../../../core/services/session.service';\nimport { LoginAction } from '../../store/actions/login.actions';\n\nexport interface ErrorMessage {\n  message: any;\n  status: string;\n}\n\nexport class Message {\n  constructor(\n    public sender: string,\n    public content: string,\n    public isBroadcast = false,\n  ) { }\n}\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public ws_message: string;\n  loginForm: FormGroup;\n  errorMessage: ErrorMessage;\n  userName$;\n  loading = false;\n  user: string;\n  constructor(private sessionService: SessionService,\n              private router: Router,\n              private store: Store<UserCredentials>,\n              @Inject(FormBuilder) fb: FormBuilder) {\n\n\n    this.loginForm = fb.group({\n      userName: [null, Validators.minLength(3)],\n      password: [null, Validators.minLength(3)]\n    });\n  }\n  login() {\n    this.store.dispatch(new LoginAction(this.loginForm.value));\n    this.loading = true;\n  }\n\n  submitWsMessage() {\n    const submitMessage = new Message('client1', this.ws_message, false);\n  }\n\n  ngOnInit() {\n    // Login\n    this.store.select(getAuthSelector).pipe(\n      map(loginUserDetailsMapper))\n      .subscribe(res => {\n        if (res && res.token) {\n          this.loading = false;\n          this.router.navigate(['/products']);\n        }\n      });\n    // Error handing\n    this.store.select(getAuthSelector).pipe(\n      map(loginErrorMapper)\n    )\n    .subscribe((error: ErrorMessage) => {\n      if ( error && error.message ) {\n        this.errorMessage = error;\n        this.loading = false;\n      }\n    });\n\n    if (this.sessionService.getTokenFromStorage() != null) {\n      // this.router.navigate(['/products']);\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sender",
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "type": "string"
                    },
                    {
                        "name": "isBroadcast",
                        "type": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "sender",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "content",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isBroadcast",
                        "type": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isBroadcast",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sender",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ReducerClass",
            "id": "class-ReducerClass-21abc59c9c1b1520fef2fb91eb217b5f",
            "file": "src/app/auth/store/reducers/login.reducers.ts",
            "type": "class",
            "sourceCode": "import { Action, ActionReducer } from '@ngrx/store';\nimport { AppStates } from '../../../app.states';\nimport {\n  LOGIN_USER, GET_ORDER_NUMBER, LOG_OUT, FINISH_STORAGE_CLEARENCE,\n  REGISTER_USER, REGISTER_USER_SUCCESS, ERROR_LOADING, SELECT_LANGUAGE,\n  RE_LOGIN_ON_REFRESH\n} from '../actions/login.actions';\nimport {CREATE_ORDER_NUMBER} from '../actions/login.actions';\nimport {INITIAL_USER_DATA} from '../states/auth.states';\n\nexport class ReducerClass implements Action {\n  type: string;\n  payload?: any;\n}\n\nconst loadUserCredentials = ( state: AppStates = INITIAL_USER_DATA, action: ReducerClass ): AppStates => {\n  const newUserDetailsState = { ...state.userDetails,  ...action.payload};\n  const newSate: AppStates = { ...state, ...{ userDetails: newUserDetailsState} };\n  return newSate;\n};\n\nconst logOutUser = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, {'userDetails' : INITIAL_USER_DATA} );\n  return newData;\n};\n\nconst registerUserSuccess = ( state , action): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { registerUserState: action.payload });\n  return newData;\n}\n\nconst indicateErrorOnLoading = ( state , action): AppStates => {\n const newData: AppStates = Object.assign({}, state, { errorLoading: action.payload });\n return newData;\n};\n\nconst storeOrderNumber = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const newUserDetails = {...state.userDetails, orderNumber: action.payload.orderNumber};\n  return {...state, ...{userDetails: newUserDetails}};\n};\n\nconst selectLanguage = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const newUserDetails = {...state.userDetails, language: action.payload};\n  return {...state, ...{userDetails: newUserDetails}};\n};\n\nexport function userLoginReducer (state: AppStates, action: ReducerClass) {\n  switch (action.type) {\n    case GET_ORDER_NUMBER:\n      return loadUserCredentials(state, action);\n    case REGISTER_USER:\n      return state;\n    case REGISTER_USER_SUCCESS:\n      return registerUserSuccess(state, action);\n    case LOG_OUT:\n      return logOutUser(state, action);\n    case FINISH_STORAGE_CLEARENCE:\n      return state;\n    case ERROR_LOADING:\n      return indicateErrorOnLoading(state, action);\n    case CREATE_ORDER_NUMBER:\n      return storeOrderNumber(state, action);\n    case SELECT_LANGUAGE:\n      return selectLanguage(state, action);\n    case RE_LOGIN_ON_REFRESH:\n      return loadUserCredentials(state, action);\n    default:\n      return state;\n  }\n}\n",
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ReducerClass",
            "id": "class-ReducerClass-1729ee3d5b2a61e415730e1ee1f84275-1",
            "file": "src/app/cart/store/reducers/cart.reducers.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { CartState } from '../states/cart.states';\nimport {\n  ADD_TO_CART, ADD_TO_CART_SUCCESS,\n  SAVE_CURRENT_ORDER_IN_STORE, GET_CURRENT_ORDER_FROM_STORE, SAVE_PLACED_ORDER,\n  GET_CURRENT_ORDER_FROM_STORE_SUCCESS, CHECK_OUT, CHECK_OUT_SUCCESS, REMOVE_FROM_CART,\n  STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS\n} from '../actions/cart.actions';\n\nexport class ReducerClass implements Action {\n  type: string;\n  payload?: any;\n}\n\nconst addProductToCart = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { productsInCart: action.payload} );\n  return newData;\n}\nconst addProductToCartSuccess = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { productToCartSuccess: action.payload} );\n  return newData;\n}\nconst removeProductFromCart = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { removeProductFromCart: action.payload} );\n  return newData;\n};\nconst storeCurrentOrderInCart = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { currentOrderInCart: action.payload} );\n  return newData;\n};\n//TODO: finilize readCurrentOrderFromStore & readCurrentOrderFromStoreSuccess:\nconst readCurrentOrderFromStore =  (state: CartState, action: ReducerClass): CartState => {\n  return state;\n};\nconst readCurrentOrderFromStoreSuccess = (state: CartState, action: ReducerClass): CartState => {\n  return state;\n};\n// make payment\nconst checkOut = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { checkOutDetails: action.payload} );\n  return newData;\n};\nconst savePlacedOrder = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { processedOrders: action.payload} );\n  return newData;\n};\nconst savePlacedOrderDetails = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { processedOrdersDetails: action.payload} );\n  return newData;\n};\n// There is no actual use of the (same) order details processed also saved in history lambda API\nconst storeProcessedOrderInHistoryApi = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { orderStoredInHistoryApi: action.payload} );\n  return newData;\n};\nconst checkOutSuccess = (state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, {\n    checkOutConfirmationStatus: false,\n    shoppingOrderNumber: undefined,\n    productsInCart: undefined,\n    productToCartSuccess: undefined,\n    currentOrderInCart: undefined,\n    checkOutDetails: undefined\n  } );\n  return newData;\n};\n\n\nexport function cartReducer (state: CartState, action: ReducerClass) {\n  switch (action.type) {\n    case ADD_TO_CART:\n      return addProductToCart(state, action);\n    case REMOVE_FROM_CART:\n      return removeProductFromCart(state, action);\n    case ADD_TO_CART_SUCCESS:\n      return addProductToCartSuccess(state, action);\n    case SAVE_CURRENT_ORDER_IN_STORE:\n      return storeCurrentOrderInCart(state, action);\n    case GET_CURRENT_ORDER_FROM_STORE:\n      return readCurrentOrderFromStore(state, action);\n    case GET_CURRENT_ORDER_FROM_STORE_SUCCESS:\n      return readCurrentOrderFromStoreSuccess(state, action);\n    case SAVE_PLACED_ORDER:\n      return savePlacedOrder(state, action);\n    case CHECK_OUT:\n      return checkOut(state, action);\n    case CHECK_OUT_SUCCESS:\n      return checkOutSuccess(state, action);\n    case STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS:\n      return storeProcessedOrderInHistoryApi(state, action);\n    default:\n      return state;\n  }\n}\n",
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ReducerClass-1"
        },
        {
            "name": "ReducerClass",
            "id": "class-ReducerClass-bb1cc927959a205373da5858027b43c3-2",
            "file": "src/app/products/store/reducers/reducers.ts",
            "type": "class",
            "sourceCode": "import { Action, ActionReducer } from '@ngrx/store';\nimport { AppStates } from '../../../app.states';\nimport { initStateOfProductDetails } from '../models/products.model';\nimport {\n  GET_PRODUCT_DETAILS, GET_PRODUCTS, GET_PRODUCT_DETAILS_SUCCESS,\n  CREATE_NEW_PRODUCT, CREATE_NEW_PRODUCT_SUCCESS, GET_PRODUCTS_SUCCESS,\n  ERROR_LOADING, UPLOAD_PRODUCT_IMAGE_SUCCESS, RESET_PRODUCT_DETAILS\n} from '../actions/products.actions';\n\nexport class ReducerClass implements Action {\n  type: string;\n  payload?: any;\n}\n\nconst loadProductSlug = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { uiProductDetailsSlug: action.payload} );\n  return newData;\n};\n\nconst loadProductDetails = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { uiStateProductDetails: action.payload} );\n  return newData;\n};\n\nconst resetProductDetails = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const  newData: AppStates = Object.assign({}, state, { uiStateProductDetails: initStateOfProductDetails} );\n  return newData;\n};\n\nconst appendError = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const stateWithError: AppStates = Object.assign({}, state,\n      {\n        errorState: {\n          message: 'Server connection error. Probably you need to login.',\n          status: 'error',\n          error_code: 'remove_product_error'\n        }\n      }\n    );\n  return stateWithError;\n}\n\nconst loadProducts = ( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { storeData: action.payload} );\n  return newData;\n};\n\nconst createNewProduct = ( state: AppStates, action: ReducerClass ): AppStates => {\n  return state;\n};\n\nconst uploadProductImageSuccess = ( state: AppStates, action: ReducerClass ): AppStates => {\n  return Object.assign({}, state, { imageUploaded: action.payload} );\n};\n\nconst createNewProductSuccess = ( state: AppStates, action: ReducerClass ): AppStates => {\n  return Object.assign({}, state, { productCreated: action.payload} );\n};\n\nexport function productsReducer (state: AppStates, action: ReducerClass) {\n  switch (action.type) {\n    case GET_PRODUCT_DETAILS:\n      return loadProductSlug(state, action);\n    case GET_PRODUCT_DETAILS_SUCCESS:\n      return loadProductDetails(state, action);\n    case GET_PRODUCTS:\n      return state;\n    case RESET_PRODUCT_DETAILS:\n      return resetProductDetails(state, action);\n    case GET_PRODUCTS_SUCCESS:\n      return loadProducts(state, action);\n    case CREATE_NEW_PRODUCT:\n      return createNewProduct(state, action);\n    case UPLOAD_PRODUCT_IMAGE_SUCCESS:\n      return uploadProductImageSuccess(state, action);\n    case CREATE_NEW_PRODUCT_SUCCESS:\n      return createNewProductSuccess(state, action);\n    case ERROR_LOADING:\n      return appendError(state, action);\n    default:\n      return state;\n  }\n};\n",
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "ReducerClass-2"
        },
        {
            "name": "RegisterUserAction",
            "id": "class-RegisterUserAction-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "REGISTER_USER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "RegisterUserSuccess",
            "id": "class-RegisterUserSuccess-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "REGISTER_USER_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ReloginOnRefresh",
            "id": "class-ReloginOnRefresh-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "UserCredentials"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "UserCredentials",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "UserCredentials",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "RE_LOGIN_ON_REFRESH",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "RemoveFromCart",
            "id": "class-RemoveFromCart-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "REMOVE_FROM_CART",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "RemoveItemFromProductList",
            "id": "class-RemoveItemFromProductList-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "RemoveItemId"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "RemoveItemId",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "RemoveItemId",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "REMOVE_ITEM_FROM_PRODUCT_LIST",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ResetProductDetails",
            "id": "class-ResetProductDetails-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "RESET_PRODUCT_DETAILS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveOrderInHistoryApi",
            "id": "class-SaveOrderInHistoryApi-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "SAVE_ORDER_IN_HISTORY_API",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SavePlacedOrder",
            "id": "class-SavePlacedOrder-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "UserDetails"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "UserDetails",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "UserDetails",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SAVE_PLACED_ORDER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SelectLanguageAction",
            "id": "class-SelectLanguageAction-196271b94148cb0829a85bd6927c6a54",
            "file": "src/app/auth/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\n\nimport { UserDetails, UserCredentials } from '../models/login.model';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const GET_ORDER_NUMBER = 'GET_ORDER_NUMBER';\nexport const LOG_OUT = 'LOG_OUT';\nexport const FINISH_STORAGE_CLEARENCE = 'FINISH_STORAGE_CLEARENCE';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_ORDER_NUMBER = 'CREATE_ORDER_NUMBER';\nexport const SELECT_LANGUAGE = 'SELECT_LANGUAGE';\nexport const RE_LOGIN_ON_REFRESH = 'RE_LOGIN_ON_REFRESH';\n\nexport class ReloginOnRefresh implements Action {\n  readonly type = RE_LOGIN_ON_REFRESH;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class LoginAction implements Action {\n  readonly type = LOGIN_USER;\n  constructor(public payload: UserCredentials ) {\n  }\n}\n\nexport class GetOrderNumber implements Action {\n  readonly type = GET_ORDER_NUMBER;\n  constructor(public payload: UserDetails ) {\n  }\n}\n\nexport class RegisterUserAction implements Action {\n  readonly type = REGISTER_USER;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterUserSuccess implements Action {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = LOG_OUT;\n}\n\nexport class FinishStorageClearence implements Action {\n  readonly type = FINISH_STORAGE_CLEARENCE;\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload: any ) {\n  }\n}\nexport class CreateOrderNumber implements Action {\n  readonly type = CREATE_ORDER_NUMBER;\n  constructor(public payload: any ) {\n  }\n}\nexport class SelectLanguageAction implements Action {\n  readonly type = SELECT_LANGUAGE;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SELECT_LANGUAGE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SessionServiceMock",
            "id": "class-SessionServiceMock-6d2b3f195aae6221e3580683bf90a608",
            "file": "src/test/mock.ts",
            "type": "class",
            "sourceCode": "import {empty, of, Observable} from 'rxjs';\nimport { TranslateLoader } from '@ngx-translate/core'\n// Translation\nconst enJson = require('../assets/i18n/en.json');\nconst frJson = require('../assets/i18n/fr.json');\nconst ruJson = require('../assets/i18n/ru.json');\n\nexport class TranslateLoaderMock implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    if (lang === 'ru') {\n      return of(ruJson);\n    } else if (lang === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\nexport class TranslateServiceMock {\n  language = 'en';\n  use(lang: string) {\n    this.language = lang;\n    return lang;\n  }\n  get() {\n    if (this.language === 'ru') {\n      return of(ruJson);\n    } else if (this.language === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\n// Store\nexport class StoreMock {\n  select(options) {\n    return empty();\n  }\n  dispatch(options) {\n  }\n}\n\n// Mocks of Store\nexport const initialAppState = {\n  userLoginReducer: {\n    userDetails: {\n      'userName': 'kuku@kuku.com',\n      'password': '',\n      'token': 'eyJhbGciOiJIUzI1NiJ9',\n      'mobile': 123456789,\n      'login': {\n        'roles': [\n          {\n            'roleName': 'buyer',\n            'description': null,\n            'id': 34\n          }\n        ],\n        'id': 33\n      },\n      'id': 35\n    }\n  }\n};\n\nexport const cartReducerStateMock = {\n  cart: {\n    currentOrderInCart: {\n      \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n      \"orderToken\": null,\n      \"userId\": 1211,\n      \"totalAmount\": 123.97,\n      \"totalQuantity\": 4,\n      \"paymentId\": null,\n      \"paymentPlaced\": null,\n      \"paymentPaid\": null,\n      \"itemList\": [\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2305\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 42,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"robot\",\n            \"description\": \"robot1\",\n            \"slug\": \"robot1\",\n            \"price\": 100,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100113/m6xqpddpalxl2zubmajx.png\",\n                  \"publicId\": \"m6xqpddpalxl2zubmajx\",\n                  \"description\": null,\n                  \"productInfoId\": 43,\n                  \"id\": 44\n                }\n              ],\n              \"id\": 43\n            },\n            \"id\": 42\n          },\n          \"id\": 2306\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 55,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"Plastic toy\",\n            \"description\": \"plastic toy\",\n            \"slug\": \"plastic-toy\",\n            \"price\": 3.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg\",\n                  \"publicId\": \"s4l1dp26u0cllhvmafm6\",\n                  \"description\": null,\n                  \"productInfoId\": 56,\n                  \"id\": 57\n                }\n              ],\n              \"id\": 56\n            },\n            \"id\": 55\n          },\n          \"id\": 2307\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2308\n        }\n      ],\n      \"payment\": null,\n      \"id\": 2304\n    },\n    orderStoredInHistoryApi: [\n      {\n        'checked': false,\n        'id': 'fdb32730-337c-11eb-961c-11163f8d90be',\n        'orderDetails': {\n          'totalAmount': 13.98,\n          'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n          'orderToken': null,\n          'totalQuantity': 2,\n          'paymentPlaced': null,\n          'paymentId': null,\n          'itemList': [\n            {\n              'itemId': null,\n              'product': {\n                'isRemoved': false,\n                'price': 3.99,\n                'defaultMaxQuantity': 10,\n                'name': 'Plastic toy',\n                'description': 'plastic toy',\n                'id': 55,\n                'slug': 'plastic-toy',\n                'productInfo': {\n                  'imageList': [\n                    {\n                      'description': null,\n                      'largeUrl': null,\n                      'id': 57,\n                      'publicId': 's4l1dp26u0cllhvmafm6',\n                      'productInfoId': 56,\n                      'imageUrl': 'https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg'\n                    }\n                  ],\n                  'id': 56\n                }\n              },\n              'quantity': 1,\n              'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n              'id': 2007,\n              'productId': 55\n            }\n          ],\n          'payment': null,\n          'id': 2006,\n          'userId': 35,\n          'paymentPaid': null\n        },\n        'userid': '35',\n        'updatedAt': 1606789749027\n      }\n    ]\n  }\n};\n\nexport class SessionServiceMock {\n  public logout(): any {}\n  public storeTokenInSession(data: any): void {}\n  public getTokenFromStorage(): any {}\n  public storeOrderNumberInStorage(data: any): void {}\n  public getOrderNumberFromStorage(): any {}\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getOrderNumberFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 258,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getTokenFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 256,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 254,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "storeOrderNumberInStorage",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeTokenInSession",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StoreCurrentOrder",
            "id": "class-StoreCurrentOrder-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SAVE_CURRENT_ORDER_IN_STORE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StoreMock",
            "id": "class-StoreMock-6d2b3f195aae6221e3580683bf90a608",
            "file": "src/test/mock.ts",
            "type": "class",
            "sourceCode": "import {empty, of, Observable} from 'rxjs';\nimport { TranslateLoader } from '@ngx-translate/core'\n// Translation\nconst enJson = require('../assets/i18n/en.json');\nconst frJson = require('../assets/i18n/fr.json');\nconst ruJson = require('../assets/i18n/ru.json');\n\nexport class TranslateLoaderMock implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    if (lang === 'ru') {\n      return of(ruJson);\n    } else if (lang === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\nexport class TranslateServiceMock {\n  language = 'en';\n  use(lang: string) {\n    this.language = lang;\n    return lang;\n  }\n  get() {\n    if (this.language === 'ru') {\n      return of(ruJson);\n    } else if (this.language === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\n// Store\nexport class StoreMock {\n  select(options) {\n    return empty();\n  }\n  dispatch(options) {\n  }\n}\n\n// Mocks of Store\nexport const initialAppState = {\n  userLoginReducer: {\n    userDetails: {\n      'userName': 'kuku@kuku.com',\n      'password': '',\n      'token': 'eyJhbGciOiJIUzI1NiJ9',\n      'mobile': 123456789,\n      'login': {\n        'roles': [\n          {\n            'roleName': 'buyer',\n            'description': null,\n            'id': 34\n          }\n        ],\n        'id': 33\n      },\n      'id': 35\n    }\n  }\n};\n\nexport const cartReducerStateMock = {\n  cart: {\n    currentOrderInCart: {\n      \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n      \"orderToken\": null,\n      \"userId\": 1211,\n      \"totalAmount\": 123.97,\n      \"totalQuantity\": 4,\n      \"paymentId\": null,\n      \"paymentPlaced\": null,\n      \"paymentPaid\": null,\n      \"itemList\": [\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2305\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 42,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"robot\",\n            \"description\": \"robot1\",\n            \"slug\": \"robot1\",\n            \"price\": 100,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100113/m6xqpddpalxl2zubmajx.png\",\n                  \"publicId\": \"m6xqpddpalxl2zubmajx\",\n                  \"description\": null,\n                  \"productInfoId\": 43,\n                  \"id\": 44\n                }\n              ],\n              \"id\": 43\n            },\n            \"id\": 42\n          },\n          \"id\": 2306\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 55,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"Plastic toy\",\n            \"description\": \"plastic toy\",\n            \"slug\": \"plastic-toy\",\n            \"price\": 3.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg\",\n                  \"publicId\": \"s4l1dp26u0cllhvmafm6\",\n                  \"description\": null,\n                  \"productInfoId\": 56,\n                  \"id\": 57\n                }\n              ],\n              \"id\": 56\n            },\n            \"id\": 55\n          },\n          \"id\": 2307\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2308\n        }\n      ],\n      \"payment\": null,\n      \"id\": 2304\n    },\n    orderStoredInHistoryApi: [\n      {\n        'checked': false,\n        'id': 'fdb32730-337c-11eb-961c-11163f8d90be',\n        'orderDetails': {\n          'totalAmount': 13.98,\n          'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n          'orderToken': null,\n          'totalQuantity': 2,\n          'paymentPlaced': null,\n          'paymentId': null,\n          'itemList': [\n            {\n              'itemId': null,\n              'product': {\n                'isRemoved': false,\n                'price': 3.99,\n                'defaultMaxQuantity': 10,\n                'name': 'Plastic toy',\n                'description': 'plastic toy',\n                'id': 55,\n                'slug': 'plastic-toy',\n                'productInfo': {\n                  'imageList': [\n                    {\n                      'description': null,\n                      'largeUrl': null,\n                      'id': 57,\n                      'publicId': 's4l1dp26u0cllhvmafm6',\n                      'productInfoId': 56,\n                      'imageUrl': 'https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg'\n                    }\n                  ],\n                  'id': 56\n                }\n              },\n              'quantity': 1,\n              'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n              'id': 2007,\n              'productId': 55\n            }\n          ],\n          'payment': null,\n          'id': 2006,\n          'userId': 35,\n          'paymentPaid': null\n        },\n        'userid': '35',\n        'updatedAt': 1606789749027\n      }\n    ]\n  }\n};\n\nexport class SessionServiceMock {\n  public logout(): any {}\n  public storeTokenInSession(data: any): void {}\n  public getTokenFromStorage(): any {}\n  public storeOrderNumberInStorage(data: any): void {}\n  public getOrderNumberFromStorage(): any {}\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "dispatch",
                    "args": [
                        {
                            "name": "options",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "options",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StoreProcessedOrderInHistoryApiSuccess",
            "id": "class-StoreProcessedOrderInHistoryApiSuccess-a215e50a9aca738ab99680841058526b",
            "file": "src/app/cart/store/actions/cart.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport {UserDetails} from '../../../auth/store/models/login.model';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_TO_CART_SUCCESS = 'ADD_PRODUCT_TO_CART_SUCCESS';\nexport const SAVE_CURRENT_ORDER_IN_STORE = 'SAVE_CURRENT_ORDER_IN_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE = 'GET_CURRENT_ORDER_FROM_STORE';\nexport const GET_CURRENT_ORDER_FROM_STORE_SUCCESS = 'GET_CURRENT_ORDER_FROM_STORE_SUCCESS';\nexport const CHECK_OUT = 'CHECK_OUT';\nexport const FETCH_ORDERS_HISTORY = 'FETCH_ORDERS_HISTORY';\nexport const CHECK_OUT_SUCCESS = 'CHECK_OUT_SUCCESS';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const SAVE_PLACED_ORDER = 'SAVE_PLACED_ORDER';\nexport const SAVE_ORDER_IN_HISTORY_API = 'SAVE_ORDER_IN_HISTORY_API';\nexport const DELETE_ORDER_FROM_HISTORY_API = 'DELETE_ORDER_FROM_HISTORY_API';\nexport const STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS = 'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS';\n\nexport class AddToCart implements Action {\n  readonly type = ADD_TO_CART;\n  constructor(public payload: any) {}\n}\nexport class AddToCartSuccess implements Action {\n  readonly type = ADD_TO_CART_SUCCESS;\n  constructor(public payload: any) {\n  }\n}\nexport class RemoveFromCart implements Action {\n  readonly type = REMOVE_FROM_CART;\n  constructor(public payload: any) {}\n}\nexport class StoreCurrentOrder implements Action {\n  readonly type = SAVE_CURRENT_ORDER_IN_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStore implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE;\n  constructor(public payload?: any) {\n  }\n}\nexport class FetchOrderHistory implements Action {\n  readonly type = FETCH_ORDERS_HISTORY;\n  constructor(public payload?: any) {\n  }\n}\nexport class GetCurrentOrderFromStoreSuccess implements Action {\n  readonly type = GET_CURRENT_ORDER_FROM_STORE_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOut implements Action {\n  readonly type = CHECK_OUT;\n  constructor(public payload?: any) {\n  }\n}\nexport class CheckOutSuccess implements Action {\n  readonly type = CHECK_OUT_SUCCESS;\n  constructor(public payload?: any) {\n  }\n}\nexport class SavePlacedOrder implements Action {\n  readonly type = SAVE_PLACED_ORDER;\n  constructor(public payload: UserDetails ) {\n  }\n}\nexport class SaveOrderInHistoryApi implements Action {\n  readonly type = SAVE_ORDER_IN_HISTORY_API;\n}\nexport class StoreProcessedOrderInHistoryApiSuccess implements Action {\n  readonly type = STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS;\n  constructor(public payload: any ) {\n  }\n}\nexport class DeleteOrderFromHistoryApi implements Action {\n  readonly type = DELETE_ORDER_FROM_HISTORY_API;\n  constructor(public payload: any ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TranslateLoaderMock",
            "id": "class-TranslateLoaderMock-6d2b3f195aae6221e3580683bf90a608",
            "file": "src/test/mock.ts",
            "type": "class",
            "sourceCode": "import {empty, of, Observable} from 'rxjs';\nimport { TranslateLoader } from '@ngx-translate/core'\n// Translation\nconst enJson = require('../assets/i18n/en.json');\nconst frJson = require('../assets/i18n/fr.json');\nconst ruJson = require('../assets/i18n/ru.json');\n\nexport class TranslateLoaderMock implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    if (lang === 'ru') {\n      return of(ruJson);\n    } else if (lang === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\nexport class TranslateServiceMock {\n  language = 'en';\n  use(lang: string) {\n    this.language = lang;\n    return lang;\n  }\n  get() {\n    if (this.language === 'ru') {\n      return of(ruJson);\n    } else if (this.language === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\n// Store\nexport class StoreMock {\n  select(options) {\n    return empty();\n  }\n  dispatch(options) {\n  }\n}\n\n// Mocks of Store\nexport const initialAppState = {\n  userLoginReducer: {\n    userDetails: {\n      'userName': 'kuku@kuku.com',\n      'password': '',\n      'token': 'eyJhbGciOiJIUzI1NiJ9',\n      'mobile': 123456789,\n      'login': {\n        'roles': [\n          {\n            'roleName': 'buyer',\n            'description': null,\n            'id': 34\n          }\n        ],\n        'id': 33\n      },\n      'id': 35\n    }\n  }\n};\n\nexport const cartReducerStateMock = {\n  cart: {\n    currentOrderInCart: {\n      \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n      \"orderToken\": null,\n      \"userId\": 1211,\n      \"totalAmount\": 123.97,\n      \"totalQuantity\": 4,\n      \"paymentId\": null,\n      \"paymentPlaced\": null,\n      \"paymentPaid\": null,\n      \"itemList\": [\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2305\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 42,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"robot\",\n            \"description\": \"robot1\",\n            \"slug\": \"robot1\",\n            \"price\": 100,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100113/m6xqpddpalxl2zubmajx.png\",\n                  \"publicId\": \"m6xqpddpalxl2zubmajx\",\n                  \"description\": null,\n                  \"productInfoId\": 43,\n                  \"id\": 44\n                }\n              ],\n              \"id\": 43\n            },\n            \"id\": 42\n          },\n          \"id\": 2306\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 55,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"Plastic toy\",\n            \"description\": \"plastic toy\",\n            \"slug\": \"plastic-toy\",\n            \"price\": 3.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg\",\n                  \"publicId\": \"s4l1dp26u0cllhvmafm6\",\n                  \"description\": null,\n                  \"productInfoId\": 56,\n                  \"id\": 57\n                }\n              ],\n              \"id\": 56\n            },\n            \"id\": 55\n          },\n          \"id\": 2307\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2308\n        }\n      ],\n      \"payment\": null,\n      \"id\": 2304\n    },\n    orderStoredInHistoryApi: [\n      {\n        'checked': false,\n        'id': 'fdb32730-337c-11eb-961c-11163f8d90be',\n        'orderDetails': {\n          'totalAmount': 13.98,\n          'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n          'orderToken': null,\n          'totalQuantity': 2,\n          'paymentPlaced': null,\n          'paymentId': null,\n          'itemList': [\n            {\n              'itemId': null,\n              'product': {\n                'isRemoved': false,\n                'price': 3.99,\n                'defaultMaxQuantity': 10,\n                'name': 'Plastic toy',\n                'description': 'plastic toy',\n                'id': 55,\n                'slug': 'plastic-toy',\n                'productInfo': {\n                  'imageList': [\n                    {\n                      'description': null,\n                      'largeUrl': null,\n                      'id': 57,\n                      'publicId': 's4l1dp26u0cllhvmafm6',\n                      'productInfoId': 56,\n                      'imageUrl': 'https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg'\n                    }\n                  ],\n                  'id': 56\n                }\n              },\n              'quantity': 1,\n              'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n              'id': 2007,\n              'productId': 55\n            }\n          ],\n          'payment': null,\n          'id': 2006,\n          'userId': 35,\n          'paymentPaid': null\n        },\n        'userid': '35',\n        'updatedAt': 1606789749027\n      }\n    ]\n  }\n};\n\nexport class SessionServiceMock {\n  public logout(): any {}\n  public storeTokenInSession(data: any): void {}\n  public getTokenFromStorage(): any {}\n  public storeOrderNumberInStorage(data: any): void {}\n  public getOrderNumberFromStorage(): any {}\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ]
        },
        {
            "name": "TranslateServiceMock",
            "id": "class-TranslateServiceMock-6d2b3f195aae6221e3580683bf90a608",
            "file": "src/test/mock.ts",
            "type": "class",
            "sourceCode": "import {empty, of, Observable} from 'rxjs';\nimport { TranslateLoader } from '@ngx-translate/core'\n// Translation\nconst enJson = require('../assets/i18n/en.json');\nconst frJson = require('../assets/i18n/fr.json');\nconst ruJson = require('../assets/i18n/ru.json');\n\nexport class TranslateLoaderMock implements TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    if (lang === 'ru') {\n      return of(ruJson);\n    } else if (lang === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\nexport class TranslateServiceMock {\n  language = 'en';\n  use(lang: string) {\n    this.language = lang;\n    return lang;\n  }\n  get() {\n    if (this.language === 'ru') {\n      return of(ruJson);\n    } else if (this.language === 'fr') {\n      return of(frJson);\n    } else {\n      return of(enJson);\n    }\n  }\n}\n// Store\nexport class StoreMock {\n  select(options) {\n    return empty();\n  }\n  dispatch(options) {\n  }\n}\n\n// Mocks of Store\nexport const initialAppState = {\n  userLoginReducer: {\n    userDetails: {\n      'userName': 'kuku@kuku.com',\n      'password': '',\n      'token': 'eyJhbGciOiJIUzI1NiJ9',\n      'mobile': 123456789,\n      'login': {\n        'roles': [\n          {\n            'roleName': 'buyer',\n            'description': null,\n            'id': 34\n          }\n        ],\n        'id': 33\n      },\n      'id': 35\n    }\n  }\n};\n\nexport const cartReducerStateMock = {\n  cart: {\n    currentOrderInCart: {\n      \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n      \"orderToken\": null,\n      \"userId\": 1211,\n      \"totalAmount\": 123.97,\n      \"totalQuantity\": 4,\n      \"paymentId\": null,\n      \"paymentPlaced\": null,\n      \"paymentPaid\": null,\n      \"itemList\": [\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2305\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 42,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"robot\",\n            \"description\": \"robot1\",\n            \"slug\": \"robot1\",\n            \"price\": 100,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100113/m6xqpddpalxl2zubmajx.png\",\n                  \"publicId\": \"m6xqpddpalxl2zubmajx\",\n                  \"description\": null,\n                  \"productInfoId\": 43,\n                  \"id\": 44\n                }\n              ],\n              \"id\": 43\n            },\n            \"id\": 42\n          },\n          \"id\": 2306\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 55,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"Plastic toy\",\n            \"description\": \"plastic toy\",\n            \"slug\": \"plastic-toy\",\n            \"price\": 3.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg\",\n                  \"publicId\": \"s4l1dp26u0cllhvmafm6\",\n                  \"description\": null,\n                  \"productInfoId\": 56,\n                  \"id\": 57\n                }\n              ],\n              \"id\": 56\n            },\n            \"id\": 55\n          },\n          \"id\": 2307\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2308\n        }\n      ],\n      \"payment\": null,\n      \"id\": 2304\n    },\n    orderStoredInHistoryApi: [\n      {\n        'checked': false,\n        'id': 'fdb32730-337c-11eb-961c-11163f8d90be',\n        'orderDetails': {\n          'totalAmount': 13.98,\n          'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n          'orderToken': null,\n          'totalQuantity': 2,\n          'paymentPlaced': null,\n          'paymentId': null,\n          'itemList': [\n            {\n              'itemId': null,\n              'product': {\n                'isRemoved': false,\n                'price': 3.99,\n                'defaultMaxQuantity': 10,\n                'name': 'Plastic toy',\n                'description': 'plastic toy',\n                'id': 55,\n                'slug': 'plastic-toy',\n                'productInfo': {\n                  'imageList': [\n                    {\n                      'description': null,\n                      'largeUrl': null,\n                      'id': 57,\n                      'publicId': 's4l1dp26u0cllhvmafm6',\n                      'productInfoId': 56,\n                      'imageUrl': 'https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg'\n                    }\n                  ],\n                  'id': 56\n                }\n              },\n              'quantity': 1,\n              'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n              'id': 2007,\n              'productId': 55\n            }\n          ],\n          'payment': null,\n          'id': 2006,\n          'userId': 35,\n          'paymentPaid': null\n        },\n        'userid': '35',\n        'updatedAt': 1606789749027\n      }\n    ]\n  }\n};\n\nexport class SessionServiceMock {\n  public logout(): any {}\n  public storeTokenInSession(data: any): void {}\n  public getTokenFromStorage(): any {}\n  public storeOrderNumberInStorage(data: any): void {}\n  public getOrderNumberFromStorage(): any {}\n}\n",
            "properties": [
                {
                    "name": "language",
                    "defaultValue": "'en'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "use",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "uploadImageSuccess",
            "id": "class-uploadImageSuccess-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPLOAD_PRODUCT_IMAGE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UploadProductImage",
            "id": "class-UploadProductImage-48ae4262b78dc097b91cfd7a3ab03231",
            "file": "src/app/products/store/actions/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { Products, ProductDetails, ProductSlug, RemoveItemId, error_message } from '../models/products.model';\n\nexport const GET_PRODUCT_DETAILS = 'GET_PRODUCT_DETAILS';\nexport const GET_PRODUCT_DETAILS_SUCCESS = 'GET_PRODUCT_DETAILS_SUCCESS';\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\nexport const RESET_PRODUCT_DETAILS = 'RESET_PRODUCT_DETAILS';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const ERROR_LOADING = 'ERROR_LOADING';\nexport const CREATE_NEW_PRODUCT = 'CREATE_NEW_PRODUCT';\nexport const CREATE_NEW_PRODUCT_SUCCESS = 'CREATE_NEW_PRODUCT_SUCCESS';\nexport const REMOVE_ITEM_FROM_PRODUCT_LIST = 'REMOVE_ITEM_FROM_PRODUCT_LIST';\nexport const UPLOAD_PRODUCT_IMAGE = 'UPLOAD_PRODUCT_IMAGE';\nexport const UPLOAD_PRODUCT_IMAGE_SUCCESS = 'UPLOAD_PRODUCT_IMAGE_SUCCESS';\n\nexport class GetProductDetails implements Action {\n  readonly type = GET_PRODUCT_DETAILS;\n  constructor(public payload: ProductSlug ) {\n  }\n}\n\nexport class ResetProductDetails implements Action {\n  readonly type = RESET_PRODUCT_DETAILS;\n}\n\nexport class GetProductDetailsSuccess implements Action {\n  readonly type = GET_PRODUCT_DETAILS_SUCCESS;\n  constructor(public payload: ProductDetails ) {\n  }\n}\n\nexport class GetProducts implements Action {\n  readonly type = GET_PRODUCTS;\n}\n\nexport class GetProductsSuccess implements Action {\n  readonly type = GET_PRODUCTS_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProduct implements Action {\n  readonly type = CREATE_NEW_PRODUCT;\n  constructor(public payload: Products ) {\n  }\n}\n\nexport class CreateNewProductSuccess implements Action {\n  readonly type = CREATE_NEW_PRODUCT_SUCCESS;\n  constructor(public payload: Products ) {\n  }\n\n}\n\nexport class RemoveItemFromProductList implements Action {\n  readonly type = REMOVE_ITEM_FROM_PRODUCT_LIST;\n  constructor(public payload: RemoveItemId ) {\n  }\n}\n\nexport class UploadProductImage implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\nexport class uploadImageSuccess implements Action {\n  readonly type = UPLOAD_PRODUCT_IMAGE_SUCCESS;\n  constructor(public payload: {\n    file: File, productId: string\n  } ) {\n  }\n}\n\nexport class EffectError implements Action {\n  readonly type = ERROR_LOADING;\n  constructor(public payload?: error_message ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPLOAD_PRODUCT_IMAGE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [
        {
            "name": "ClickDirective",
            "id": "directive-ClickDirective-c107bcc01968f925e7dbcfcc1a0a98df",
            "file": "src/app/shared/directives/click.directive.ts",
            "type": "directive",
            "description": "<p>This directive helps to solve issue related to &quot;iOS hover emulation&quot; when first click</p>\n",
            "sourceCode": "import { Directive, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This directive helps to solve issue related to \"iOS hover emulation\" when first click\n */\n@Directive({\n    selector: '[appClick]'\n})\nexport class ClickDirective implements OnInit, OnDestroy {\n    private destroy$: Subject<any> = new Subject();\n\n    private get element(): HTMLElement {\n        return this.el.nativeElement;\n    }\n\n    constructor(\n        private el: ElementRef,\n        private zone: NgZone\n    ) { }\n\n    ngOnInit(): void {\n        let clicked = false;\n        let identifier = null;\n        let x = null;\n        let y = null;\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent<TouchEvent>(this.element, 'touchstart').pipe(takeUntil(this.destroy$)).subscribe(event => {\n                if (event.touches.length !== 1) {\n                    return;\n                }\n\n                const touch = event.changedTouches[0];\n\n                clicked = true;\n                identifier = touch.identifier;\n                x = touch.clientX;\n                y = touch.clientY;\n\n                setTimeout(() => {\n                    clicked = false;\n                    identifier = x = y = null;\n                }, 300);\n            });\n            fromEvent<TouchEvent>(this.element, 'touchend').pipe(takeUntil(this.destroy$)).subscribe(event => {\n                if (clicked && event.changedTouches.length === 1 && event.changedTouches[0].identifier === identifier) {\n                    const touch = event.changedTouches[0];\n                    const distance = Math.abs(Math.sqrt(\n                        Math.pow(x - touch.clientX, 2) +\n                        Math.pow(y - touch.clientY, 2)\n                    ));\n\n                    if (distance < 15) {\n                        event.preventDefault();\n                        this.element.click();\n                    }\n                }\n\n                clicked = false;\n                identifier = x = y = null;\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n",
            "selector": "[appClick]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 14
                    }
                }
            }
        },
        {
            "name": "CollapseContentDirective",
            "id": "directive-CollapseContentDirective-ad54505aecd8dcbe62332dc37f6677f1",
            "file": "src/app/shared/directives/collapse.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { ContentChild, Directive, ElementRef, Input, NgZone, OnDestroy, OnInit } from '@angular/core';\r\nimport { fromEvent, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n    selector: '[appCollapseContent]'\r\n})\r\nexport class CollapseContentDirective implements OnInit, OnDestroy {\r\n    private destroy$: Subject<any> = new Subject();\r\n\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private zone: NgZone\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            fromEvent<TransitionEvent>(this.element, 'transitionend').pipe(\r\n                takeUntil(this.destroy$)\r\n            ).subscribe(event => {\r\n                if (event.propertyName === 'height') {\r\n                    this.element.style.height = '';\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[appCollapseItem]',\r\n    exportAs: 'appCollapseItem'\r\n})\r\nexport class CollapseItemDirective {\r\n    @Input() appCollapseItem: string;\r\n\r\n    get class(): string {\r\n        return this.appCollapseItem;\r\n    }\r\n\r\n    get isOpen(): boolean {\r\n        return this.element.classList.contains(this.class);\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    @ContentChild(CollapseContentDirective, {static: false}) content: CollapseContentDirective;\r\n\r\n    constructor(private el: ElementRef) { }\r\n\r\n    toggle(): void {\r\n        if (this.isOpen) {\r\n            this.close();\r\n        } else {\r\n            this.open();\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        if (this.content) {\r\n            const startHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.element.classList.add(this.class);\r\n\r\n            const endHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.content.element.style.height = `${startHeight}px`;\r\n            this.element.getBoundingClientRect(); // force reflow\r\n            this.content.element.style.height = `${endHeight}px`;\r\n        } else {\r\n            this.element.classList.add(this.class);\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        if (this.content) {\r\n            const startHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.content.element.style.height = `${startHeight}px`;\r\n            this.element.classList.remove(this.class);\r\n\r\n            this.element.getBoundingClientRect(); // force reflow\r\n\r\n            this.content.element.style.height = '';\r\n        } else {\r\n            this.element.classList.remove(this.class);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[appCollapse]'\r\n})\r\nexport class CollapseDirective {}\r\n",
            "selector": "[appCollapseContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 11
                    }
                }
            }
        },
        {
            "name": "CollapseDirective",
            "id": "directive-CollapseDirective-ad54505aecd8dcbe62332dc37f6677f1",
            "file": "src/app/shared/directives/collapse.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { ContentChild, Directive, ElementRef, Input, NgZone, OnDestroy, OnInit } from '@angular/core';\r\nimport { fromEvent, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n    selector: '[appCollapseContent]'\r\n})\r\nexport class CollapseContentDirective implements OnInit, OnDestroy {\r\n    private destroy$: Subject<any> = new Subject();\r\n\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private zone: NgZone\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            fromEvent<TransitionEvent>(this.element, 'transitionend').pipe(\r\n                takeUntil(this.destroy$)\r\n            ).subscribe(event => {\r\n                if (event.propertyName === 'height') {\r\n                    this.element.style.height = '';\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[appCollapseItem]',\r\n    exportAs: 'appCollapseItem'\r\n})\r\nexport class CollapseItemDirective {\r\n    @Input() appCollapseItem: string;\r\n\r\n    get class(): string {\r\n        return this.appCollapseItem;\r\n    }\r\n\r\n    get isOpen(): boolean {\r\n        return this.element.classList.contains(this.class);\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    @ContentChild(CollapseContentDirective, {static: false}) content: CollapseContentDirective;\r\n\r\n    constructor(private el: ElementRef) { }\r\n\r\n    toggle(): void {\r\n        if (this.isOpen) {\r\n            this.close();\r\n        } else {\r\n            this.open();\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        if (this.content) {\r\n            const startHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.element.classList.add(this.class);\r\n\r\n            const endHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.content.element.style.height = `${startHeight}px`;\r\n            this.element.getBoundingClientRect(); // force reflow\r\n            this.content.element.style.height = `${endHeight}px`;\r\n        } else {\r\n            this.element.classList.add(this.class);\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        if (this.content) {\r\n            const startHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.content.element.style.height = `${startHeight}px`;\r\n            this.element.classList.remove(this.class);\r\n\r\n            this.element.getBoundingClientRect(); // force reflow\r\n\r\n            this.content.element.style.height = '';\r\n        } else {\r\n            this.element.classList.remove(this.class);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[appCollapse]'\r\n})\r\nexport class CollapseDirective {}\r\n",
            "selector": "[appCollapse]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "CollapseItemDirective",
            "id": "directive-CollapseItemDirective-ad54505aecd8dcbe62332dc37f6677f1",
            "file": "src/app/shared/directives/collapse.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { ContentChild, Directive, ElementRef, Input, NgZone, OnDestroy, OnInit } from '@angular/core';\r\nimport { fromEvent, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n    selector: '[appCollapseContent]'\r\n})\r\nexport class CollapseContentDirective implements OnInit, OnDestroy {\r\n    private destroy$: Subject<any> = new Subject();\r\n\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private zone: NgZone\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            fromEvent<TransitionEvent>(this.element, 'transitionend').pipe(\r\n                takeUntil(this.destroy$)\r\n            ).subscribe(event => {\r\n                if (event.propertyName === 'height') {\r\n                    this.element.style.height = '';\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[appCollapseItem]',\r\n    exportAs: 'appCollapseItem'\r\n})\r\nexport class CollapseItemDirective {\r\n    @Input() appCollapseItem: string;\r\n\r\n    get class(): string {\r\n        return this.appCollapseItem;\r\n    }\r\n\r\n    get isOpen(): boolean {\r\n        return this.element.classList.contains(this.class);\r\n    }\r\n\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    @ContentChild(CollapseContentDirective, {static: false}) content: CollapseContentDirective;\r\n\r\n    constructor(private el: ElementRef) { }\r\n\r\n    toggle(): void {\r\n        if (this.isOpen) {\r\n            this.close();\r\n        } else {\r\n            this.open();\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        if (this.content) {\r\n            const startHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.element.classList.add(this.class);\r\n\r\n            const endHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.content.element.style.height = `${startHeight}px`;\r\n            this.element.getBoundingClientRect(); // force reflow\r\n            this.content.element.style.height = `${endHeight}px`;\r\n        } else {\r\n            this.element.classList.add(this.class);\r\n        }\r\n    }\r\n\r\n    close(): void {\r\n        if (this.content) {\r\n            const startHeight = this.content.element.getBoundingClientRect().height;\r\n\r\n            this.content.element.style.height = `${startHeight}px`;\r\n            this.element.classList.remove(this.class);\r\n\r\n            this.element.getBoundingClientRect(); // force reflow\r\n\r\n            this.content.element.style.height = '';\r\n        } else {\r\n            this.element.classList.remove(this.class);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[appCollapse]'\r\n})\r\nexport class CollapseDirective {}\r\n",
            "selector": "[appCollapseItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appCollapseItem",
                    "line": 44,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "type": "CollapseContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "CollapseContentDirective, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "string",
                        "returnType": "string",
                        "line": 46
                    }
                },
                "isOpen": {
                    "name": "isOpen",
                    "getSignature": {
                        "name": "isOpen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                },
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 54
                    }
                }
            }
        },
        {
            "name": "DepartmentsAreaDirective",
            "id": "directive-DepartmentsAreaDirective-9c72f65bb682d315451f72bd215eb90d",
            "file": "src/app/shared/directives/departments-area.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\r\nimport { DepartmentsService } from '../services/departments.service';\r\n\r\n@Directive({\r\n    selector: '[appDepartmentsArea]'\r\n})\r\nexport class DepartmentsAreaDirective implements OnInit, OnDestroy {\r\n    get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        private service: DepartmentsService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.service.setAreaElement(this.element);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.service.setAreaElement(null);\r\n    }\r\n}\r\n",
            "selector": "[appDepartmentsArea]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "service",
                        "type": "DepartmentsService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "DepartmentsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 8
                    }
                }
            }
        },
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-5bec715c743c5dbde4eb280f8775c754",
            "file": "src/app/shared/directives/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Inject, Input, OnDestroy, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { fromEvent, Subject } from 'rxjs';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n    selector: '[appDropdown]',\r\n    exportAs: 'appDropdown'\r\n})\r\nexport class DropdownDirective implements OnDestroy {\r\n    private destroy$: Subject<any> = new Subject();\r\n\r\n    @Input() appDropdown = '';\r\n\r\n    get isOpen(): boolean {\r\n        return this.element.classList.contains(this.appDropdown);\r\n    }\r\n\r\n    private get element(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: any,\r\n        private el: ElementRef,\r\n        private zone: NgZone\r\n    ) {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.zone.runOutsideAngular(() => {\r\n                fromEvent<MouseEvent>(document, 'mousedown').pipe(\r\n                    takeUntil(this.destroy$)\r\n                ).subscribe((event) => {\r\n                    if (!el.nativeElement.contains(event.target)) {\r\n                        this.close();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.element.classList.toggle(this.appDropdown, force);\r\n    }\r\n\r\n    close(): void {\r\n        this.toggle(false);\r\n    }\r\n\r\n    open(): void {\r\n        this.toggle(true);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "selector": "[appDropdown]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appDropdown",
                    "defaultValue": "''",
                    "line": 13
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "force",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "force",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    },
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isOpen": {
                    "name": "isOpen",
                    "getSignature": {
                        "name": "isOpen",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 15
                    }
                },
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 19
                    }
                }
            }
        },
        {
            "name": "FakeSlidesDirective",
            "id": "directive-FakeSlidesDirective-4e969be2f2d8df6049211a5e00737345",
            "file": "src/app/shared/directives/fake-slides.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { EventManager } from '@angular/platform-browser';\r\n\r\n@Directive({\r\n    selector: '[appFakeSlides]',\r\n    exportAs: 'appFakeSlides'\r\n})\r\nexport class FakeSlidesDirective implements OnInit, OnChanges, OnDestroy {\r\n    @Input() options;\r\n    @Input() appFakeSlides = 0;\r\n\r\n    private resizeHandler;\r\n\r\n    slides = [];\r\n    slidesCount = 0;\r\n\r\n    constructor(\r\n        private eventManager: EventManager,\r\n        private el: ElementRef\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.resizeHandler = this.eventManager.addGlobalEventListener('window', 'resize', () => this.calc());\r\n        this.calc();\r\n    }\r\n\r\n    calc(): void {\r\n        let newFakeSlidesCount = 0;\r\n\r\n        if (this.options) {\r\n            let match = -1;\r\n            const viewport = this.el.nativeElement.querySelector('.owl-carousel').clientWidth;\r\n            const overwrites = this.options.responsive;\r\n\r\n            if (overwrites) {\r\n                for (const key in overwrites) {\r\n                    if (overwrites.hasOwnProperty(key)) {\r\n                        if (+key <= viewport && +key > match) {\r\n                            match = Number(key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (match >= 0) {\r\n                const items = overwrites[match].items;\r\n                newFakeSlidesCount = Math.max(0, items - this.appFakeSlides);\r\n            } else if (this.options.items) {\r\n                newFakeSlidesCount = Math.max(0, this.options.items - this.appFakeSlides);\r\n            }\r\n        }\r\n\r\n        if (this.slidesCount !== newFakeSlidesCount) {\r\n            this.slides = [];\r\n            this.slidesCount = newFakeSlidesCount;\r\n\r\n            for (let i = 0; i < newFakeSlidesCount; i++) {\r\n                this.slides.push(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.calc();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.resizeHandler) {\r\n            this.resizeHandler();\r\n        }\r\n    }\r\n}\r\n",
            "selector": "[appFakeSlides]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appFakeSlides",
                    "defaultValue": "0",
                    "line": 10
                },
                {
                    "name": "options",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "resizeHandler",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "slides",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "slidesCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "calc",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "eventManager",
                        "type": "EventManager"
                    },
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "eventManager",
                        "type": "EventManager",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "OwlPreventClickDirective",
            "id": "directive-OwlPreventClickDirective-2cc7eacb780da02c55f42661eda8d543",
            "file": "src/app/shared/directives/owl-prevent-click.directive.ts",
            "type": "directive",
            "description": "<p>This directive adds the &quot;owl-prevent-click&quot; class to the .owl-carousel element when dragging.\nWhen the class &quot;owl-prevent-click&quot; is applied to an element, a pseudo-element is created and\na mouseup event occurs on it, which prevents clicking.</p>\n",
            "sourceCode": "import { Directive, ElementRef, Inject, NgZone, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { fromEvent } from 'rxjs';\r\nimport { filter, map, take, takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * This directive adds the \"owl-prevent-click\" class to the .owl-carousel element when dragging.\r\n * When the class \"owl-prevent-click\" is applied to an element, a pseudo-element is created and\r\n * a mouseup event occurs on it, which prevents clicking.\r\n */\r\n@Directive({\r\n    selector: '[appOwlPreventClick]'\r\n})\r\nexport class OwlPreventClickDirective implements OnInit {\r\n    private get element(): HTMLElement {\r\n        return this.elementRef.nativeElement;\r\n    }\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: any,\r\n        private elementRef: ElementRef,\r\n        private zone: NgZone\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            this.zone.runOutsideAngular(() => {\r\n                const children: Element[] = [].slice.call(this.element.children);\r\n                const owlCarouseElement = children.find(element => element.classList.contains('owl-carousel'));\r\n\r\n                fromEvent<MouseEvent>(owlCarouseElement, 'mousedown').subscribe(mouseDownEvent => {\r\n                    const timeout = setTimeout(() => {\r\n                        owlCarouseElement.classList.add('owl-prevent-click');\r\n                    }, 250);\r\n                    const mouseUpEvent$ = fromEvent<MouseEvent>(document, 'mouseup').pipe(take(1));\r\n\r\n                    fromEvent<MouseEvent>(document, 'mousemove').pipe(\r\n                        takeUntil(mouseUpEvent$),\r\n                        map(mouseMoveEvent => Math.abs(Math.sqrt(\r\n                            Math.pow(mouseDownEvent.clientX - mouseMoveEvent.clientX, 2) +\r\n                            Math.pow(mouseDownEvent.clientY - mouseMoveEvent.clientY, 2)\r\n                        ))),\r\n                        filter(distance => distance > 15),\r\n                        take(1)\r\n                    ).subscribe(() => {\r\n                        owlCarouseElement.classList.add('owl-prevent-click');\r\n                    });\r\n\r\n                    mouseUpEvent$.subscribe(() => {\r\n                        owlCarouseElement.classList.remove('owl-prevent-click');\r\n\r\n                        clearTimeout(timeout);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n",
            "selector": "[appOwlPreventClick]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 15
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AddDetailsComponent",
            "id": "component-AddDetailsComponent-81849b5638a41104a2bfee7f4c04f59f",
            "file": "src/app/products/components/create-product/add-details/add-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "create-product",
            "styleUrls": [
                "./add-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addProductForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fileDataUrl",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "image",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'image', {static: false}"
                        }
                    ]
                },
                {
                    "name": "submitFormData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppStates } from '../../../../app.states';\nimport { ProductsService } from '../../../../core/services/products.service';\nimport { CreateNewProduct } from '../../../store/actions/products.actions';\nimport { ProductDetails } from '../../../store/models/products.model';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'create-product',\n  templateUrl: './add-details.component.html',\n  styleUrls: ['./add-details.component.scss']\n})\nexport class AddDetailsComponent implements OnInit {\n\n    addProductForm: FormGroup;\n    @ViewChild('image', {'static': false}) image: ElementRef;\n    submitFormData: any;\n    fileDataUrl: any;\n\n    constructor( @Inject(FormBuilder) fb: FormBuilder,\n                private productsService: ProductsService,\n                private router: Router,\n                private store: Store<AppStates> ) {\n\n      this.addProductForm = fb.group({\n          name: [null, Validators.required],\n          description: [null, Validators.minLength(5)],\n          price: [null, Validators.required],\n          defaultMaxQuantity: [null, Validators.required],\n          slug: [null, Validators.required]\n        });\n\n        this.store.select(\n          res => {\n            if (res && res['productsReducer'] && res['productsReducer'] && res['productsReducer']['productCreated'] ) {\n              return res['productsReducer']['productCreated'];\n            }\n          }\n        ).pipe(\n          map(v => {\n            return v;\n          })\n        ).subscribe(\n          (productCreated: any) => {\n\n              if(productCreated) {\n                this.router.navigate([`/create-product/upload-images/${productCreated['slug']}`]);\n              }\n\n          },\n          err => console.error(err)\n        );\n\n      }\n\n      ngOnInit() {\n      }\n\n      addProduct() {\n        this.submitFormData = Object.assign({}, this.addProductForm.value, { image: this.fileDataUrl } );\n        this.store.dispatch(new CreateNewProduct(this.submitFormData));\n      }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-frame default-page-background\">\n\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-1\"></div>\n\n      <div class=\"col-10\">\n        <form [formGroup]=\"addProductForm\" (ngSubmit)=\"addProduct()\">\n          <div class=\"form-group\">\n            <label for=\"productName\">Product name:</label>\n            <input type=\"text\" formControlName=\"name\" class=\"form-control\" id=\"productName\" placeholder=\"product name\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"description\">Description:</label>\n            <input type=\"text\" formControlName=\"description\" class=\"form-control\" id=\"description\" placeholder=\"product description\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"price\">Price:</label>\n            <input type=\"text\" formControlName=\"price\" class=\"form-control\" id=\"price\" placeholder=\"price\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"defaultMaxQuantity\">Maximum one time purchase quantity:</label>\n            <input type=\"text\" formControlName=\"defaultMaxQuantity\" class=\"form-control\" id=\"defaultMaxQuantity\" placeholder=\"maximum quantity\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"slug\">Unique sub-path of product details URL:</label>\n            <input type=\"text\" formControlName=\"slug\" class=\"form-control\" id=\"slug\" placeholder=\"unique sub-path\">\n          </div>\n          <button [disabled]=\"!addProductForm.value.name || !addProductForm.value.price || addProductForm.status!=='VALID'\" type=\"submit\" class=\"btn btn-primary\">Add</button>\n        </form>\n      </div>\n\n      <div class=\"col-1\"></div>\n    </div>\n  </div>\n\n</div>\n<!--<div>{{errorMessage}}</div>-->\n"
        },
        {
            "name": "AddToCartComponent",
            "id": "component-AddToCartComponent-c583604e5a00ab69ecd82dd2d01d3840",
            "file": "src/app/products/components/child-components/add-to-cart/add-to-cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-to-cart",
            "styleUrls": [
                "./add-to-cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-to-cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "maxQuantity",
                    "line": 16,
                    "type": "number"
                },
                {
                    "name": "minQuantity",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedQuantity",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "intervalIcrementQnty",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "itervalDecrementQnty",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "limitStockMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfExceedLimit",
                    "args": [
                        {
                            "name": "numberEntered",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "numberEntered",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearIntervalDecrementQnty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "clearIntervalIcrementQnty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108
                },
                {
                    "name": "decrementQuantity",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "incrementQuantity",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "changeQuantity",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "changeQuantity",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "changeQuantity",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "changeQuantity",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "startIntervalDecrementQnty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "startIntervalIcrementQnty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {TranslateService} from '@ngx-translate/core';\n\nimport { AppStates } from '../../../../app.states';\n\n@Component({\n  selector: 'add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  styleUrls: ['./add-to-cart.component.scss']\n})\nexport class AddToCartComponent implements OnInit {\n\n  public show = true;\n  public slug: string;\n  @Input() maxQuantity : number;\n  @Input() minQuantity : number;\n  public quantity = 1;\n  @Output() selectedQuantity : EventEmitter<number> = new EventEmitter()\n\n  public limitStockMessage: string;\n  intervalIcrementQnty: any;\n  itervalDecrementQnty: any;\n\n  constructor(\n    private store: Store<AppStates>,\n    private translate: TranslateService\n    ) {\n\n  }\n\n  ngOnInit() {\n\n  }\n\n  incrementQuantity() {\n    if(this.quantity < this.maxQuantity) {\n      ++this.quantity;\n      this.selectedQuantity.emit(this.quantity);\n      this.limitStockMessage = '';\n    } else {\n      this.translate.get('product.selectMaxLimit', {value: this.maxQuantity})\n        .subscribe(translation => {\n          this.limitStockMessage = translation;\n        });\n    }\n  }\n\n  decrementQuantity() {\n    if (this.quantity > this.minQuantity) {\n      --this.quantity;\n      this.selectedQuantity.emit(this.quantity);\n      this.limitStockMessage = '';\n    } else {\n      this.translate.get('product.selectMinLimit', {value: this.minQuantity})\n        .subscribe(translation => {\n          this.limitStockMessage = translation;\n        });\n    }\n  }\n\n  checkIfExceedLimit(numberEntered) {\n    if (isNaN(numberEntered)) {\n      this.limitStockMessage = 'Please enter a number';\n      this.quantity = this.minQuantity;\n    } else if (numberEntered >= this.maxQuantity) {\n      this.translate.get('product.selectMaxLimit', {value: this.maxQuantity})\n        .subscribe(translation => {\n          this.limitStockMessage = translation;\n        });\n      this.quantity = this.maxQuantity;\n    } else if (numberEntered < this.minQuantity) {\n      this.translate.get('product.selectMinLimit', {value: this.minQuantity})\n        .subscribe(translation => {\n          this.limitStockMessage = translation;\n        });\n      this.quantity = this.minQuantity;\n    } else {\n      this.limitStockMessage = '';\n      this.quantity = numberEntered;\n    }\n  }\n  // Auto-increment functionality:\n  mousedown(changeQuantity: string) {\n    if (changeQuantity === 'incrementQuantity') {\n      this.startIntervalIcrementQnty();\n    } else if (changeQuantity === 'decrementQuantity') {\n      this.startIntervalDecrementQnty();\n    }\n  }\n  mouseup(changeQuantity: string) {\n    if(changeQuantity === 'incrementQuantity') {\n      this.clearIntervalIcrementQnty();\n    } else if(changeQuantity === 'decrementQuantity') {\n      this.clearIntervalDecrementQnty();\n    }\n  }\n  startIntervalIcrementQnty() {\n    this.intervalIcrementQnty = setInterval(() => {\n      this.incrementQuantity();\n    }, 500);\n  }\n  startIntervalDecrementQnty() {\n    this.itervalDecrementQnty = setInterval(() => {\n      this.decrementQuantity();\n    }, 500);\n  }\n  clearIntervalIcrementQnty() {\n    clearInterval(this.intervalIcrementQnty);\n  }\n  clearIntervalDecrementQnty() {\n    clearInterval(this.itervalDecrementQnty);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".order-quantity {\n  margin: 8px 0px;\n}\n.arrow-btn-custom {\n  width: 10px;\n}\n.increment-decrement-arrows {\n  height: 32px;\n  width: 32px;\n  border-radius: 50%;\n  background-color: white;\n  margin: 0 10px;\n  &:active {\n    box-shadow: 2px 2px 2px grey;\n    outline: none !important;\n  }\n  &:focus {\n    box-shadow: 2px 2px 2px grey;\n    outline: none !important;\n  }\n}\n",
                    "styleUrl": "./add-to-cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row product-add-to-card\">\n  <div class=\"col-5\">\n    {{ 'product.quantity' | translate }}:\n  </div>\n  <div class=\"col-7\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <button type=\"button\" class=\"increment-decrement-arrows\" (click)=\"decrementQuantity()\" (mousedown)=\"mousedown('decrementQuantity')\" (mouseup)=\"mouseup('decrementQuantity')\" (mouseleave)=\"mouseup('decrementQuantity')\">\n          <img src=\"/assets/svg/arrow-rounded-left-6x9.svg\" alt=\"arrow\" class=\"arrow-btn-custom\"/>\n        </button>\n\n        <input class=\"input-number-of-items\" [ngModel]=\"quantity\" (ngModelChange)=\"checkIfExceedLimit($event)\" id=\"example-uppercase\">\n\n        <button type=\"button\" class=\"increment-decrement-arrows\" (click)=\"incrementQuantity()\" (mousedown)=\"mousedown('incrementQuantity')\" (mouseup)=\"mouseup('incrementQuantity')\" (mouseleave)=\"mouseup('incrementQuantity')\">\n          <img src=\"/assets/svg/arrow-rounded-right-6x9.svg\" alt=\"arrow\" class=\"arrow-btn-custom\"/>\n        </button>\n      </div>\n      <div class=\"clo-12 limit-stock-message\">\n        <div class=\"\">{{limitStockMessage}}</div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-877d90a20bbb8a88b23d46fddfef8b6a",
            "file": "src/app/shared/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dismissible",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "line": 9,
                    "type": ""
                },
                {
                    "name": "type",
                    "defaultValue": "'info'",
                    "line": 11,
                    "type": "\"info\" | \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\""
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [
                {
                    "name": "class.alert",
                    "defaultValue": "true",
                    "line": 15
                },
                {
                    "name": "class.alert-danger",
                    "line": 22
                },
                {
                    "name": "class.alert-dismissible",
                    "line": 17
                },
                {
                    "name": "class.alert-info",
                    "line": 18
                },
                {
                    "name": "class.alert-lg",
                    "line": 16
                },
                {
                    "name": "class.alert-primary",
                    "line": 19
                },
                {
                    "name": "class.alert-secondary",
                    "line": 20
                },
                {
                    "name": "class.alert-success",
                    "line": 21
                },
                {
                    "name": "class.alert-warning",
                    "line": 23
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-alert',\r\n    templateUrl: './alert.component.html',\r\n    styleUrls: ['./alert.component.scss']\r\n})\r\nexport class AlertComponent {\r\n    @Input() size: 'lg' = null;\r\n    @Input() dismissible = false;\r\n    @Input() type: 'info'|'primary'|'secondary'|'success'|'danger'|'warning' = 'info';\r\n\r\n    @Output() close: EventEmitter<void> = new EventEmitter();\r\n\r\n    @HostBinding('class.alert') classAlert = true;\r\n    @HostBinding('class.alert-lg') get classAlertLg() { return this.size === 'lg'; }\r\n    @HostBinding('class.alert-dismissible') get classAlertDismissible() { return this.dismissible; }\r\n    @HostBinding('class.alert-info') get classAlertInfo() { return this.type === 'info'; }\r\n    @HostBinding('class.alert-primary') get classAlertPrimary() { return this.type === 'primary'; }\r\n    @HostBinding('class.alert-secondary') get classAlertSecondary() { return this.type === 'secondary'; }\r\n    @HostBinding('class.alert-success') get classAlertSuccess() { return this.type === 'success'; }\r\n    @HostBinding('class.alert-danger') get classAlertDanger() { return this.type === 'danger'; }\r\n    @HostBinding('class.alert-warning') get classAlertWarning() { return this.type === 'warning'; }\r\n\r\n    constructor() { }\r\n\r\n    onClose() {\r\n        this.close.emit();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: block;\r\n}\r\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "templateData": "<ng-content></ng-content>\r\n<button *ngIf=\"dismissible\" type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" (click)=\"onClose()\">\r\n    <app-icon name=\"cross-12\" size=\"12\"></app-icon>\r\n</button>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-51d71552fa81439c01b6e6e16a8029a7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedLanguage",
                    "defaultValue": "undefined",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'e-commerce'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport { Store } from '@ngrx/store';\nimport {AppStates} from './app.states';\nimport {map} from 'rxjs/operators';\nimport {defaultLanguage} from './core/consts/consts';\nimport {UserDetails} from './auth/store/models/login.model';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'e-commerce';\n  selectedLanguage = undefined;\n\n  constructor(\n    private translateService: TranslateService,\n    private store: Store<AppStates>\n  ) {\n    this.store.select(\n      res => {\n        if (res && res['userLoginReducer'] && res['userLoginReducer']['userDetails']) {\n          return res['userLoginReducer']['userDetails'];\n        }\n      })\n      .pipe(\n        map((userDetails: UserDetails) => {\n          return userDetails;\n        })\n      ).subscribe((userDetailsData: UserDetails) => {\n        // 1. language was not defined from API and was not selected previously:\n        if (!userDetailsData || !userDetailsData.language && !this.selectedLanguage) {\n          this.selectedLanguage = defaultLanguage;\n          this.translateService.use(this.selectedLanguage);\n        } else if (userDetailsData.language && userDetailsData.language !== this.selectedLanguage) {\n          // 2. language was selected (switched):\n          this.selectedLanguage = userDetailsData.language;\n          this.translateService.use(this.selectedLanguage);\n        }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<!--The content below is only a placeholder and can be replaced.-->\n<app-header></app-header>\n\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CartCheckoutComponent",
            "id": "component-CartCheckoutComponent-6a931911dada07ef5c03d6e0e5c3269b",
            "file": "src/app/cart/components/cart-checkout/cart-checkout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./cart-checkout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-checkout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "approveModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "checkOutConfirmationStatus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "checkoutForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "confirmationModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "deleteProduct",
                    "type": "ItemList",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "deleteProductState",
                    "defaultValue": "{ action: undefined, state: undefined }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "deleteProductSubject",
                    "defaultValue": "new BehaviorSubject({action: undefined, state: undefined})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "errorModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "methodsOfPayment",
                    "defaultValue": "[\n    {\n      '_id': 1,\n      'paymentType': 'cash on delivery'\n    },\n    {\n      '_id': 2,\n      'paymentType': 'debit'\n    },\n    {\n      '_id': 3,\n      'paymentType': 'credit'\n    },\n    {\n      '_id': 4,\n      'paymentType': 'check'\n    }\n  ]",
                    "type": "PaymentDescription[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "modalCheckoutApprove",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "modalCheckoutConfirmation",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "payment",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "productsInCart$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "remove_item_confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'remove_item_confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "totalAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "totalAmountInCart$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "totalQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "closeCheckoutApproveModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "closeCheckoutConfirmationModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "getProductUrl",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "openCheckoutApproveModal",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemFromOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176
                },
                {
                    "name": "removeProductConfirmation",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ItemList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ItemList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTotalAmountInCart",
                    "args": [
                        {
                            "name": "totalAmount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "totalAmount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120
                },
                {
                    "name": "totalSum",
                    "args": [
                        {
                            "name": "price",
                            "type": ""
                        },
                        {
                            "name": "selectedQuantity",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 156,
                    "jsdoctags": [
                        {
                            "name": "price",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedQuantity",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {distinct, map} from 'rxjs/operators';\nimport {Component, OnInit, Inject, TemplateRef, ViewChild} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {GetCurrentOrderFromStore, CheckOut, RemoveFromCart} from '../../store/actions/cart.actions';\nimport { CartState, CurrentOrderInCart } from '../../store/states/cart.states';\nimport { Order, CheckoutInfo, PaymentMethods, PaymentDescription } from '../../models/cart.model';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport { SessionService } from '../../../core/services/session.service';\nimport { CartService } from '../../../core/services/cart.service';\nimport { Payments } from '../../enums/payments.enum';\n\nimport { BsModalService, BsModalRef, ModalDirective } from 'ngx-bootstrap/modal';\nimport {ItemList} from '../../models/cart.model';\nimport { selectItemListDetails, selectTotalAmountInCart } from '../../store/selectors/cart.selectors';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './cart-checkout.component.html',\n  styleUrls: ['./cart-checkout.component.scss']\n})\nexport class CartCheckoutComponent implements OnInit {\n  methodsOfPayment: PaymentDescription[] = [\n    {\n      '_id': 1,\n      'paymentType': 'cash on delivery'\n    },\n    {\n      '_id': 2,\n      'paymentType': 'debit'\n    },\n    {\n      '_id': 3,\n      'paymentType': 'credit'\n    },\n    {\n      '_id': 4,\n      'paymentType': 'check'\n    }\n  ];\n  totalAmountInCart$: Observable<number>;\n  productsInCart$: Observable<any>;\n  checkOutConfirmationStatus = false;\n  error = false;\n  private payment = {};\n  totalAmount: number;\n  totalQuantity: number;\n  checkoutForm: FormGroup;\n  deleteProduct: ItemList;\n  errorModal: BsModalRef | null;\n  approveModal: BsModalRef | null;\n  deleteProductState: { action: string; state: string; } = { action: undefined, state: undefined };\n  deleteProductSubject: BehaviorSubject<{action: string; state: string; }> = new BehaviorSubject({action: undefined, state: undefined});\n  confirmationModal: BsModalRef | null;\n\n  modalCheckoutApprove: BsModalRef | null;\n  modalCheckoutConfirmation: BsModalRef;\n  // selectedItemListDetails$: Observable<any>\n  @ViewChild('confirmation_template', {'static': false}) confirmation_template: ModalDirective;\n  @ViewChild('remove_item_confirmation_template', {'static': false}) remove_item_confirmation_template: ModalDirective;\n\n  constructor(private store: Store<CartState>,\n              private sessionService: SessionService,\n              private router: Router,\n              private cartService: CartService,\n              private modalService: BsModalService,\n              @Inject(FormBuilder) fb: FormBuilder) {\n\n    this.checkoutForm = fb.group({\n      payment_method_id: [null, Validators.minLength(50)]\n    });\n\n  }\n\n  ngOnInit() {\n\n    // app store for total amount\n    this.productsInCart$ = this.store.select( selectItemListDetails )\n      .pipe(\n        distinct(),\n        map((res: any) => {\n            return res\n          }\n        ));\n\n    this.totalAmountInCart$ = this.store.select( selectTotalAmountInCart ).pipe(\n      map((amountInCart: number) => {\n        this.setTotalAmountInCart(amountInCart);\n        return amountInCart;\n      } )\n    )\n\n    // checkout confirmation status\n    this.store.select( store => {\n      return store['cart'];\n    }).pipe(map(res => {\n      if (res && res.checkOutConfirmationStatus) {\n        return res.checkOutConfirmationStatus;\n      }\n    })).subscribe(cartInfo => {\n      this.checkOutConfirmationStatus = cartInfo;\n    });\n\n    if (this.sessionService.getTokenFromStorage() != null ) {\n      this.store.dispatch(new GetCurrentOrderFromStore());\n    }\n    else\n      this.router.navigate(['/login']);\n    this.cartService.getMethodsOfPayment()\n      .subscribe((res: any) => {\n          if (res.payments.length > 0) {\n            this.methodsOfPayment = res.payments;\n          }\n        },\n        err => console.error(err));\n  }\n\n  submitOrder() {\n\n    switch (this.checkoutForm.value.payment_method_id) {\n      case 'cash on delivery':\n        this.payment = Object.assign(this.payment, {payment_method_id: Payments.cash});\n        break;\n      case 'debit':\n        this.payment = Object.assign(this.payment, {payment_method_id: Payments.debit});\n        break;\n      case 'credit':\n        this.payment = Object.assign(this.payment, {payment_method_id: Payments.credit});\n        break;\n      case 'check':\n        this.payment = Object.assign(this.payment, {payment_method_id: Payments.check});\n        break;\n      default:\n        this.payment = Object.assign(this.payment, {payment_method_id: Payments.cash});\n    }\n\n    this.store.dispatch(new CheckOut(this.payment));\n    this.modalCheckoutConfirmation = this.modalService.show(this.confirmation_template);\n  }\n\n  openCheckoutApproveModal(template: TemplateRef<any>) {\n    this.modalCheckoutApprove = this.modalService.show(template, { class: 'modal-sm' });\n  }\n\n  closeCheckoutApproveModal() {\n    this.modalCheckoutApprove.hide();\n  }\n\n  closeCheckoutConfirmationModal() {\n    this.modalCheckoutConfirmation.hide();\n    this.closeCheckoutApproveModal()\n  }\n\n  totalSum(price, selectedQuantity) {\n    return Math.round(price * selectedQuantity * 100) / 100;\n  }\n\n  getProductUrl(product) {\n    if (product && product.imageList.length > 0) {\n      const url = product.imageList[0]['imageUrl'] ? product.imageList[0]['imageUrl'] :\n        product.imageList[0]['largeUrl'] ? product.imageList[0]['largeUrl'] : '/assets/images/teapod.jpeg';\n      return url;\n    } else if (product && product.imageList.length === 0) {\n      return  '/assets/images/teapod.jpeg';\n    }\n  }\n\n  removeProductConfirmation(template: TemplateRef<any>, deleteProduct: ItemList) {\n    this.deleteProduct = deleteProduct;\n    this.errorModal = null;\n    this.approveModal = this.modalService.show(template, { class: 'modal-lg' });\n  }\n\n  removeItemFromOrder() {\n    this.store.dispatch(new RemoveFromCart(\n      {\n        id : this.deleteProduct.id\n      }\n    ));\n    Object.assign(this.deleteProductState, { action: 'delete_product', state: 'no_errors' });\n    this.deleteProductSubject.next(this.deleteProductState);\n    this.approveModal.hide();\n  }\n\n  setTotalAmountInCart(totalAmount: number) {\n    this.payment = {amount: totalAmount};\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.checkout-confirmation {\n    font-size: 1.1rem;\n    color:white;\n    background: deepskyblue;\n    width: 100%;\n    /*margin: 1em 0 1em 0;*/\n    border-radius: 1em;\n}\n.checkout-verification-message {\n    background: deepskyblue;\n    color: white;\n    width: 100%;\n    font-size: 1.1em;\n    /*margin: 1em 0 1em 0;*/\n    border-radius: 1em;\n}\n.checkout-total {\n  box-shadow: -10px 10px 10px lightblue;\n  border-radius: 15px;\n  margin-top: 3px;\n  font-size: 1.5rem;\n}\n",
                    "styleUrl": "./cart-checkout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "cartService",
                        "type": "CartService"
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid default-page-background\">\n  <table class=\"cart__table cart-table\">\n    <thead class=\"cart-table__head\">\n    <tr class=\"cart-table__row\">\n      <th class=\"cart-table__column cart-table__column--image\">{{ 'checkout.image' | translate }}</th>\n      <th class=\"cart-table__column cart-table__column--product\">{{ 'checkout.product' | translate}}</th>\n      <th class=\"cart-table__column cart-table__column--price\">{{ 'checkout.price' | translate}}</th>\n      <th class=\"cart-table__column cart-table__column--quantity\">{{ 'checkout.quantity' | translate}}</th>\n      <th class=\"cart-table__column cart-table__column--total\">{{ 'checkout.total' | translate}}</th>\n      <th class=\"cart-table__column cart-table__column--remove\"></th>\n    </tr>\n    </thead>\n    <tbody class=\"cart-table__body\">\n    <tr *ngFor='let product of (productsInCart$ | async)' class=\"cart-table__row\">\n      <td class=\"cart-table__column cart-table__column--image\">\n        <!--      <a [routerLink]=\"root.product(item.cartItem.product.id)\" *ngIf=\"item.cartItem.product.images?.length\"><img [src]=\"item.cartItem.product.images[0]\" alt=\"\"></a>-->\n        <img class=\"product-image\" [src]=\"getProductUrl(product.product.productInfo)\"\n             onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\" alt=\"image of {{product.product.name}}\">\n      </td>\n      <td class=\"cart-table__column cart-table__column--product\">\n        <div class=\"col-sm-12 col-md-12 product-description\">\n          {{product.product.description}}\n        </div>\n        <!--      <a [routerLink]=\"root.product(item.cartItem.product.id)\" class=\"cart-table__product-name\">{{ item.cartItem.product.name }}</a>-->\n        <!--      <ul *ngIf=\"item.cartItem.options.length\" class=\"cart-table__options\">-->\n        <!--        <li *ngFor=\"let option of item.cartItem.options\">{{ option.name }}: {{ option.value }}</li>-->\n        <!--      </ul>-->\n      </td>\n      <td class=\"cart-table__column cart-table__column--price\" data-title=\"Price\">\n        <div class=\"col-4 product-price\">\n          $ {{product.product.price}}\n        </div>\n      </td>\n      <td class=\"cart-table__column cart-table__column--quantity\" data-title=\"Quantity\">\n        <div class=\"col-4 product-price\">\n          {{product.quantity}} pcs\n        </div>\n      </td>\n      <td class=\"cart-table__column cart-table__column--total\" data-title=\"Total\">\n        <div class=\"col-4 product-price\">\n          $ {{ totalSum(product.product.price, product.quantity) }}\n        </div>\n      </td>\n          <td class=\"cart-table__column cart-table__column--remove\">\n            <div class=\"col-2 text-right\">\n              <button type=\"button\" class=\"close\" aria-label=\"Close\"\n                (click)=\"removeProductConfirmation(remove_item_approval_template, product)\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n          </td>\n    </tr>\n    </tbody>\n  </table>\n\n  <div class=\"row justify-content-end pt-5\">\n    <div class=\"col-12 col-md-7 col-lg-6 col-xl-5\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h3 class=\"card-title\">{{ 'checkout.cartTotals' | translate }}</h3>\n          <table class=\"cart__totals\">\n            <thead *ngIf=\"(totalAmountInCart$ | async) as totalAmount\" class=\"cart__totals-header\">\n              <tr>\n                <th>{{ 'checkout.subtotal' | translate }}</th>\n                <td>$ {{totalAmount}}</td>\n              </tr>\n            </thead>\n            <tbody *ngIf=\"totalAmount\" class=\"cart__totals-body\">\n            </tbody>\n            <tfoot class=\"cart__totals-footer\">\n              <tr>\n                <th>{{ 'checkout.total' | translate }}</th>\n                <td>$ {{totalAmount}}</td>\n              </tr>\n              <tr>\n                <th>\n                  <form *ngIf='!checkOutConfirmationStatus' [formGroup]=\"checkoutForm\" class=\"submit-order-form\">\n                    <div class=\"form-group\">\n                      <label for=\"methodPayment\">{{ 'checkout.selectMethod' | translate }}</label>\n                      <select formControlName=\"payment_method_id\" class=\"form-control\" name=\"payment_method_id\" id=\"methodPayment\">\n                        <option selected>{{'generic.dropDownSelect' | translate}}</option>\n                        <option *ngFor=\"let method of methodsOfPayment\">\n                          {{ method.paymentType | translate }}\n                        </option>\n                      </select>\n                    </div>\n                    <button type=\"submit\"  class=\"btn btn-primary btn-block\" (click)=\"openCheckoutApproveModal(approval_template)\">{{ 'checkout.submitOrder' | translate }}</button>\n                  </form>\n                </th>\n                <th>\n                  <div class=\"text-center checkout-confirmation\" *ngIf='checkOutConfirmationStatus'>Thank you! Your order has been accepted!</div>\n                </th>\n              </tr>\n            </tfoot>\n          </table>\n<!--          <a class=\"btn btn-primary btn-xl btn-block cart__checkout-button\" routerLink=\"../checkout\">Proceed to checkout</a>-->\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #approval_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">{{ 'checkout.orderSubmission' | translate }}</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close approve submit modal\" (click)=\"closeCheckoutApproveModal()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    {{ 'checkout.submissionConfirmation' | translate }}\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"submitOrder()\">{{ 'checkout.submitOrder' | translate }}</button>\n  </div>\n</ng-template>\n\n<ng-template #confirmation_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">{{ 'checkout.submitOrder' | translate }}</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close submit order confirmation\" (click)=\"closeCheckoutConfirmationModal()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    {{ 'checkout.orderAcceptedMsg' | translate }}<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"closeCheckoutConfirmationModal()\">{{ 'checkout.ok' | translate }}</button>\n  </div>\n</ng-template>\n\n<!--<alert type=\"danger\" *ngIf='error'>\n  <strong>Something went wrong. Please login again. <a routerLink=\"/logout\"> Login </a> </strong>\n</alert>-->\n\n<ng-template #remove_item_approval_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">{{ 'checkout.approval' | translate }}</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Cancel removal from shopping cart\" (click)=\"approveModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>Please confirm you want to remove \"{{deleteProduct.product.name}}\" from your order.</p>\n<!--    <p>{{ 'checkout.confirmDeleteItem' | translate }}</p>-->\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeItemFromOrder()\">Remove from order</button>\n  </div>\n</ng-template>\n\n<ng-template #remove_item_confirmation_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Confirmation</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close modal of removal from shopping cart\" (click)=\"confirmationModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    Product has been removed from shopping cart<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirmationModal.hide()\" (click)=\"approveModal.hide()\">Ok</button>\n  </div>\n</ng-template>\n\n\n<ng-template #error_modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Error message</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close error message\" (click)=\"errorModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    Sorry, there was an error.\n    We are unable to remove the item from shopping cart at the moment.<br>\n    Please try again later or contact administrator.<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"errorModal.hide()\" >Ok</button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "CartDetailsComponent",
            "id": "component-CartDetailsComponent-e8549db726878dff8b5cc32d0a77c294",
            "file": "src/app/cart/components/cart-details/cart-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./cart-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "approveModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "confirmationModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "deleteProduct",
                    "type": "ProductDetails",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "deleteProductState",
                    "defaultValue": "{action: undefined, state: undefined }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "deleteProductSubject",
                    "defaultValue": "new BehaviorSubject({action: undefined, state: undefined })",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "error_modal",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'error_modal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "errorModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "productsInCart",
                    "type": "Observable<Order>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProductConfirmation",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ProductDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ProductDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductUrl",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "removeItemFromOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "totalSum",
                    "args": [
                        {
                            "name": "price",
                            "type": ""
                        },
                        {
                            "name": "selectedQuantity",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "price",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedQuantity",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\n\nimport {  RemoveFromCart } from '../../store/actions/cart.actions';\nimport { CartState } from '../../store/states/cart.states';\nimport { Order } from '../../models/cart.model';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport { SessionService } from '../../../core/services/session.service';\nimport { RemoveItemFromProductList } from '../../../products/store/actions/products.actions';\nimport {ProductDetails} from '../../../products/store/models/products.model';\nimport { BsModalService, BsModalRef, ModalDirective } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './cart-details.component.html',\n  styleUrls: ['./cart-details.component.scss']\n})\nexport class CartDetailsComponent implements OnInit {\n\n  public productsInCart: Observable<Order>;\n  public error = false;\n  @ViewChild('confirmation_template', {'static': false}) confirmation_template: ModalDirective;\n  @ViewChild('error_modal', {'static': false}) error_modal: ModalDirective;\n  approveModal: BsModalRef | null;\n  confirmationModal: BsModalRef | null;\n  errorModal: BsModalRef | null;\n  deleteProduct: ProductDetails;\n  deleteProductState: {action: string; state: string; } = {action: undefined, state: undefined };\n  deleteProductSubject: BehaviorSubject<{action: string; state: string; }> = new BehaviorSubject({action: undefined, state: undefined });\n\n  constructor(private store: Store<CartState>,\n              private sessionService: SessionService,\n              private router: Router,\n              private bsModalService: BsModalService) {\n    this.store.select( store => {\n        if (store && store['userLoginReducer'] ) {\n          if (store['userLoginReducer']['errorLoading']  && store['userLoginReducer']['errorLoading']['error_message'] === 'remove_product_error') {\n            Object.assign(this.deleteProductState, { state: 'delete_product_error' });\n          } else {\n            Object.assign(this.deleteProductState, { state: 'no_errors' });\n          }\n          this.deleteProductSubject.next(this.deleteProductState);\n        }\n\n        if (store && store['cart']) {\n          return store['cart'];\n        }\n      }\n    ).pipe(map(data => {\n        if (data) {\n          return data.currentOrderInCart;\n        }\n    })).subscribe(res => {\n      this.productsInCart = res.itemList;\n    });\n  }\n\n  ngOnInit() {\n    // if (this.sessionService.getTokenFromStorage() != null ) {\n    //   this.store.dispatch(new GetCurrentOrderFromStore());\n    // }\n    // else\n    //   this.router.navigate(['/login']);\n    this.deleteProductSubject.subscribe( (status: any) => {\n\n      if (status.state === 'delete_product_error' && status.action == 'delete_product') {\n\n        if (this.confirmationModal) {\n          this.confirmationModal.hide();\n        }\n        if (this.approveModal) {\n          this.approveModal.hide();\n        }\n        if (!this.errorModal) {\n          this.errorModal = this.bsModalService.show(this.error_modal, {class: 'modal-lg'});\n        } else {\n        }\n\n      } else if (status.state === 'no_error' && status.action === 'delete_product') {\n        if(this.errorModal) {this.errorModal.hide()}\n        if(!this.confirmationModal) {this.confirmationModal = this.bsModalService.show(this.confirmation_template, { class: 'modal-lg' })}\n      }\n\n      else {\n\n      }\n\n    });\n  }\n\n  totalSum(price, selectedQuantity) {\n    return Math.round(price * selectedQuantity * 100)/100;\n  }\n\n  removeItemFromOrder() {\n    this.store.dispatch(new RemoveFromCart(\n      {\n        id : this.deleteProduct.id\n      }\n    ));\n    Object.assign(this.deleteProductState, { action: 'delete_product', state: 'no_errors' });\n    this.deleteProductSubject.next(this.deleteProductState);\n  }\n\n  deleteProductConfirmation(template: TemplateRef<any>, deleteProduct: ProductDetails) {\n    this.deleteProduct = deleteProduct;\n    this.errorModal = null;\n    this.approveModal = this.bsModalService.show(template, { class: 'modal-lg' });\n  }\n\n  getProductUrl(product) {\n    if (product && product.imageList.length > 0) {\n      const url = product.imageList[0]['imageUrl'] ? product.imageList[0]['imageUrl'] :\n        product.imageList[0]['largeUrl'] ? product.imageList[0]['largeUrl'] : '/assets/images/teapod.jpeg';\n      console.log(url);\n      return url;\n    } else if(product && product.imageList.length === 0) {\n      return  '/assets/images/teapod.jpeg';\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cart-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "bsModalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid default-page-background\">\n  <div class=\"row\" *ngFor='let product of productsInCart'>\n    <div class=\"col-10 product-name text-center\">\n      {{product.product.name}}\n    </div>\n    <div class=\"col-2 text-right\">\n      <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"deleteProductConfirmation(approval_template, product.product)\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <div class=\"col-lg-12\">\n      <div class=\"row thumbnail product-card\">\n        <div class=\"col-sm-12 col-md-4 text-center\">\n            <img class=\"product-image\" [src]=\"getProductUrl(product.product.productInfo)\"\n               onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\" alt=\"image of {{product.product.name}}\">\n        </div>\n        <div class=\"col-sm-12 col-md-8\">\n          <div class=\"container-fluid\">\n            <div class=\"row\">\n\n              <div class=\"col-12 product-description\">\n                {{product.product.description}}\n              </div>\n\n              <div class=\"col-12\">\n                <div class=\"row\">\n                  <div class=\"col-4 product-price\">\n                    {{product.product.price}}\n                  </div>\n\n                  <div class=\"col-4 product-price\">\n                    {{product.quantity}}\n                  </div>\n\n                  <div class=\"col-4 product-price\">\n                    $ {{ totalSum(product.product.price, product.quantity) }}\n                  </div>\n              </div>\n              </div>\n\n            </div>\n            <div class=\"row\">\n              <span class=\"align-bottom product-rating\">\n                <i class=\"glyphicon glyphicon-star-empty\"></i>\n                <i class=\"glyphicon glyphicon-star-empty\"></i>\n                <i class=\"glyphicon glyphicon-star-empty\"></i>\n                <i class=\"glyphicon glyphicon-star-empty\"></i>\n                <i class=\"glyphicon glyphicon-star-empty\"></i>\n              </span>\n            </div>\n          </div>\n        </div>\n          <div class=\"sm-screen-product-divider\" *ngIf=\"!isLast\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #approval_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Approval</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Cancel removal from shopping cart\" (click)=\"approveModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>Please confirm you want to remove \"{{deleteProduct.name}}\" from your order.</p>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeItemFromOrder()\">Remove from order</button>\n  </div>\n</ng-template>\n\n<ng-template #confirmation_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Confirmation</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close modal of removal from shopping cart\" (click)=\"confirmationModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    Product has been removed from shopping cart<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirmationModal.hide()\" (click)=\"approveModal.hide()\">Ok</button>\n  </div>\n</ng-template>\n\n\n<ng-template #error_modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Error message</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close error message\" (click)=\"errorModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    Sorry, there was an error.\n    We are unable to remove the item from shopping cart at the moment.<br>\n    Please try again later or contact administrator.<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"errorModal.hide()\" >Ok</button>\n  </div>\n</ng-template>\n\n<!--<alert type=\"danger\" *ngIf='error'>\n  <strong>Something went wrong. Please login again. <a routerLink=\"/logout\"> Login </a> </strong>\n</alert>-->\n\n"
        },
        {
            "name": "CreateProductComponent",
            "id": "component-CreateProductComponent-e669eea8f2be5e4fa0ade4471d3ff2d9",
            "file": "src/app/products/components/create-product/create-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./create-product.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppStates } from '../../../app.states';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  templateUrl: './create-product.component.html',\n  styleUrls: ['./create-product.component.css']\n})\nexport class CreateProductComponent implements OnInit {\n\n    constructor(private router: Router,\n                private store: Store<AppStates> ) {\n\n        this.store.select(\n          res => {\n            if (res && res['productsReducer']) {\n              return res['productsReducer'];\n            }\n          }\n        ).pipe(\n          map(v => {\n            if (v) {\n              return v.storeData;\n            }\n          })\n        ).subscribe(\n          res => {\n            console.log('create product res: ', res);\n          },\n          err => console.log(err)\n        );\n\n      }\n\n      ngOnInit() {\n      }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-product.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-98ef19c42e81ecce9db28c07c9bb1be1-1",
            "file": "src/app/layout/header/components/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "checkOutConfirmationStatus$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isCollapsed",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isCollapsedSellerConsole",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isCollapsedUserAccount",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "languages",
                    "defaultValue": "languages",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "screenSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectedLanguage",
                    "defaultValue": "'en'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "user",
                    "defaultValue": "undefined",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "onLanguageSelect",
                    "args": [
                        {
                            "name": "lang",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, RoutesRecognized } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppStates } from '../../../app.states';\nimport { SessionService } from '../../../core/services/session.service';\nimport { SelectLanguageAction } from '../../../auth/store/actions/login.actions';\nimport { languages} from '../../../core/consts/consts';\nimport {UserDetails} from '../../../auth/store/models/login.model';\nimport {TranslateService} from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  cart$: Observable<any>;\n  isCollapsed = true;\n  isCollapsedSellerConsole = true;\n  isCollapsedUserAccount = true;\n  checkOutConfirmationStatus$: Observable<any>;\n  user = undefined;\n  currentUrl: string;\n  languages: string[] = languages;\n  selectedLanguage = 'en';\n\n  screenSize: number;\n\n  constructor(private sessionService: SessionService,\n              private store: Store<AppStates>,\n              private router: Router,\n              private route: ActivatedRoute,\n              private translateService: TranslateService) {\n    // user properties for header\n    this.store.select(res => {\n        if (res && res['userLoginReducer'] && res['userLoginReducer']['userDetails']) {\n          return res['userLoginReducer']['userDetails'];\n        }\n      }).pipe(\n        map((userDetails: UserDetails) => {\n          return userDetails;\n        })\n      ).subscribe(resp => {\n        this.user = resp;\n    });\n    // cart properties for header\n    this.cart$ = this.store.select( store => {\n      return store['cart'];\n    }).pipe(map((res: any) => {\n      if (res && res.currentOrderInCart) {\n        return res.currentOrderInCart;\n      }\n    }));\n\n    this.checkOutConfirmationStatus$ = this.store.select( (store: any) => {\n      return store['cart'];\n    }).pipe(map(res => {\n      if (res && res.checkOutConfirmationStatus) {\n        return res.checkOutConfirmationStatus;\n      }\n    }));\n\n    this.router.events.subscribe(currentRoute => {\n      if (currentRoute instanceof RoutesRecognized) {\n        switch (currentRoute.urlAfterRedirects.split('/')[1]) {\n          case 'products':\n            this.currentUrl = 'Products';\n            break;\n          case 'details':\n            this.currentUrl = 'Details';\n            break;\n          case 'register':\n            this.currentUrl = 'Register';\n            break;\n          case 'cart':\n            this.currentUrl = 'Cart';\n            break;\n          case 'checkout':\n            this.currentUrl = 'Checkout';\n            break;\n          case 'login':\n            this.currentUrl = 'Login';\n            break;\n          default:\n            this.currentUrl = 'Products';\n            break;\n        }\n      }\n    });\n  }\n\n  ngOnInit() {\n\n  }\n\n  onLanguageSelect(lang) {\n    this.store.dispatch(new SelectLanguageAction(lang));\n  }\n\n  logout() {\n    this.sessionService.logout();\n  }\n\n  onResize() {\n    this.screenSize = window.innerWidth;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.custom-navbar-image {\n  height: 65px;\n}\n.custom-navbar-label {\n  color:dodgerblue;\n}\n.custom-navbar-image:hover {\n  animation-duration: .5s;\n  animation-name: rotate;\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes open-menu {\n   from {transform:rotate(0deg);}\n   to {transform:rotate(90deg);}\n }\n.open-menu-button {\n  animation-name: open-menu;\n  animation-duration: 0.4s;\n  transform:rotate(90deg);\n  border: none;\n}\n// .open-menu-button:hover {\n//   background-image: linear-gradient(to right bottom, #ffffff, rgba(52, 152, 219, 0.5));\n// }\n/* mobile menu button open & close */\n@keyframes close-menu-button {\n  from {transform:rotate(90deg);}\n  to {transform:rotate(0deg);}\n}\n.close-menu-button {\n  animation-name: close-menu-button;\n  height: 50px;\n  width: 55px;\n  animation-duration: 0.4s;\n  transform:rotate(0deg);\n  border: none;\n}\n\n@keyframes open-menu-button {\n  from {transform:rotate(0deg);}\n  to {transform:rotate(90deg);}\n}\n.open-menu-button {\n  animation-name: open-menu-button;\n  height: 50px;\n  width: 55px;\n  animation-duration: 1s;\n  transform:rotate(90deg)\n}\n\n/* mobile menu open & close */\n\n@keyframes close-menu {\n  from {height: auto;}\n  to   {height: 0px; }\n}\n.close-menu {\n  animation-name: close-menu;\n  animation-duration: 0s;\n  height: 0px;\n}\n@keyframes open-menu {\n  from {height: 0px;  }\n  to   {height: auto; }\n}\n\n.nav-custom-styles {\n  box-shadow: 1px 1px 5px lightgrey;\n  box-shadow: -10px -10px 10px #bedff6;\n}\n.nav-custom-login-styles {\n  background-image: linear-gradient(to right bottom, #ffffff, rgba(52, 152, 219, 0.5));\n  box-shadow: 1px 1px 5px lightgrey;\n  box-shadow: -10px -10px 10px #bedff6;\n}\n\n.header-custom {\n  position: sticky;\n  top:0;\n  z-index: 3;\n}\n\n@media only screen and (max-width: 975px) {\n}\n\n.shopping_cart_total {\n  width: 51px\n}\n\n.selected-page {\n  text-align: center;\n  background-color: darkseagreen;\n  color: white;\n  font-weight: bold;\n}\n\n.selected-page-link {\n  color: white;\n}\n\n.none-selected-page {\n  text-align: center;\n  background: #bedff6;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"header-custom\" (window:resize)=\"onResize()\" #detector>\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light sticky-top nav-custom-styles\"\n       [ngClass]=\"{'nav-custom-styles': currentUrl != 'Login' && currentUrl != 'Register',\n       'nav-custom-login-styles': currentUrl == 'Login' || currentUrl == 'Register'}\">\n    <a class=\"navbar-brand custom-navbar-label\" [routerLink]=\"['/products']\">\n      <img class=\"custom-navbar-image\" src=\"assets/images/20190601_154728.png\"/>\n      <!--<span class=\"hidden-md-down\">e-commerce</span>-->\n    </a>\n    <a *ngIf=\"(cart$ | async) && !(checkOutConfirmationStatus$ | async)\" [routerLink]=\"['/checkout']\" class=\"nav-link-custom nav-link nav-item\">\n      <div class=\"shopping-cart\">\n        <div>\n          <img src=\"assets/images/shopping_cart_total.png\" alt=\"total amount in shopping cart\" class=\"shopping_cart_total\">\n        </div>\n        <div class=\"total-in-cart\">\n          <i class=\"in-cart-total\"> $ {{(cart$ | async)?.totalAmount}}</i>\n          <i class=\"in-cart-quantity\"> {{(cart$ | async)?.totalQuantity}} pcs</i>\n        </div>\n      </div>\n    </a>\n    <button class=\"navbar-toggler\" [ngClass]=\"{'open-menu-button' : !isCollapsed, 'close-menu-button': isCollapsed}\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"  (click)=\"isCollapsed = !isCollapsed\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <!-- Collect the nav links, forms, and other content for toggling -->\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" [collapse]=\"isCollapsed\" [isAnimated]=\"true\" *ngIf=\"currentUrl != 'Login' && currentUrl != 'Register'\" >\n      <app-upper-header></app-upper-header>\n      <ul class=\"navbar-nav mr-auto navbar-custom\">\n        <!--User Account console menu-->\n        <!--1. for Desktop-->\n        <li class=\"d-none d-lg-block\">\n          <div class=\"btn-group\" dropdown [insideClick]=\"true\">\n            <button id=\"button-dropdown-user-account\" dropdownToggle type=\"button\" class=\"btn dropdown-toggle custom-drop-down\"\n                    aria-controls=\"dropdown-user-account\">\n              <i class=\"far fa-lg fa-user\"></i>\n            </button>\n            <ul id=\"dropdown-user-account\" *dropdownMenu class=\"dropdown-menu\"\n                role=\"menu\" aria-labelledby=\"button-dropdown-user-account\">\n              <li class=\"nav-item\">\n                <span class=\"d-flex p-2 user-greeting\">{{ user?.userName }}</span>\n              </li>\n              <li *ngIf=\"user\" class=\"nav-item\">\n                <a  [routerLink]=\"['/placed-orders']\" class=\"nav-link\"><span class=\"d-flex p-2 user-greeting\">{{ 'checkout.placedOrders' | translate }}</span></a>\n              </li>\n              <li class=\"divider dropdown-divider\"></li>\n              <li *ngIf=\"user?.userName\" class=\"nav-item\"><a routerLink=\"/logout\" class=\"nav-link\">{{ 'header.logout' | translate }}</a></li>\n            </ul>\n          </div>\n        </li>\n        <!--2. for Mobile-->\n        <li class=\"nav-item dropdown d-block d-lg-none \">\n          <button id=\"button-collapse-user-account\" class=\"custom-drop-down\" type=\"button\" data-toggle=\"collapse\" data-target=\"#dropdown-basic\" aria-controls=\"dropdown-basic\" aria-expanded=\"false\" aria-label=\"seller console\"\n                  (click)=\"isCollapsedUserAccount = !isCollapsedUserAccount\">\n            {{ 'header.userAccount' | translate }} <span class=\"caret-right\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"user-account\" [collapse]=\"isCollapsedUserAccount\" [isAnimated]=\"true\">\n            <ul id=\"collapse-user-account\" class=\"navbar-nav mr-auto navbar-custom custom-menu-dropdown\">\n              <li *ngIf=\"user\" class=\"nav-item\">\n                <span class=\"d-flex p-2 user-greeting\">{{ user?.userName }}</span>\n              </li>\n              <li class=\"language-collapse\">\n                {{ 'header.language' | translate }}\n                <select class=\"language-selector\" id=\"languageSelectorMobile\"\n                        [ngModel]=\"selectedLanguage\"\n                        (ngModelChange)=\"onLanguageSelect($event)\">\n                  <option *ngFor=\"let language of languages\">{{language}}</option>\n                </select>\n              </li>\n              <li class=\"divider dropdown-divider\"></li>\n              <li *ngIf=\"user?.userName\" class=\"nav-item\"><a routerLink=\"/logout\" class=\"nav-link\">{{ 'header.logout' | translate }}</a></li>\n            </ul>\n          </div>\n        </li>\n        <!-- Seller console menu -->\n        <!--1. for Desktop-->\n        <li class=\"d-none d-lg-block\">\n          <div class=\"btn-group\" dropdown>\n            <button id=\"button-dropdown-seller-console\" dropdownToggle type=\"button\" class=\"btn dropdown-toggle custom-drop-down\"\n                    aria-controls=\"dropdown-seller-console\">\n              {{ 'header.sellerConsole' | translate }}  <span class=\"caret\"></span>\n            </button>\n            <ul id=\"dropdown-seller-console\" *dropdownMenu class=\"dropdown-menu\"\n                role=\"menu\" aria-labelledby=\"button-dropdown-seller-console\">\n              <li *ngIf=\"user?.userName\" class=\"\"><a  [routerLink]=\"['/create-product']\" class=\"nav-link\">{{ 'header.createProduct' | translate }}</a></li>\n            </ul>\n          </div>\n        </li>\n        <!--2. for Mobile-->\n        <li class=\"nav-item dropdown d-block d-lg-none \">\n          <button id=\"button-collapse-seller-console\" class=\"custom-drop-down\" type=\"button\" data-toggle=\"collapse\" data-target=\"#dropdown-basic\" aria-controls=\"dropdown-basic\" aria-expanded=\"false\" aria-label=\"seller console\"\n                  (click)=\"isCollapsedSellerConsole = !isCollapsedSellerConsole\">\n            {{ 'header.sellerConsole' | translate }} <span class=\"caret-right\"></span>\n          </button>\n          <div class=\"collapse navbar-collapse\" id=\"seller-console\" [collapse]=\"isCollapsedSellerConsole\" [isAnimated]=\"true\">\n            <ul id=\"collapse-seller-console\" class=\"navbar-nav mr-auto navbar-custom custom-menu-dropdown\">\n              <li *ngIf=\"user?.userName\" class=\"\"><a  [routerLink]=\"['/create-product']\" class=\"nav-link\">{{ 'header.createProduct' | translate }}</a></li>\n            </ul>\n          </div>\n        </li>\n        <li id=\"lang-logout-block\" class=\"nav-item dropdown d-block d-lg-none \">\n          <ul  class=\"navbar-nav mr-auto navbar-custom custom-menu-dropdown\">\n            <li class=\"language-collapse\">\n              {{ 'header.language' | translate }}\n              <select class=\"language-selector\" id=\"languageSelectorMobile\"\n                      [ngModel]=\"selectedLanguage\"\n                      (ngModelChange)=\"onLanguageSelect($event)\">\n                <option *ngFor=\"let language of languages\">{{language}}</option>\n              </select>\n            </li>\n            <li *ngIf=\"user?.userName\" class=\"nav-item\"><a href=\"/logout\" class=\"nav-link\">{{ 'header.logout' | translate }}</a></li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </nav>\n</div>\n\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-4c0352835df4ba58d14a1990855c7544",
            "file": "src/app/shared/components/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "size",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "height",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "width",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-icon',\r\n    templateUrl: './icon.component.html',\r\n    styleUrls: ['./icon.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class IconComponent {\r\n    id: string;\r\n    width: string;\r\n    height: string;\r\n\r\n    @Input() set name(value: string) {\r\n        this.id = value;\r\n    }\r\n\r\n    @Input() set size(value: string) {\r\n        const result = /^([0-9]+)(?:x([0-9]+))?$/.exec(value);\r\n\r\n        if (result) {\r\n            if (result[2]) {\r\n                this.width = result[1] + 'px';\r\n                this.height = result[2] + 'px';\r\n            } else {\r\n                this.width = this.height = result[1] + 'px';\r\n            }\r\n        } else {\r\n            this.width = this.height = null;\r\n        }\r\n    }\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: block;\r\n}\r\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<svg [attr.width]=\"width\" [attr.height]=\"height\"><use [attr.xlink:href]=\"'assets/images/sprite.svg#' + id\"></use></svg>\r\n"
        },
        {
            "name": "InputNumberComponent",
            "id": "component-InputNumberComponent-dbbf6c02e62f1d7e3a9a9153b3b2d45e",
            "file": "src/app/shared/components/input-number/input-number.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputNumberComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input-number",
            "styleUrls": [
                "./input-number.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-number.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 51,
                    "type": "boolean"
                },
                {
                    "name": "max",
                    "line": 47,
                    "type": "number"
                },
                {
                    "name": "min",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "readonly",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "line": 37,
                    "type": "\"sm\" | \"lg\""
                },
                {
                    "name": "step",
                    "line": 39,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputElementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputElement', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "options",
                    "defaultValue": "{\r\n        step: 1,\r\n        min: null,\r\n        max: null,\r\n        disabled: false,\r\n        readonly: false\r\n    }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "direction",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "description": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2761,
                                "end": 2770,
                                "flags": 0,
                                "escapedText": "direction"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 2755,
                                "end": 2760,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>one of [-1, 1]</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "changeByTimer",
                    "args": [
                        {
                            "name": "direction",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "description": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3327,
                                "end": 3336,
                                "flags": 0,
                                "escapedText": "direction"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 3321,
                                "end": 3326,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>one of [-1, 1]</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "input",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sub",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.input-number",
                    "defaultValue": "true",
                    "line": 35
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, forwardRef, HostBinding, Input, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nfunction parseNumber<T>(value: any, def: T): number|T {\r\n    if (typeof value === 'string') {\r\n        value = parseFloat(value);\r\n    } else if (typeof value !== 'number') {\r\n        value = def;\r\n    }\r\n\r\n    return isNaN(value) ? def : value;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-input-number',\r\n    templateUrl: './input-number.component.html',\r\n    styleUrls: ['./input-number.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => InputNumberComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class InputNumberComponent implements ControlValueAccessor {\r\n    options = {\r\n        step: 1,\r\n        min: null,\r\n        max: null,\r\n        disabled: false,\r\n        readonly: false\r\n    };\r\n\r\n    @HostBinding('class.input-number') class = true;\r\n\r\n    @Input() size: 'sm'|'lg' = null;\r\n\r\n    @Input() set step(value: number) {\r\n        this.options.step = parseNumber(value, 1);\r\n    }\r\n\r\n    @Input() set min(value: number) {\r\n        this.options.min = parseNumber(value, null);\r\n    }\r\n\r\n    @Input() set max(value: number) {\r\n        this.options.max = parseNumber(value, null);\r\n    }\r\n\r\n    @Input() set disabled(value: boolean) {\r\n        this.options.disabled = !!value;\r\n    }\r\n\r\n    @Input() set readonly(value: boolean) {\r\n        this.options.readonly = !!value;\r\n    }\r\n\r\n    @ViewChild('inputElement', { static: true }) inputElementRef: ElementRef;\r\n\r\n    get inputElement(): HTMLInputElement {\r\n        return this.inputElementRef.nativeElement;\r\n    }\r\n\r\n    get value(): ''|number {\r\n        return this.inputElement.value === '' ? '' : parseFloat(this.inputElement.value);\r\n    }\r\n    set value(value: ''|number) {\r\n        this.writeValue(value);\r\n    }\r\n\r\n    onChange = (_: any) => {};\r\n    onTouched = () => {};\r\n\r\n    constructor() { }\r\n\r\n    add(): void {\r\n        this.change(1);\r\n        this.changeByTimer(1);\r\n    }\r\n\r\n    sub(): void {\r\n        this.change(-1);\r\n        this.changeByTimer(-1);\r\n    }\r\n\r\n    input(): void {\r\n        this.onChange(this.value);\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (typeof obj === 'number') {\r\n            this.inputElement.value = obj.toString();\r\n        } else {\r\n            this.inputElement.value = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param direction - one of [-1, 1]\r\n     */\r\n    private change(direction: number): void {\r\n        let value = (this.value === '' || isNaN(this.value) ? 0 : this.value) + this.options.step * direction;\r\n\r\n        if (this.options.max !== null) {\r\n            value = Math.min(this.options.max, value);\r\n        }\r\n        if (this.options.min !== null) {\r\n            value = Math.max(this.options.min, value);\r\n        }\r\n\r\n        if (value !== this.value) {\r\n            this.onChange(value);\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param direction - one of [-1, 1]\r\n     */\r\n    private changeByTimer(direction: number): void {\r\n        let interval;\r\n        const timer = setTimeout(() => {\r\n            interval = setInterval(() => this.change(direction), 50);\r\n        }, 300);\r\n\r\n        const documentMouseUp = () => {\r\n            clearTimeout(timer);\r\n            clearInterval(interval);\r\n\r\n            document.removeEventListener('mouseup', documentMouseUp, false);\r\n        };\r\n\r\n        document.addEventListener('mouseup', documentMouseUp, false);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input-number.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 73
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "step": {
                    "name": "step",
                    "setSignature": {
                        "name": "step",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "min": {
                    "name": "min",
                    "setSignature": {
                        "name": "min",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "inputElement": {
                    "name": "inputElement",
                    "getSignature": {
                        "name": "inputElement",
                        "type": "",
                        "returnType": "HTMLInputElement",
                        "line": 61
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "\"\" | number",
                        "line": 65
                    }
                }
            },
            "templateData": "<input class=\"form-control input-number__input\" type=\"number\"\r\n       [ngClass]=\"{'form-control-sm': size === 'sm', 'form-control-lg': size === 'lg'}\"\r\n       [min]=\"options.min\"\r\n       [max]=\"options.max\"\r\n       [value]=\"value\"\r\n       [disabled]=\"options.disabled\"\r\n       [readOnly]=\"options.readonly\"\r\n       (input)=\"input()\"\r\n       (blur)=\"onTouched()\" #inputElement>\r\n\r\n<div class=\"input-number__add\" (mousedown)=\"add()\"></div>\r\n<div class=\"input-number__sub\" (mousedown)=\"sub()\"></div>\r\n"
        },
        {
            "name": "LoadingBarComponent",
            "id": "component-LoadingBarComponent-11dd1b6a696991535874e0fac58ab57f",
            "file": "src/app/shared/components/loading-bar/loading-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-bar",
            "styleUrls": [
                "./loading-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bar",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'bar', {static: false}"
                        }
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, NgZone, OnDestroy, ViewChild } from '@angular/core';\r\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'app-loading-bar',\r\n    templateUrl: './loading-bar.component.html',\r\n    styleUrls: ['./loading-bar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LoadingBarComponent implements AfterViewInit, OnDestroy {\r\n    private destroy$: Subject<void> = new Subject();\r\n\r\n    @ViewChild('bar', { static: false }) bar: ElementRef;\r\n\r\n    get element(): HTMLElement {\r\n        return this.bar.nativeElement;\r\n    }\r\n\r\n    constructor(private router: Router, private zone: NgZone) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.router.events.pipe(takeUntil(this.destroy$)).subscribe(event => {\r\n                if (event instanceof NavigationStart) {\r\n                    this.element.classList.remove('loading-bar--start', 'loading-bar--complete', 'loading-bar--reset');\r\n                    this.element.getBoundingClientRect(); // force reflow\r\n                    this.element.classList.add('loading-bar--start');\r\n                }\r\n\r\n                if (event instanceof NavigationEnd || event instanceof NavigationError || event instanceof NavigationCancel) {\r\n                    if (this.element.classList.contains('loading-bar--start')) {\r\n                        this.element.classList.remove('loading-bar--start');\r\n                        this.element.classList.add('loading-bar--complete');\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loading-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 17
                    }
                }
            },
            "templateData": "<div class=\"loading-bar\" #bar>\r\n    <div class=\"loading-bar__inner\"></div>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-f34df0b5723f328b373c26b60513c277",
            "file": "src/app/auth/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "ErrorMessage",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "userName$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "ws_message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "submitWsMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport {Component, Inject, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { getAuthSelector, loginUserDetailsMapper, loginErrorMapper } from '../../store/select/auth.selectors';\nimport { UserCredentials } from '../../store/models/login.model';\nimport { SessionService } from '../../../core/services/session.service';\nimport { LoginAction } from '../../store/actions/login.actions';\n\nexport interface ErrorMessage {\n  message: any;\n  status: string;\n}\n\nexport class Message {\n  constructor(\n    public sender: string,\n    public content: string,\n    public isBroadcast = false,\n  ) { }\n}\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public ws_message: string;\n  loginForm: FormGroup;\n  errorMessage: ErrorMessage;\n  userName$;\n  loading = false;\n  user: string;\n  constructor(private sessionService: SessionService,\n              private router: Router,\n              private store: Store<UserCredentials>,\n              @Inject(FormBuilder) fb: FormBuilder) {\n\n\n    this.loginForm = fb.group({\n      userName: [null, Validators.minLength(3)],\n      password: [null, Validators.minLength(3)]\n    });\n  }\n  login() {\n    this.store.dispatch(new LoginAction(this.loginForm.value));\n    this.loading = true;\n  }\n\n  submitWsMessage() {\n    const submitMessage = new Message('client1', this.ws_message, false);\n  }\n\n  ngOnInit() {\n    // Login\n    this.store.select(getAuthSelector).pipe(\n      map(loginUserDetailsMapper))\n      .subscribe(res => {\n        if (res && res.token) {\n          this.loading = false;\n          this.router.navigate(['/products']);\n        }\n      });\n    // Error handing\n    this.store.select(getAuthSelector).pipe(\n      map(loginErrorMapper)\n    )\n    .subscribe((error: ErrorMessage) => {\n      if ( error && error.message ) {\n        this.errorMessage = error;\n        this.loading = false;\n      }\n    });\n\n    if (this.sessionService.getTokenFromStorage() != null) {\n      // this.router.navigate(['/products']);\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<UserCredentials>"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<UserCredentials>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-frame login-register-page\">\n\n  <alert type=\"danger\" *ngIf='errorMessage'>\n    <strong *ngIf=\"errorMessage?.status != 500\">{{errorMessage.message.errorMessage}} </strong>\n    <strong *ngIf=\"errorMessage?.status == 500 || 503 || 0\">{{ 'loginProcess.errorNetworkMessage' | translate }} </strong>\n  </alert>\n\n  <div class=\"row text-center register-or-login-main\">\n    <div class=\"col-12 col-sm-6 register-or-login-selected\">\n      <a routerLink=\"/login\">{{ 'loginProcess.loginLink' | translate }}</a>\n    </div>\n    <div class=\"col-12 col-sm-6 register-or-login-other\">\n      <a routerLink=\"/register\">{{ 'loginProcess.registerLink' | translate }}</a>\n    </div>\n  </div>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" class=\"login-or-register-form\" [ngClass]=\"{'loading-form': loading}\">\n    <div class=\"form-group\">\n      <label for=\"userName\">User Name</label>\n      <input type=\"email\" formControlName=\"userName\" class=\"form-control custom-login\" id=\"userName\" placeholder=\"Enter user name\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password</label>\n      <input type=\"password\" formControlName=\"password\" class=\"form-control custom-login\" id=\"password\" placeholder=\"Enter password\">\n    </div>\n    <div class=\"btn-box\">\n      <button *ngIf=\"!loading\" [disabled]=\"!loginForm.value.password || !loginForm.value.userName || loginForm.status!=='VALID'\" type=\"submit\" class=\"btn btn-primary login-btn\">{{'loginProcess.submitButton' | translate}}</button>\n      <button *ngIf=\"loading\"  disabled type=\"submit\" class=\"btn btn-primary login-btn\">\n        <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n        {{ 'loginProcess.loadingMessage' | translate }}\n      </button>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "LogoutComponent",
            "id": "component-LogoutComponent-f20f51adf06b05822f2f88f6459bea68",
            "file": "src/app/auth/components/logout/logout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./logout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { AppStates } from '../../../app.states';\nimport { LogOut } from '../../store/actions/login.actions';\nimport { SessionService } from '../../../core/services/session.service';\n\n@Component({\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(private router: Router,\n              private sessionService: SessionService,\n              private store: Store<AppStates>) {\n  }\n\n  async ngOnInit() {\n    this.store.dispatch(new LogOut());\n    await this.navigateToLogin();\n  }\n  async navigateToLogin() {\n    await this.router.navigate(['/login']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a routerLink=\"/logout\">logout</a>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageHeaderComponent",
            "id": "component-PageHeaderComponent-d5b4edcdf2107e7c2ed0c49132a7eaba",
            "file": "src/app/shared/components/page-header/page-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-header",
            "styleUrls": [
                "./page-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "Link[]"
                },
                {
                    "name": "header",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Link } from '../../interfaces/link';\r\n\r\n@Component({\r\n    selector: 'app-page-header',\r\n    templateUrl: './page-header.component.html',\r\n    styleUrls: ['./page-header.component.scss']\r\n})\r\nexport class PageHeaderComponent {\r\n    @Input() header: string;\r\n    @Input() breadcrumbs: Link[] = [];\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"page-header\">\r\n    <div class=\"page-header__container container\">\r\n        <div class=\"page-header__breadcrumb\">\r\n            <nav aria-label=\"breadcrumb\">\r\n                <ol class=\"breadcrumb\">\r\n                    <ng-container *ngFor=\"let breadcrumb of breadcrumbs; last as last\">\r\n                        <li *ngIf=\"!last\" class=\"breadcrumb-item\">\r\n                            <a [routerLink]=\"breadcrumb.url\">{{ breadcrumb.label }}</a>\r\n                            <app-icon class=\"breadcrumb-arrow\" name=\"arrow-rounded-right-6x9\" size=\"6x9\"></app-icon>\r\n                        </li>\r\n                        <li *ngIf=\"last\" class=\"breadcrumb-item active\" aria-current=\"page\">{{ breadcrumb.label }}</li>\r\n                    </ng-container>\r\n                </ol>\r\n            </nav>\r\n        </div>\r\n        <div *ngIf=\"header\" class=\"page-header__title\">\r\n            <h1>{{ header }}</h1>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-2b7ca4194eb33655e97756b620c42075",
            "file": "src/app/shared/components/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "current",
                    "defaultValue": "1",
                    "line": 10
                },
                {
                    "name": "siblings",
                    "defaultValue": "1",
                    "line": 9
                },
                {
                    "name": "total",
                    "defaultValue": "1",
                    "line": 11
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pages",
                    "defaultValue": "[]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "calc",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-pagination',\r\n    templateUrl: './pagination.component.html',\r\n    styleUrls: ['./pagination.component.scss']\r\n})\r\nexport class PaginationComponent implements OnChanges, OnInit {\r\n    @Input() siblings = 1;\r\n    @Input() current = 1;\r\n    @Input() total = 1;\r\n\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n    pages: number[] = [];\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void {\r\n        this.calc();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.calc();\r\n    }\r\n\r\n    setPage(value: number): void {\r\n        if (value < 1 || value > this.total || value === this.current) {\r\n            return;\r\n        }\r\n\r\n        this.current = value;\r\n        this.pageChange.emit(this.current);\r\n        this.calc();\r\n    }\r\n\r\n    trackByFn(index: number): number {\r\n        return index;\r\n    }\r\n\r\n    private calc(): void {\r\n        const min = Math.max(1, this.current - this.siblings - Math.max(0, this.siblings - this.total + this.current));\r\n        const max = Math.min(this.total, min + this.siblings * 2);\r\n\r\n        this.pages = [];\r\n\r\n        for (let i = min; i <= max; i++) {\r\n            this.pages.push(i);\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<ul class=\"pagination justify-content-center\">\r\n    <li class=\"page-item\" [class.disabled]=\"current <= 1\">\r\n        <a class=\"page-link page-link--with-arrow\" aria-label=\"Previous\" (click)=\"setPage(current - 1)\">\r\n            <app-icon class=\"page-link__arrow page-link__arrow--left\" aria-hidden=\"true\" name=\"arrow-rounded-left-8x13\" size=\"8x13\"></app-icon>\r\n        </a>\r\n    </li>\r\n    <li *ngFor=\"let page of pages; trackBy: trackByFn\" class=\"page-item\" [class.active]=\"page === current\">\r\n        <a class=\"page-link\" (click)=\"setPage(page)\">\r\n            {{ page }}\r\n            <span *ngIf=\"page === current\" class=\"sr-only\">(current)</span>\r\n        </a>\r\n    </li>\r\n    <li class=\"page-item\" [class.disabled]=\"current >= total\">\r\n        <a class=\"page-link page-link--with-arrow\" aria-label=\"Next\" (click)=\"setPage(current + 1)\">\r\n            <app-icon class=\"page-link__arrow page-link__arrow--right\" aria-hidden=\"true\" name=\"arrow-rounded-right-8x13\" size=\"8x13\"></app-icon>\r\n        </a>\r\n    </li>\r\n</ul>\r\n"
        },
        {
            "name": "PlacedOrdersComponent",
            "id": "component-PlacedOrdersComponent-58f77540b1c4124a80478de52c87cca3",
            "file": "src/app/cart/components/placed-orders/placed-orders.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./placed-orders.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./placed-orders.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionPosition",
                    "defaultValue": "[]",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "checkoutForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "methodsOfPayment",
                    "defaultValue": "[]",
                    "type": "PaymentDescription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "modalRef",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "placedOrdersDetails$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "productsInCart",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "remove_item_confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'remove_item_confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "totalQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "changeChevronDirection",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteOrderFromHistory",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductUrl",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "totalSum",
                    "args": [
                        {
                            "name": "price",
                            "type": ""
                        },
                        {
                            "name": "selectedQuantity",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "price",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedQuantity",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { map, distinct } from 'rxjs/operators';\nimport { Component, OnInit, ViewChild, TemplateRef } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport { FormGroup } from '@angular/forms';\nimport { FetchOrderHistory, DeleteOrderFromHistoryApi } from '../../store/actions/cart.actions';\nimport { CartState } from '../../store/states/cart.states';\nimport { PaymentDescription } from '../../models/cart.model';\nimport { SessionService } from '../../../core/services/session.service';\nimport { CartService } from '../../../core/services/cart.service';\nimport { BsModalRef, BsModalService, ModalDirective } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\nimport { selectOrdersHistory } from '../../store/selectors/cart.selectors';\n@Component({\n  templateUrl: './placed-orders.component.html',\n  styleUrls: ['./placed-orders.component.scss']\n})\nexport class PlacedOrdersComponent implements OnInit {\n  methodsOfPayment: PaymentDescription[] = [];\n  productsInCart: any;\n  error = false;\n  totalQuantity: number;\n  checkoutForm: FormGroup;\n  placedOrdersDetails$: Observable<any>;\n  @ViewChild('confirmation_template', {'static': false}) confirmation_template: ModalDirective;\n  @ViewChild('remove_item_confirmation_template', {'static': false}) remove_item_confirmation_template: ModalDirective;\n  modalRef: BsModalRef;\n  accordionPosition: {[index: number]: boolean} = [];\n\n  constructor(private store: Store<CartState>,\n              private sessionService: SessionService,\n              private router: Router,\n              private cartService: CartService,\n              private modalService: BsModalService) {\n\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new FetchOrderHistory());\n\n    // app store for total amount\n    this.placedOrdersDetails$ = this.store.select( selectOrdersHistory ).pipe(\n      distinct(),\n      map((res: any) => {\n        return res;\n      }));\n  }\n\n  totalSum(price, selectedQuantity) {\n    return Math.round(price * selectedQuantity * 100) / 100;\n  }\n\n  getProductUrl(product) {\n    if (product && product.imageList.length > 0) {\n      const url = product.imageList[0]['imageUrl'] ? product.imageList[0]['imageUrl'] :\n        product.imageList[0]['largeUrl'] ? product.imageList[0]['largeUrl'] : '/assets/images/teapod.jpeg';\n      return url;\n    } else if (product && product.imageList.length === 0) {\n      return  '/assets/images/teapod.jpeg';\n    }\n  }\n\n  deleteOrderFromHistory( orderId: string ) {\n    this.store.dispatch(new DeleteOrderFromHistoryApi(orderId));\n    this.modalService.hide();\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template);\n  }\n\n  changeChevronDirection(index) {\n    if ( this.accordionPosition && this.accordionPosition[index] ) {\n      this.accordionPosition[index] = !this.accordionPosition[index];\n    } else {\n      this.accordionPosition[index] = true;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.checkout-confirmation {\n  font-size: 1.1rem;\n  color:white;\n  background: deepskyblue;\n  width: 100%;\n  /*margin: 1em 0 1em 0;*/\n  border-radius: 1em;\n}\n.checkout-verification-message {\n  background: deepskyblue;\n  color: white;\n  width: 100%;\n  font-size: 1.1em;\n  /*margin: 1em 0 1em 0;*/\n  border-radius: 1em;\n}\n.checkout-total {\n  box-shadow: -10px 10px 10px lightblue;\n  border-radius: 15px;\n  margin-top: 3px;\n  font-size: 1.5rem;\n}\n#order-block-for-mobile{\n  display: none;\n}\n#order-block-for-desktop td img{\n  width: 100px;\n}\n.btn{\n  margin: 5px 7px 5px;\n}\n#modalBtn{\n  width: 100%;\n}\naccordion-group button{\n  outline: none;\n  margin: 0;\n}\n.modal-body-text{\n  margin-top: 15px;\n}\naccordion-group svg{\n  display: inline-block;\n}\n.expanded-block{\n  animation-name: open-menu-button;\n  height: 16px;\n  animation-duration: .45s;\n  transform: rotate(90deg);\n}\n.close-block{\n  animation-name: close-menu-button;\n  height: 16px;\n  animation-duration: .45s;\n}\n.table tbody+tbody {\n  border-top: none;\n}\n\n\n@media (max-width: 729px) {\n  #order-block-for-desktop{\n    display: none;\n  }\n\n  #order-block-for-mobile{\n    display: block;\n  }\n\n  .table-block table thead {\n    display: none;\n  }\n\n  .table-block table tr {\n    display: block;\n  }\n\n  .table-block table td:first-child {\n    display: flex;\n    justify-content: center;\n  }\n\n  #order-block-for-mobile td img{\n    width: 170px;\n  }\n\n  .table-block table td {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .table-block table td::before {\n    content: attr(data-label);\n    font-weight: bold;\n    margin-right: 20px;\n  }\n\n}\n",
                    "styleUrl": "./placed-orders.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<CartState>"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "cartService",
                        "type": "CartService"
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<CartState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-alert [size]=\"'lg'\" [dismissible]=\"true\" [type]=\"'warning'\"></app-alert>\n<div class=\"container-fluid default-page-background\">\n  <div class=\"table-block\">\n    <table class=\"table text-center\">\n      <thead>\n        <tr>\n          <th id=\"image\">{{ 'checkout.image' | translate }}</th>\n          <th id=\"product\">{{ 'checkout.product' | translate}}</th>\n          <th id=\"price\">{{ 'checkout.price' | translate}}</th>\n          <th id=\"quantity\">{{ 'checkout.quantity' | translate}}</th>\n          <th id=\"total\">{{ 'checkout.total' | translate}}</th>\n          <th id=\"dateOfOrder\">{{ 'placedOrder.dateOfOrder' | translate }}</th>\n          <th id=\"cancel\">{{ 'placedOrder.cancel' | translate }}</th>\n        </tr>\n      </thead>\n      <!-- fullscreen view -->\n      <tbody *ngFor='let placedOrdersDetails of (placedOrdersDetails$ | async)' id=\"order-block-for-desktop\">\n        <tr *ngFor='let placedOrderProductsDescription of placedOrdersDetails?.orderDetails.itemList'>\n          <td class=\"align-middle\"><img [src]=\"getProductUrl(placedOrderProductsDescription.product.productInfo)\"\n            onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\" alt=\"image of {{placedOrderProductsDescription.product.name}}\"></td>\n          <td class=\"align-middle\">{{placedOrderProductsDescription.product.description}}</td>\n          <td class=\"align-middle\">$ {{placedOrderProductsDescription.product.price}}</td>\n          <td class=\"align-middle\">{{placedOrderProductsDescription.quantity}} {{'placedOrder.pcs' | translate}}</td>\n          <td class=\"align-middle\">$ {{ totalSum(placedOrderProductsDescription.product.price, placedOrderProductsDescription.quantity) }}</td>\n          <td class=\"align-middle\">{{placedOrdersDetails?.updatedAt | date}}</td>\n          <td class=\"align-middle\"><button type=\"button\" class=\"btn btn-danger\" (click)=\"openModal(orderCancel)\">{{ 'placedOrder.cancel' | translate }}</button>\n          </td>\n          <!-- Modal window to approve Order cancel -->\n          <ng-template #orderCancel>\n            <div class=\"modal-body\">\n              <div class=\"text-center modal-body-text\">{{'cancelOrderModal.modalBodyText' | translate}}</div><br>\n              <div class=\"text-right\">\n                <button type=\"button\" class=\"btn btn-success\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n                  <span aria-hidden=\"true\">{{'cancelOrderModal.close' | translate}}</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteOrderFromHistory(placedOrdersDetails?.id)\">{{'cancelOrderModal.cancelOrder' | translate}}</button>\n              </div>\n            </div>\n          </ng-template>\n          <!-- modal window -->\n        </tr>\n      </tbody>\n      <!-- mobile view -->\n      <tbody *ngFor='let placedOrdersDetails of (placedOrdersDetails$ | async); let i = index' id=\"order-block-for-mobile\">\n        <accordion [isAnimated]=\"true\">\n          <accordion-group>\n            <button id=\"modalBtn\" class=\"btn btn-link\" accordion-heading type=\"button\" (click)='changeChevronDirection(i)'>\n              <div class=\"row\">\n                <div class=\"col-10 text-left\">\n                  {{placedOrdersDetails?.updatedAt | date}}\n                </div>\n                <div class=\"col-2 text-right\">\n                  <img [ngClass]=\"{'expanded-block': accordionPosition && accordionPosition[i], 'close-block': (accordionPosition && !accordionPosition[i])}\" src=\"../../../../assets/svg/arrow-rounded-right-6x9.svg\" alt=\"Right caret\">\n                </div>\n              </div>\n            </button>\n            <tr *ngFor='let placedOrderProductsDescription of placedOrdersDetails?.orderDetails.itemList'>\n              <td class=\"align-middle\"><img [src]=\"getProductUrl(placedOrderProductsDescription.product.productInfo)\"\n                onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\" alt=\"image of {{placedOrderProductsDescription.product.name}}\"></td>\n              <td class=\"align-middle\" [attr.data-label]=\"'checkout.product' | translate\">{{placedOrderProductsDescription.product.description}}</td>\n              <td class=\"align-middle\" [attr.data-label]=\"'checkout.price' | translate\">$ {{placedOrderProductsDescription.product.price}}</td>\n              <td class=\"align-middle\" [attr.data-label]=\"'checkout.quantity' | translate\">{{placedOrderProductsDescription.quantity}} {{'placedOrder.pcs' | translate}}</td>\n              <td class=\"align-middle\" [attr.data-label]=\"'checkout.total' | translate\">$ {{ totalSum(placedOrderProductsDescription.product.price, placedOrderProductsDescription.quantity) }}</td>\n              <td class=\"align-middle\" [attr.data-label]=\"'placedOrder.dateOfOrder' | translate\">{{placedOrdersDetails?.updatedAt | date}}</td>\n              <td class=\"align-middle\" [attr.data-label]=\"'placedOrder.cancel' | translate\"><button type=\"button\" class=\"btn btn-danger\" (click)=\"openModal(orderCancel)\">{{ 'placedOrder.cancel' | translate }}</button></td>\n              <!-- Modal window to approve Order cancel -->\n              <ng-template #orderCancel>\n                <div class=\"modal-body\">\n                  <div class=\"text-center modal-body-text\">{{'cancelOrderModal.modalBodyText' | translate}}</div><br>\n                  <div class=\"text-right\">\n                    <button type=\"button\" class=\"btn btn-success\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n                      <span aria-hidden=\"true\">{{'cancelOrderModal.close' | translate}}</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteOrderFromHistory(placedOrdersDetails?.id)\">{{'cancelOrderModal.cancelOrder' | translate}}</button>\n                  </div>\n                </div>\n              </ng-template>\n              <!-- modal window -->\n            </tr>\n          </accordion-group>\n        </accordion>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
        },
        {
            "name": "PostCardComponent",
            "id": "component-PostCardComponent-d1ce681757ee68fa811e4c4cc0bce40a",
            "file": "src/app/shared/components/post-card/post-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-card",
            "styleUrls": [
                "./post-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "layout",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "\"grid-nl\" | \"grid-lg\" | \"list-nl\" | \"list-sm\" | null"
                },
                {
                    "name": "post",
                    "line": 11,
                    "type": "Post"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "root",
                    "type": "RootService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Post } from '../../interfaces/post';\r\nimport { RootService } from '../../services/root.service';\r\n\r\n@Component({\r\n    selector: 'app-post-card',\r\n    templateUrl: './post-card.component.html',\r\n    styleUrls: ['./post-card.component.scss']\r\n})\r\nexport class PostCardComponent {\r\n    @Input() post: Post;\r\n    @Input() layout: 'grid-nl'|'grid-lg'|'list-nl'|'list-sm'|null = null;\r\n\r\n    constructor(public root: RootService) { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./post-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "root",
                        "type": "RootService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "root",
                        "type": "RootService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"post-card\" [ngClass]=\"{\r\n    'post-card--layout--grid': ['grid-nl', 'grid-lg'].includes(layout),\r\n    'post-card--layout--list': ['list-nl', 'list-sm'].includes(layout),\r\n\r\n    'post-card--size--nl': ['grid-nl', 'list-nl'].includes(layout),\r\n    'post-card--size--lg': layout === 'grid-lg',\r\n    'post-card--size--sm': layout === 'list-sm'\r\n}\">\r\n    <div class=\"post-card__image\">\r\n        <a appClick [routerLink]=\"root.post()\">\r\n            <img [src]=\"post.image\" alt=\"\">\r\n        </a>\r\n    </div>\r\n    <div class=\"post-card__info\">\r\n        <div class=\"post-card__category\">\r\n            <a appClick [routerLink]=\"root.post()\" *ngFor=\"let category of post.categories\">{{ category }}</a>\r\n        </div>\r\n        <div class=\"post-card__name\">\r\n            <a appClick [routerLink]=\"root.post()\">{{ post.title }}</a>\r\n        </div>\r\n        <div class=\"post-card__date\">{{ post.date }}</div>\r\n        <div class=\"post-card__content\">\r\n            In one general sense, philosophy is associated with wisdom,\r\n            intellectual culture and a search for knowledge.\r\n            In that sense, all cultures...\r\n        </div>\r\n        <div class=\"post-card__read-more\">\r\n            <a appClick [routerLink]=\"root.post()\" class=\"btn btn-secondary btn-sm\">Read More</a>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ProductCardComponent",
            "id": "component-ProductCardComponent-26bdd4a4a20656eff1031236917ce59d",
            "file": "src/app/shared/components/product-card/product-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-card",
            "styleUrls": [
                "./product-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "layout",
                    "defaultValue": "null",
                    "line": 37,
                    "type": "\"grid-sm\" | \"grid-nl\" | \"grid-lg\" | \"list\" | \"horizontal\" | null"
                },
                {
                    "name": "product",
                    "line": 36,
                    "type": "any"
                },
                {
                    "name": "productId",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "selectedQuantity",
                    "line": 35,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addingToCart",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "addingToCompare",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "addingToWishlist",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "approveModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "cart",
                    "type": "CartService",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "compare",
                    "type": "CompareService",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'remove_item_confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "confirmationModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "currency",
                    "type": "CurrencyService",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteProduct",
                    "type": "ProductDetails",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "deleteProductState",
                    "defaultValue": "{action: undefined, state: undefined}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "deleteProductSubject",
                    "defaultValue": "new BehaviorSubject({action: undefined, state: undefined})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "error_modal",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'error_modal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "errorModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "quickview",
                    "type": "QuickviewService",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "root",
                    "type": "RootService",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showingQuickview",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "userDetails$",
                    "type": "Observable<UserDetails>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "wishlist",
                    "type": "WishlistService",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108
                },
                {
                    "name": "addToCompare",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161
                },
                {
                    "name": "addToWishlist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "getProductUrl",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ifSeller",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 189
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "removeItemConfirmation",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ProductDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ProductDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemFromProductList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124
                },
                {
                    "name": "showQuickview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit, TemplateRef, ViewChild} from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { CartService } from '../../services/cart.service';\r\n// import { Product } from '../../interfaces/product';\r\nimport { WishlistService } from '../../services/wishlist.service';\r\nimport { CompareService } from '../../services/compare.service';\r\nimport { QuickviewService } from '../../services/quickview.service';\r\nimport { RootService } from '../../services/root.service';\r\nimport { CurrencyService } from '../../services/currency.service';\r\nimport {filter, map, takeUntil} from 'rxjs/operators';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\nimport {AddToCart} from '../../../cart/store/actions/cart.actions';\r\nimport { AppStates } from '../../../app.states';\r\nimport {ProductDetails, Products} from '../../../products/store/models/products.model';\r\nimport {BsModalRef, BsModalService, ModalDirective} from 'ngx-bootstrap/modal';\r\nimport {RemoveItemFromProductList} from '../../../products/store/actions/products.actions';\r\nimport {UserDetails} from '../../../auth/store/models/login.model';\r\n\r\n@Component({\r\n    selector: 'app-product-card',\r\n    templateUrl: './product-card.component.html',\r\n    styleUrls: ['./product-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProductCardComponent implements OnInit, OnDestroy {\r\n    private destroy$: Subject<void> = new Subject();\r\n    deleteProductSubject: BehaviorSubject<{action: string; state: string; }> = new BehaviorSubject({action: undefined, state: undefined});\r\n    deleteProductState: {action: string; state: string; } = {action: undefined, state: undefined};\r\n    confirmationModal: BsModalRef | null;\r\n    @ViewChild('error_modal', {'static': false}) error_modal: ModalDirective;\r\n    @ViewChild('remove_item_confirmation_template', {'static': false}) confirmation_template: ModalDirective;\r\n\r\n    @Input() productId: string;\r\n    @Input() selectedQuantity: number;\r\n    @Input() product: any;\r\n    @Input() layout: 'grid-sm'|'grid-nl'|'grid-lg'|'list'|'horizontal'|null = null;\r\n\r\n    addingToCart = false;\r\n    addingToWishlist = false;\r\n    addingToCompare = false;\r\n    showingQuickview = false;\r\n    userDetails$: Observable<UserDetails>;\r\n\r\n    approveModal: BsModalRef | null;\r\n    deleteProduct: ProductDetails;\r\n    errorModal: BsModalRef | null;\r\n\r\n    constructor(\r\n        private store: Store<AppStates>,\r\n        private cd: ChangeDetectorRef,\r\n        public root: RootService,\r\n        public cart: CartService,\r\n        public wishlist: WishlistService,\r\n        public compare: CompareService,\r\n        public quickview: QuickviewService,\r\n        public currency: CurrencyService,\r\n        private modalService: BsModalService\r\n    ) {\r\n      this.userDetails$ = this.store.select(\r\n        res => {\r\n          if (res && res['userLoginReducer'] && res['userLoginReducer']['userDetails']) {\r\n            return res['userLoginReducer']['userDetails'];\r\n          }\r\n        })\r\n        .pipe(\r\n          map((userDetails: UserDetails) => {\r\n            return userDetails;\r\n          })\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.currency.changes$.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.cd.markForCheck();\r\n        });\r\n\r\n      this.deleteProductSubject.subscribe( (status: any) => {\r\n\r\n        if (status.state === 'delete_product_error' && status.action === 'delete_product') {\r\n\r\n          if (this.confirmationModal) {\r\n            this.confirmationModal.hide();\r\n          }\r\n          if (this.approveModal) {\r\n            this.approveModal.hide();\r\n          }\r\n          if (!this.errorModal) {\r\n            this.errorModal = this.modalService.show(this.error_modal, {class: 'modal-lg'});\r\n          } else {\r\n          }\r\n\r\n        } else if (status.state === 'no_error' && status.action === 'delete_product') {\r\n          if (this.errorModal) { this.errorModal.hide(); }\r\n          if (!this.confirmationModal) {this.confirmationModal = this.modalService.show(this.confirmation_template, { class: 'modal-lg' })}\r\n        } else {\r\n          //  TODO: modify this place\r\n        }\r\n\r\n      });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    addToCart(): void {\r\n        // TODO: add option to add number of items\r\n        this.store.dispatch(new AddToCart(\r\n          {\r\n            id : this.product.id,\r\n            quantity: 1\r\n          }\r\n        ));\r\n    }\r\n\r\n  removeItemConfirmation(template: TemplateRef<any>, deleteProduct: ProductDetails) {\r\n    this.deleteProduct = deleteProduct;\r\n    this.errorModal = null;\r\n    this.approveModal = this.modalService.show(template, { class: 'modal-lg' });\r\n  }\r\n\r\n  removeItemFromProductList() {\r\n    this.store.dispatch(new RemoveItemFromProductList(\r\n      {\r\n        id : this.deleteProduct.id\r\n      }\r\n    ));\r\n    Object.assign(this.deleteProductState, { action: 'delete_product', state: 'no_errors' });\r\n    this.deleteProductSubject.next(this.deleteProductState);\r\n    this.approveModal.hide();\r\n  }\r\n\r\n  getProductUrl(product) {\r\n    if (product && product.productInfo && product.productInfo.imageList.length > 0) {\r\n      const url = product.productInfo.imageList[0]['imageUrl'] ? product.productInfo.imageList[0]['imageUrl'] :\r\n        product.productInfo.imageList[0]['largeUrl'] ? product.productInfo.imageList[0]['largeUrl'] : '/assets/images/teapod.jpeg';\r\n      return url;\r\n    } else {\r\n      return  '/assets/images/teapod.jpeg';\r\n    }\r\n  }\r\n\r\n// TODO: remove or apply existing methods below:\r\n\r\n  addToWishlist(): void {\r\n      if (this.addingToWishlist) {\r\n          return;\r\n      }\r\n\r\n      this.addingToWishlist = true;\r\n      this.wishlist.add(this.product).subscribe({\r\n          complete: () => {\r\n              this.addingToWishlist = false;\r\n              this.cd.markForCheck();\r\n          }\r\n      });\r\n  }\r\n\r\n  addToCompare(): void {\r\n      if (this.addingToCompare) {\r\n          return;\r\n      }\r\n\r\n      this.addingToCompare = true;\r\n      this.compare.add(this.product).subscribe({\r\n          complete: () => {\r\n              this.addingToCompare = false;\r\n              this.cd.markForCheck();\r\n          }\r\n      });\r\n  }\r\n\r\n  showQuickview(): void {\r\n      if (this.showingQuickview) {\r\n          return;\r\n      }\r\n\r\n      this.showingQuickview = true;\r\n      this.quickview.show(this.product).subscribe({\r\n          complete: () => {\r\n              this.showingQuickview = false;\r\n              this.cd.markForCheck();\r\n          }\r\n      });\r\n  }\r\n\r\n  ifSeller(): Observable<boolean> {\r\n    return this.userDetails$.pipe(\r\n      map(userData => userData.login ? userData.login.roles : undefined),\r\n      map(roles => roles.filter(role => role.roleName === 'seller').length > 0)\r\n    );\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "root",
                        "type": "RootService"
                    },
                    {
                        "name": "cart",
                        "type": "CartService"
                    },
                    {
                        "name": "wishlist",
                        "type": "WishlistService"
                    },
                    {
                        "name": "compare",
                        "type": "CompareService"
                    },
                    {
                        "name": "quickview",
                        "type": "QuickviewService"
                    },
                    {
                        "name": "currency",
                        "type": "CurrencyService"
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "root",
                        "type": "RootService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cart",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wishlist",
                        "type": "WishlistService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "compare",
                        "type": "CompareService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quickview",
                        "type": "QuickviewService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currency",
                        "type": "CurrencyService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"product-card\" [ngClass]=\"{\r\n    'product-card--layout--grid product-card--size--sm': layout === 'grid-sm',\r\n    'product-card--layout--grid product-card--size--nl': layout === 'grid-nl',\r\n    'product-card--layout--grid product-card--size--lg': layout === 'grid-lg',\r\n    'product-card--layout--list':                        layout === 'list',\r\n    'product-card--layout--horizontal':                  layout === 'horizontal'\r\n}\">\r\n  <div class=\"row\">\r\n    <div class=\"col-auto mr-auto\">\r\n      <button class=\"product-card__quickview\" type=\"button\" appClick (click)=\"showQuickview()\" [ngClass]=\"{'product-card__quickview--preload': showingQuickview}\">\r\n        <app-icon name=\"quickview-16\" size=\"16\"></app-icon>\r\n        <span class=\"fake-svg-icon\"></span>\r\n      </button>\r\n    </div>\r\n    <div class=\"col-auto\">\r\n      <button *ngIf=\"ifSeller() | async\" type=\"button\" class=\"close remove-btn\" aria-label=\"Close\" (click)=\"removeItemConfirmation(remove_item_approval_template, product)\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n    <div *ngIf=\"product.badges && product.badges.length\" class=\"product-card__badges-list\">\r\n        <div *ngIf=\"product.badges.includes('sale')\" class=\"product-card__badge product-card__badge--sale\">Sale</div>\r\n        <div *ngIf=\"product.badges.includes('hot')\" class=\"product-card__badge product-card__badge--hot\">Hot</div>\r\n        <div *ngIf=\"product.badges.includes('new')\" class=\"product-card__badge product-card__badge--new\">New</div>\r\n    </div>\r\n\r\n    <div class=\"product-card__image\">\r\n        <a appClick [routerLink]=\"['/details/' + product?.slug]\" *ngIf=\"product.productInfo.imageList.length\"><img [src]=\"getProductUrl(product)\" onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\" alt=\"product {{product.name}} image\"></a>\r\n    </div>\r\n    <div class=\"product-card__info\">\r\n        <div class=\"product-card__name\">\r\n            <a appClick [routerLink]=\"['/details/' + product?.slug]\">{{ product.name }}</a>\r\n        </div>\r\n        <div *ngIf=\"product.rating\" class=\"product-card__rating\">\r\n            <app-rating [value]=\"product.rating\"></app-rating>\r\n            <div class=\"product-card__rating-legend\">{{ product.reviews }} Reviews</div>\r\n        </div>\r\n        <ul *ngIf=\"product.features && product.features.length\" class=\"product-card__features-list\">\r\n            <li *ngFor=\"let feature of product.features\">{{ feature.name }}: {{ feature.value }}</li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"product-card__actions\">\r\n        <div class=\"product-card__availability\">\r\n            Availability:\r\n            <span *ngIf=\"product.availability === 'in-stock'\" class=\"text-success\">In Stock</span>\r\n        </div>\r\n        <div class=\"product-card__prices\">\r\n            <ng-container *ngIf=\"product.compareAtPrice\">\r\n                <span class=\"product-card__new-price\">{{ product.price|currencyFormat }}</span>{{ ' ' }}\r\n                <span class=\"product-card__old-price\">{{ product.compareAtPrice|currencyFormat }}</span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!product.compareAtPrice\">\r\n                {{ product.price|currencyFormat }}\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"product-card__buttons\">\r\n            <button class=\"btn btn-primary product-card__addtocart\" type=\"button\" appClick (click)=\"addToCart()\" [ngClass]=\"{'btn-loading': addingToCart}\">{{'productList.addToCart'| translate}}</button>\r\n            <button class=\"btn btn-secondary product-card__addtocart product-card__addtocart--list\" type=\"button\" appClick (click)=\"addToCart()\" [ngClass]=\"{'btn-loading': addingToCart}\">Add To Cart</button>\r\n            <button class=\"btn btn-light btn-svg-icon btn-svg-icon--fake-svg product-card__wishlist\" type=\"button\" appClick (click)=\"addToWishlist()\" [ngClass]=\"{'btn-loading': addingToWishlist}\">\r\n                <app-icon name=\"wishlist-16\" size=\"16\"></app-icon>\r\n                <span class=\"fake-svg-icon fake-svg-icon--wishlist-16\"></span>\r\n            </button>\r\n            <button class=\"btn btn-light btn-svg-icon btn-svg-icon--fake-svg product-card__compare\" type=\"button\" appClick (click)=\"addToCompare()\" [ngClass]=\"{'btn-loading': addingToCompare}\">\r\n                <app-icon name=\"compare-16\" size=\"16\"></app-icon>\r\n                <span class=\"fake-svg-icon fake-svg-icon--compare-16\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<ng-template #remove_item_approval_template>\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"modal-title pull-left\">{{ 'checkout.approval' | translate }}</h4>\r\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Cancel removal from shopping cart\" (click)=\"approveModal.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <p>{{ 'checkout.confirmDeleteItem' | translate: {name: deleteProduct.name} }}</p>\r\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeItemFromProductList()\">{{ 'checkout.removeButton' | translate }}</button>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #remove_item_confirmation_template>\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"modal-title pull-left\">{{ 'checkout.confirmationTitle' | translate }}</h4>\r\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close modal of removal from shopping cart\" (click)=\"confirmationModal.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    {{ 'checkout.confirmationMessage' | translate }}\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirmationModal.hide()\" (click)=\"approveModal.hide()\">{{ 'checkout.ok' | translate }}</button>\r\n  </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #error_modal>\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"modal-title pull-left\">{{ 'checkout.errorTitle' | translate }}</h4>\r\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close error message\" (click)=\"errorModal.hide()\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    {{ 'checkout.errorDeleteItem' | translate }}\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"errorModal.hide()\" >{{ 'checkout.ok' | translate }}</button>\r\n  </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ProductComponent",
            "id": "component-ProductComponent-f4c62df057a536ef99305bad82baba36",
            "file": "src/app/shared/components/product/product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product",
            "styleUrls": [
                "./product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "layout",
                    "line": 37,
                    "type": ""
                },
                {
                    "name": "product",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addingToCart",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "addingToCompare",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "addingToWishlist",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "carouselOptions",
                    "defaultValue": "{\r\n        dots: false,\r\n        autoplay: false,\r\n        responsive: {\r\n            0: {items: 1}\r\n        },\r\n        rtl: this.direction.isRTL()\r\n    }",
                    "type": "Partial<OwlCarouselOConfig>",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "dataLayout",
                    "defaultValue": "'standard'",
                    "type": "Layout",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dataProduct",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "featuredCarousel",
                    "type": "CarouselComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'featuredCarousel', {read: CarouselComponent, static: false}"
                        }
                    ]
                },
                {
                    "name": "imageElements",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'imageElement', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "type": "ProductImage[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "quantity",
                    "defaultValue": "new FormControl(1)",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "showGallery",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "showGalleryTimeout",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "thumbnailsCarousel",
                    "type": "CarouselComponent",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'thumbnailsCarousel', {read: CarouselComponent, static: false}"
                        }
                    ]
                },
                {
                    "name": "thumbnailsCarouselOptions",
                    "defaultValue": "{\r\n        dots: false,\r\n        autoplay: false,\r\n        margin: 10,\r\n        items: 5,\r\n        responsive: {\r\n            480: {items: 5},\r\n            380: {items: 4},\r\n              0: {items: 3}\r\n        },\r\n        rtl: this.direction.isRTL()\r\n    }",
                    "type": "Partial<OwlCarouselOConfig>",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "addToCompare",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "addToWishlist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136
                },
                {
                    "name": "featuredCarouselTranslated",
                    "args": [
                        {
                            "name": "event",
                            "type": "SlidesOutputData"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "SlidesOutputData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "openPhotoSwipe",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "image",
                            "type": "ProductImage"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "ProductImage",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setActiveImage",
                    "args": [
                        {
                            "name": "image",
                            "type": "ProductImage"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "ProductImage",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, Input, OnInit, PLATFORM_ID, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { Product } from '../../interfaces/product';\r\nimport { CarouselComponent, SlidesOutputData } from 'ngx-owl-carousel-o';\r\nimport { FormControl } from '@angular/forms';\r\nimport { CartService } from '../../services/cart.service';\r\nimport { WishlistService } from '../../services/wishlist.service';\r\nimport { CompareService } from '../../services/compare.service';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { OwlCarouselOConfig } from 'ngx-owl-carousel-o/lib/carousel/owl-carousel-o-config';\r\nimport { PhotoSwipeService } from '../../services/photo-swipe.service';\r\nimport { DirectionService } from '../../services/direction.service';\r\n\r\ninterface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    active: boolean;\r\n}\r\n\r\nexport type Layout = 'standard'|'sidebar'|'columnar'|'quickview';\r\n\r\n@Component({\r\n    selector: 'app-product',\r\n    templateUrl: './product.component.html',\r\n    styleUrls: ['./product.component.scss']\r\n})\r\nexport class ProductComponent implements OnInit {\r\n    private dataProduct: Product;\r\n    private dataLayout: Layout = 'standard';\r\n\r\n    showGallery = true;\r\n    showGalleryTimeout: number;\r\n\r\n    @ViewChild('featuredCarousel', { read: CarouselComponent, static: false }) featuredCarousel: CarouselComponent;\r\n    @ViewChild('thumbnailsCarousel', { read: CarouselComponent, static: false }) thumbnailsCarousel: CarouselComponent;\r\n    @ViewChildren('imageElement', {read: ElementRef}) imageElements: QueryList<ElementRef>;\r\n\r\n    @Input() set layout(value: Layout) {\r\n        this.dataLayout = value;\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // this dirty hack is needed to re-initialize the gallery after changing the layout\r\n            clearTimeout(this.showGalleryTimeout);\r\n            this.showGallery = false;\r\n            this.showGalleryTimeout = window.setTimeout(() => {\r\n                this.showGallery = true;\r\n            }, 0);\r\n        }\r\n    }\r\n    get layout(): Layout {\r\n        return this.dataLayout;\r\n    }\r\n\r\n    @Input() set product(value: Product) {\r\n        this.dataProduct = value;\r\n        this.images = value ? this.dataProduct.images.map((url, index) => {\r\n            return {\r\n                id: index.toString(),\r\n                url,\r\n                active: index === 0\r\n            };\r\n        }) : [];\r\n    }\r\n    get product(): Product {\r\n        return this.dataProduct;\r\n    }\r\n\r\n    images: ProductImage[] = [];\r\n\r\n    carouselOptions: Partial<OwlCarouselOConfig> = {\r\n        dots: false,\r\n        autoplay: false,\r\n        responsive: {\r\n            0: {items: 1}\r\n        },\r\n        rtl: this.direction.isRTL()\r\n    };\r\n\r\n    thumbnailsCarouselOptions: Partial<OwlCarouselOConfig> = {\r\n        dots: false,\r\n        autoplay: false,\r\n        margin: 10,\r\n        items: 5,\r\n        responsive: {\r\n            480: {items: 5},\r\n            380: {items: 4},\r\n              0: {items: 3}\r\n        },\r\n        rtl: this.direction.isRTL()\r\n    };\r\n\r\n    quantity: FormControl = new FormControl(1);\r\n\r\n    addingToCart = false;\r\n    addingToWishlist = false;\r\n    addingToCompare = false;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: any,\r\n        private cart: CartService,\r\n        private wishlist: WishlistService,\r\n        private compare: CompareService,\r\n        private photoSwipe: PhotoSwipeService,\r\n        private direction: DirectionService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.layout !== 'quickview' && isPlatformBrowser(this.platformId)) {\r\n            this.photoSwipe.load().subscribe();\r\n        }\r\n    }\r\n\r\n    setActiveImage(image: ProductImage): void {\r\n        this.images.forEach(eachImage => eachImage.active = eachImage === image);\r\n    }\r\n\r\n    featuredCarouselTranslated(event: SlidesOutputData): void {\r\n        if (event.slides.length) {\r\n            const activeImageId = event.slides[0].id;\r\n\r\n            this.images.forEach(eachImage => eachImage.active = eachImage.id === activeImageId);\r\n\r\n            if (!this.thumbnailsCarousel.slidesData.find(slide => slide.id === event.slides[0].id && slide.isActive)) {\r\n                this.thumbnailsCarousel.to(event.slides[0].id);\r\n            }\r\n        }\r\n    }\r\n\r\n    addToCart(): void {\r\n        if (!this.addingToCart && this.product && this.quantity.value > 0) {\r\n            this.addingToCart = true;\r\n\r\n            this.cart.add(this.product, this.quantity.value).subscribe({complete: () => this.addingToCart = false});\r\n        }\r\n    }\r\n\r\n    addToWishlist(): void {\r\n        if (!this.addingToWishlist && this.product) {\r\n            this.addingToWishlist = true;\r\n\r\n            this.wishlist.add(this.product).subscribe({complete: () => this.addingToWishlist = false});\r\n        }\r\n    }\r\n\r\n    addToCompare(): void {\r\n        if (!this.addingToCompare && this.product) {\r\n            this.addingToCompare = true;\r\n\r\n            this.compare.add(this.product).subscribe({complete: () => this.addingToCompare = false});\r\n        }\r\n    }\r\n\r\n    openPhotoSwipe(event: MouseEvent, image: ProductImage): void {\r\n        if (this.layout !== 'quickview') {\r\n            event.preventDefault();\r\n\r\n            const images = this.images.map(eachImage => {\r\n                return {\r\n                    src: eachImage.url,\r\n                    msrc: eachImage.url,\r\n                    w: 700,\r\n                    h: 700\r\n                };\r\n            });\r\n            const options = {\r\n                getThumbBoundsFn: index => {\r\n                    const imageElement = this.imageElements.toArray()[index].nativeElement;\r\n                    const pageYScroll = window.pageYOffset || document.documentElement.scrollTop;\r\n                    const rect = imageElement.getBoundingClientRect();\r\n\r\n                    return {x: rect.left, y: rect.top + pageYScroll, w: rect.width};\r\n                },\r\n                index: this.images.indexOf(image),\r\n                bgOpacity: .9,\r\n                history: false\r\n            };\r\n\r\n            this.photoSwipe.open(images, options).subscribe(galleryRef => {\r\n                galleryRef.listen('beforeChange', () => {\r\n                    this.featuredCarousel.to(this.images[galleryRef.getCurrentIndex()].id);\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    },
                    {
                        "name": "cart",
                        "type": "CartService"
                    },
                    {
                        "name": "wishlist",
                        "type": "WishlistService"
                    },
                    {
                        "name": "compare",
                        "type": "CompareService"
                    },
                    {
                        "name": "photoSwipe",
                        "type": "PhotoSwipeService"
                    },
                    {
                        "name": "direction",
                        "type": "DirectionService"
                    }
                ],
                "line": 95,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cart",
                        "type": "CartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wishlist",
                        "type": "WishlistService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "compare",
                        "type": "CompareService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "photoSwipe",
                        "type": "PhotoSwipeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "direction",
                        "type": "DirectionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "layout": {
                    "name": "layout",
                    "setSignature": {
                        "name": "layout",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "layout",
                        "type": "",
                        "returnType": "Layout",
                        "line": 49
                    }
                },
                "product": {
                    "name": "product",
                    "setSignature": {
                        "name": "product",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "product",
                        "type": "",
                        "returnType": "Product",
                        "line": 63
                    }
                }
            },
            "templateData": "<div class=\"product product--layout--{{ layout }}\" *ngIf=\"product\">\r\n    <div class=\"product__content\">\r\n        <!-- .product__gallery -->\r\n        <div class=\"product__gallery\">\r\n            <div class=\"product-gallery\" *ngIf=\"showGallery\">\r\n                <div class=\"product-gallery__featured\">\r\n                    <owl-carousel-o [options]=\"carouselOptions\" (changed)=\"featuredCarouselTranslated($event)\" appOwlPreventClick #featuredCarousel>\r\n                        <ng-container *ngFor=\"let image of images\">\r\n                            <ng-template carouselSlide [id]=\"image.id\">\r\n                                <a appClick (click)=\"openPhotoSwipe($event, image);\" [href]=\"image.url\" target=\"_blank\">\r\n                                    <img [src]=\"image.url\" alt=\"\" #imageElement>\r\n                                </a>\r\n                            </ng-template>\r\n                        </ng-container>\r\n                    </owl-carousel-o>\r\n                </div>\r\n                <div class=\"product-gallery__carousel\">\r\n                    <owl-carousel-o [options]=\"thumbnailsCarouselOptions\" [appFakeSlides]=\"images.length\" #fakeSlides=\"appFakeSlides\" appOwlPreventClick #thumbnailsCarousel>\r\n                        <ng-container *ngFor=\"let image of images\">\r\n                            <ng-template carouselSlide [id]=\"image.id\">\r\n                                <span class=\"product-gallery__carousel-item\"\r\n                                   [ngClass]=\"{'product-gallery__carousel-item--active': image.active}\"\r\n                                   appClick (click)=\"featuredCarousel.to(image.id); setActiveImage(image)\">\r\n                                    <img class=\"product-gallery__carousel-image\" [src]=\"image.url\" alt=\"\">\r\n                                </span>\r\n                            </ng-template>\r\n                        </ng-container>\r\n                        <ng-container *ngFor=\"let i of fakeSlides.slides\">\r\n                            <ng-template carouselSlide [id]=\"'fake-slide-'+i\"></ng-template>\r\n                        </ng-container>\r\n                    </owl-carousel-o>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- .product__gallery / end -->\r\n        <!-- .product__info -->\r\n        <div class=\"product__info\">\r\n            <div class=\"product__wishlist-compare\">\r\n                <button type=\"button\" class=\"btn btn-sm btn-light btn-svg-icon\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Wishlist\"\r\n                        appClick (click)=\"addToWishlist()\"\r\n                        [ngClass]=\"{'btn-loading': addingToWishlist}\">\r\n                    <app-icon name=\"wishlist-16\" size=\"16\"></app-icon>\r\n                </button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-light btn-svg-icon\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Compare\"\r\n                        appClick (click)=\"addToCompare()\"\r\n                        [ngClass]=\"{'btn-loading': addingToCompare}\">\r\n                    <app-icon name=\"compare-16\" size=\"16\"></app-icon>\r\n                </button>\r\n            </div>\r\n            <h1 class=\"product__name\">{{ product.name }}</h1>\r\n            <div class=\"product__rating\">\r\n                <div class=\"product__rating-stars\">\r\n                    <app-rating [value]=\"product.rating\"></app-rating>\r\n                </div>\r\n                <div class=\"product__rating-legend\">\r\n                    <a href=\"\" appClick>{{ product.reviews }} Reviews</a><span>/</span><a href=\"\" appClick>Write A Review</a>\r\n                </div>\r\n            </div>\r\n            <div class=\"product__description\">\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur ornare, mi in ornare elementum, libero nibh\r\n                lacinia urna, quis convallis lorem erat at purus. Maecenas eu varius nisi.\r\n            </div>\r\n            <ul class=\"product__features\">\r\n                <li>Speed: 750 RPM</li>\r\n                <li>Power Source: Cordless-Electric</li>\r\n                <li>Battery Cell Type: Lithium</li>\r\n                <li>Voltage: 20 Volts</li>\r\n                <li>Battery Capacity: 2 Ah</li>\r\n            </ul>\r\n            <ul class=\"product__meta\">\r\n                <li class=\"product__meta-availability\">Availability: <span class=\"text-success\">In Stock</span></li>\r\n                <li>Brand: <a href=\"\" appClick>Wakita</a></li>\r\n                <li>SKU: 83690/32</li>\r\n            </ul>\r\n        </div>\r\n        <!-- .product__info / end -->\r\n        <!-- .product__sidebar -->\r\n        <div class=\"product__sidebar\">\r\n            <div class=\"product__availability\">\r\n                Availability: <span class=\"text-success\">In Stock</span>\r\n            </div>\r\n\r\n            <div class=\"product__prices\">\r\n                <ng-container *ngIf=\"product.compareAtPrice\">\r\n                    <span class=\"product__new-price\">{{ product.price|currencyFormat }}</span>{{ ' ' }}\r\n                    <span class=\"product__old-price\">{{ product.compareAtPrice|currencyFormat }}</span>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!product.compareAtPrice\">\r\n                    {{ product.price|currencyFormat }}\r\n                </ng-container>\r\n            </div>\r\n            <!-- .product__options -->\r\n            <form class=\"product__options\">\r\n                <div class=\"form-group product__option\">\r\n                    <label class=\"product__option-label\">Color</label>\r\n                    <div class=\"input-radio-color\">\r\n                        <div class=\"input-radio-color__list\">\r\n                            <label class=\"input-radio-color__item input-radio-color__item--white\" style=\"color: #fff;\" data-toggle=\"tooltip\" title=\"White\">\r\n                                <input type=\"radio\" name=\"color\">\r\n                                <span></span>\r\n                            </label>\r\n                            <label class=\"input-radio-color__item\" style=\"color: #ffd333;\" data-toggle=\"tooltip\" title=\"Yellow\">\r\n                                <input type=\"radio\" name=\"color\">\r\n                                <span></span>\r\n                            </label>\r\n                            <label class=\"input-radio-color__item\" style=\"color: #ff4040;\" data-toggle=\"tooltip\" title=\"Red\">\r\n                                <input type=\"radio\" name=\"color\">\r\n                                <span></span>\r\n                            </label>\r\n                            <label class=\"input-radio-color__item input-radio-color__item--disabled\" style=\"color: #4080ff;\" data-toggle=\"tooltip\" title=\"Blue\">\r\n                                <input type=\"radio\" name=\"color\" disabled>\r\n                                <span></span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group product__option\">\r\n                    <label class=\"product__option-label\">Material</label>\r\n                    <div class=\"input-radio-label\">\r\n                        <div class=\"input-radio-label__list\">\r\n                            <label>\r\n                                <input type=\"radio\" name=\"material\">\r\n                                <span>Metal</span>\r\n                            </label>\r\n                            <label>\r\n                                <input type=\"radio\" name=\"material\">\r\n                                <span>Wood</span>\r\n                            </label>\r\n                            <label>\r\n                                <input type=\"radio\" name=\"material\" disabled>\r\n                                <span>Plastic</span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group product__option\">\r\n                    <label class=\"product__option-label\">Quantity</label>\r\n                    <div class=\"product__actions\">\r\n                        <div class=\"product__actions-item\">\r\n                            <app-input-number aria-label=\"Quantity\" class=\"product__quantity\" size=\"lg\" [min]=\"1\" [formControl]=\"quantity\"></app-input-number>\r\n                        </div>\r\n                        <div class=\"product__actions-item product__actions-item--addtocart\">\r\n                            <button type=\"button\" class=\"btn btn-primary btn-lg\"\r\n                                    [ngClass]=\"{'btn-loading': addingToCart}\"\r\n                                    appClick (click)=\"addToCart()\">Add to cart</button>\r\n                        </div>\r\n                        <div class=\"product__actions-item product__actions-item--wishlist\">\r\n                            <button type=\"button\" class=\"btn btn-secondary btn-svg-icon btn-lg\" data-toggle=\"tooltip\" title=\"Wishlist\"\r\n                                    [ngClass]=\"{'btn-loading': addingToWishlist}\"\r\n                                    appClick (click)=\"addToWishlist()\">\r\n                                <app-icon name=\"wishlist-16\" size=\"16\"></app-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"product__actions-item product__actions-item--compare\">\r\n                            <button type=\"button\" class=\"btn btn-secondary btn-svg-icon btn-lg\" data-toggle=\"tooltip\" title=\"Compare\"\r\n                                    [ngClass]=\"{'btn-loading': addingToCompare}\"\r\n                                    appClick (click)=\"addToCompare()\">\r\n                                <app-icon name=\"compare-16\" size=\"16\"></app-icon>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <!-- .product__options / end -->\r\n        </div>\r\n        <!-- .product__end -->\r\n        <div class=\"product__footer\">\r\n            <div class=\"product__tags tags\">\r\n                <div class=\"tags__list\">\r\n                    <a href=\"\" appClick>Mounts</a>\r\n                    <a href=\"\" appClick>Electrodes</a>\r\n                    <a href=\"\" appClick>Chainsaws</a>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"product__share-links share-links\">\r\n                <ul class=\"share-links__list\">\r\n                    <li class=\"share-links__item share-links__item--type--like\"><a href=\"\" appClick>Like</a></li>\r\n                    <li class=\"share-links__item share-links__item--type--tweet\"><a href=\"\" appClick>Tweet</a></li>\r\n                    <li class=\"share-links__item share-links__item--type--pin\"><a href=\"\" appClick>Pin It</a></li>\r\n                    <li class=\"share-links__item share-links__item--type--counter\"><a href=\"\" appClick>4K</a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ProductDetailsComponent",
            "id": "component-ProductDetailsComponent-4d930ea70a537f2eed70ca15fa6c7fd4",
            "file": "src/app/products/components/product-details/product-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./product-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultLanguage",
                    "defaultValue": "'en'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "images",
                    "type": "ImageList[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "itemsPerSlide",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "lightgalleryID",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'lightGallery', {static: false}"
                        }
                    ]
                },
                {
                    "name": "maxItemsPerSlide",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "maxQuantity",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "minQuantity",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "noWrap",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "productDetail$",
                    "type": "Observable<ProductDetails>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "productDetailSubscribtion",
                    "type": "ISubscription",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "productId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "routeSubscribtion",
                    "type": "ISubscription",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedQuantity",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "showErrorMsgs",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "<ul>\n<li>Configurations: **</li>\n</ul>\n",
                    "line": 31
                },
                {
                    "name": "showNext",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "showPrev",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "singleSlideOffset",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "slidesChangeMessage",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "countSum",
                    "args": [
                        {
                            "name": "price",
                            "type": ""
                        },
                        {
                            "name": "selectedQuantity",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "price",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedQuantity",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductUrl",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initGallery",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "onSelectedQuantity",
                    "args": [
                        {
                            "name": "quantity",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "quantity",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSlideRangeChange",
                    "args": [
                        {
                            "name": "indexes",
                            "type": "number[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "indexes",
                            "type": "number[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, OnDestroy, ViewChild, ElementRef} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport {TranslateService} from '@ngx-translate/core';\nimport { Observable, of, BehaviorSubject } from 'rxjs';\nimport { map, filter, take } from 'rxjs/operators';\nimport { ISubscription } from 'rxjs/Subscription';\nimport { ProductsService } from '../../../core/services/products.service';\nimport { GetProductDetails, ResetProductDetails } from '../../store/actions/products.actions';\nimport { AddToCart } from '../../../cart/store/actions/cart.actions';\nimport { AppStates } from '../../../app.states';\nimport { LoginService } from '../../../core/services/login.service';\nimport { ProductDetails, ProductInfo} from '../../store/models/products.model';\nimport {ImageList} from '../../store/models/products.model';\n\ndeclare var lightGallery: Function;\n\n@Component({\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.scss']\n})\nexport class ProductDetailsComponent implements OnInit, OnDestroy {\n  slug: string;\n  productDetail$: Observable<ProductDetails>;\n  productDetailSubscribtion: ISubscription;\n  routeSubscribtion: ISubscription;\n  productId: string;\n  images: ImageList[];\n  slidesChangeMessage = '';\n  /*** Configurations: ***/\n  showErrorMsgs = true;\n  // TODO: add lnanguage toggle\n  defaultLanguage = 'en';\n  itemsPerSlide = 1;\n  maxItemsPerSlide = 3;\n  singleSlideOffset = false;\n  noWrap = false;\n  selectedQuantity = 1;\n  showNext = false;\n  showPrev = false;\n  // TODO : add max stock product amount in create product API or logic to update stock remaining (for now harcoding to 10 max)\n  maxQuantity = 10;\n  minQuantity = 1;\n\n  @ViewChild('lightGallery', {static: false}) lightgalleryID: ElementRef;\n\n  constructor(private store: Store<AppStates>,\n              private loginService: LoginService,\n              private router: Router,\n              private productsService: ProductsService,\n              private route: ActivatedRoute,\n              private translateService: TranslateService) {\n  }\n\n  ngOnInit() {\n    this.productDetail$ = this.store.select(store => {\n      if (store && store['productsReducer']) {\n        return store['productsReducer'];\n      }\n    }).pipe(\n      filter(productStore => productStore && productStore['uiStateProductDetails']),\n      map((res: any) => {\n        if (res && res.uiStateProductDetails && res.uiStateProductDetails.productInfo) {\n          this.productId = res.uiStateProductDetails.id;\n          this.images = res.uiStateProductDetails.productInfo.imageList;\n          this.itemsPerSlide = this.images.length < 3 ? this.images.length : 3;\n          return res.uiStateProductDetails;\n        } else {\n          return;\n        }\n      })\n    );\n\n    this.routeSubscribtion = this.route.params.subscribe(\n      (params: any) => {\n        this.slug = params['slug'];\n        this.store.dispatch(new GetProductDetails({ slug : this.slug }));\n      }\n    );\n\n    this.productDetail$.subscribe(productDetail => {\n      if (productDetail && productDetail.defaultMaxQuantity) {\n        this.maxQuantity = productDetail.defaultMaxQuantity;\n      }\n    });\n\n    // this.translateService.use(this.defaultLanguage);\n  }\n\n  ngOnDestroy() {\n    // this.routeSubscribtion.unsubscribe();\n    // this.productDetailSubscribtion.unsubscribe();\n    this.store.dispatch(new ResetProductDetails());\n  }\n\n  addToCart() {\n    // TODO: add option to add number of items\n    this.store.dispatch(new AddToCart(\n      {\n        id : this.productId,\n        quantity: this.selectedQuantity\n      }\n    ));\n  }\n\n  initGallery(index?: number) {\n    lightGallery(this.lightgalleryID.nativeElement, {\n      thumbnail: true,\n      download : false,\n      dynamic  : true,\n      index: index ? index : 0,\n      dynamicEl: this.images.map(image => {\n        return {\n          'src': image.imageUrl,\n          'thumb': image.imageUrl\n        };\n      })\n    });\n  }\n\n  onSelectedQuantity(quantity) {\n    this.selectedQuantity = quantity;\n  }\n\n  countSum(price, selectedQuantity) {\n    return Math.round(price * selectedQuantity * 100)/100;\n  }\n\n  getProductUrl(product) {\n    if (product && product.imageList.length > 0) {\n      const url = product.imageList[0]['imageUrl'] ? product.imageList[0]['imageUrl'] :\n        product.imageList[0]['largeUrl'] ? product.imageList[0]['largeUrl'] : '/assets/images/teapod.jpeg';\n      // console.log(url);\n      return url;\n    } else if (product && product.imageList.length === 0) {\n      return  '/assets/images/teapod.jpeg';\n    }\n  }\n\n  onSlideRangeChange(indexes: number[]): void {\n    // this.slidesChangeMessage = `Slides have been switched: ${indexes}`;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".order-quantity {\n  margin: 10px 0px;\n}\n.custom-gallery {\n  max-width: 200px;\n  box-shadow: 0px 0px 2px lightslategrey;\n  //margin: 8px;\n  border-radius: 3px;\n}\n@media only screen and (max-width: 575px) {\n  .custom-gallery {\n    max-width: 180px;\n    box-shadow: 0px 0px 2px lightslategrey;\n    border-radius: 3px;\n  }\n}\n",
                    "styleUrl": "./product-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container default-page-background\">\n  <div class=\"row\">\n    <div class=\"col-12 text-center\">\n      <h1 class=\"product-name\">{{(productDetail$  | async)?.name | titlecase }}</h1>\n    </div>\n  </div>\n  <div class=\"row\">\n\n    <div *ngIf=\"(productDetail$  | async)\" class=\"col-sm-4 text-center product-image\">\n      <img [src]=\"getProductUrl((productDetail$  | async)?.productInfo)\"\n           onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\"\n           class=\"product-image\" alt=\"product image\"\n           (click)=\"initGallery()\">\n\n      <div #lightGallery class=\"col-12 images-container\">\n        <div class=\"row\" id=\"aniimated-thumbnials\" *ngIf=\"(productDetail$  | async)?.productInfo\">\n          <carousel [singleSlideOffset]=\"singleSlideOffset\"\n                    [noWrap]=\"noWrap\"\n                    [itemsPerSlide]=\"itemsPerSlide\"\n                    [interval]=\"false\"\n                    [startFromIndex]=\"1\"\n                    (slideRangeChange)=\"onSlideRangeChange($event)\"\n                    [ngClass]=\"{'show-nav': images.length >= maxItemsPerSlide, 'hide-hav': images.length < maxItemsPerSlide}\">\n            <slide *ngFor=\"let image of (productDetail$  | async)?.productInfo.imageList; let i = index\" style=\"margin-right: 0px; !important; margin-right: 10px;\">\n              <img class=\"image-product-details\" [src]=\"image['imageUrl']\"\n                   onerror=\"this.onerror=null;this.src='/assets/images/no_image.png';\"\n                   alt=\"product image\" (click)=\"initGallery(i)\" style=\"max-width: 200px\">\n            </slide>\n          </carousel>\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"col-sm-8 float-right product-description\">\n      <div class=\"container\">\n\n          <div class=\"row product-description\">\n            <div class=\"col-5\">{{ 'product.productDescription' | translate }}: </div>\n            <div class=\"col-7\">{{(productDetail$  | async)?.description | titlecase}}</div>\n          </div>\n\n          <div class=\"row product-price\">\n            <div class=\"col-5\">{{ 'product.price' | translate }}:</div>\n            <div class=\"col-7\">$ {{(productDetail$  | async)?.price}}</div>\n          </div>\n\n          <div class=\"row product-add-to-card\">\n            <div class=\"col-5\">\n              {{ 'product.availableOnStock' | translate }}:\n            </div>\n            <div class=\"col-7\">\n              {{((productDetail$  | async)?.defaultMaxQuantity || maxQuantity) - selectedQuantity}} pcs\n            </div>\n          </div>\n\n          <add-to-cart class=\"order-quantity\"\n            [maxQuantity]=\"(productDetail$  | async)?.defaultMaxQuantity || maxQuantity\"\n            [minQuantity]=\"minQuantity\"\n            (selectedQuantity)=\"onSelectedQuantity($event)\"\n          ></add-to-cart>\n\n          <div class=\"row order-total\">\n            <div class=\"col-5\">{{ 'product.sum' | translate }}:</div>\n            <div class=\"col-7\">$ {{countSum( (productDetail$  | async)?.price,  selectedQuantity )}}</div>\n          </div>\n\n      </div>\n      <div class=\"row text-center\">\n        <div class=\"col-12 add-to-cart\">\n          <button (click)=\"addToCart()\" class=\"btn btn-primary btn-sm\" type=\"button\">{{ 'product.addToCart' | translate }}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"row product-rating\">\n    <div class=\"col-sm-12\">\n          <span class=\"align-bottom\">\n            <i class=\"glyphicon glyphicon-star-empty\"></i>\n            <i class=\"glyphicon glyphicon-star-empty\"></i>\n            <i class=\"glyphicon glyphicon-star-empty\"></i>\n            <i class=\"glyphicon glyphicon-star-empty\"></i>\n            <i class=\"glyphicon glyphicon-star-empty\"></i>\n          </span>\n    </div>\n  </div>\n\n<!--  <pre class=\"card card-block card-header\">{{slidesChangeMessage}}</pre>-->\n  <alert type=\"danger\" *ngIf='showErrorMsgs && (productDetail$ | async)?.error'>\n    <strong>{{(productDetail$ | async)?.error}} <a routerLink=\"/logout\"> Login </a> </strong>\n  </alert>\n\n\n</div>\n\n\n\n"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-19ccd8145890396557503b9cb1f17f9c",
            "file": "src/app/products/components/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./product-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "approveModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "columns",
                    "defaultValue": "3",
                    "type": "\"3\" | \"4\" | \"5\"",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "confirmation_template",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'confirmation_template', {static: false}"
                        }
                    ]
                },
                {
                    "name": "confirmationModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "deleteProduct",
                    "type": "ProductDetails",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "deleteProductState",
                    "defaultValue": "{action: undefined, state: undefined}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "deleteProductSubject",
                    "defaultValue": "new BehaviorSubject({action: undefined, state: undefined})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "error_modal",
                    "type": "ModalDirective",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'error_modal', {static: false}"
                        }
                    ]
                },
                {
                    "name": "errorModal",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "products$",
                    "type": "Observable<Products[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sidebarPosition",
                    "defaultValue": "'start'",
                    "type": "\"start\" | \"end\"",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "viewMode",
                    "defaultValue": "'grid'",
                    "type": "\"grid\" | \"grid-with-features\" | \"list\"",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProductConfirmation",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>"
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ProductDetails"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteProduct",
                            "type": "ProductDetails",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductUrl",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "removeItemFromProductList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport { BsModalService, BsModalRef, ModalDirective } from 'ngx-bootstrap/modal';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport { GetProducts } from '../../store/actions/products.actions';\nimport { AppStates } from '../../../app.states';\nimport { Products } from '../../store/models/products.model';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { SessionService } from '../../../core/services/session.service';\nimport { RemoveItemFromProductList } from '../../store/actions/products.actions';\nimport { ProductDetails} from '../../store/models/products.model';\n\n@Component({\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.scss']\n})\nexport class ProductListComponent implements OnInit {\n\n  public products$: Observable<Products[]>;\n  public error = false;\n  @ViewChild('confirmation_template', {'static': false}) confirmation_template: ModalDirective;\n  @ViewChild('error_modal', {'static': false}) error_modal: ModalDirective;\n  approveModal: BsModalRef | null;\n  confirmationModal: BsModalRef | null;\n  errorModal: BsModalRef | null;\n  deleteProduct: ProductDetails;\n  deleteProductState: {action: string; state: string; } = {action: undefined, state: undefined};\n  deleteProductSubject: BehaviorSubject<{action: string; state: string;}> = new BehaviorSubject({action: undefined, state: undefined});\n  // Template basic settings:\n  filters: any[] = [];\n  sidebarPosition: 'start'|'end' = 'start';\n  viewMode: 'grid'|'grid-with-features'|'list' = 'grid';\n  columns: 3|4|5 = 3;\n\n  constructor(private store: Store<AppStates>,\n              private sessionService: SessionService,\n              private router: Router,\n              private modalService: BsModalService\n            ) {\n\n    this.products$ = this.store.select(\n      res => {\n        if (res && res['userLoginReducer'] ) {\n          if (res['userLoginReducer']['errorLoading']  &&\n            res['userLoginReducer']['errorLoading']['error_message'] === 'remove_product_error') {\n            Object.assign(this.deleteProductState, { state: 'delete_product_error' });\n          } else {\n            Object.assign(this.deleteProductState, { state: 'no_errors' });\n          }\n          this.deleteProductSubject.next(this.deleteProductState);\n        } if (res && res['productsReducer']) {\n          return res['productsReducer'];\n        }\n      }\n    ).pipe(map((v: any) => {\n        if (v) {\n          return v.storeData;\n        }\n    }));\n  }\n\n  ngOnInit() {\n    if (this.sessionService.getTokenFromStorage() != null ) {\n      this.store.dispatch(new GetProducts());\n    } else {\n      this.router.navigate(['/login']);\n    }\n\n    this.deleteProductSubject.subscribe( (status: any) => {\n\n      if (status.state === 'delete_product_error' && status.action === 'delete_product') {\n\n        if (this.confirmationModal) {\n          this.confirmationModal.hide();\n        }\n        if (this.approveModal) {\n          this.approveModal.hide();\n        }\n        if (!this.errorModal) {\n          this.errorModal = this.modalService.show(this.error_modal, {class: 'modal-lg'});\n        } else {\n        }\n\n      } else if (status.state === 'no_error' && status.action === 'delete_product') {\n          if (this.errorModal) {this.errorModal.hide()}\n          if (!this.confirmationModal) {this.confirmationModal = this.modalService.show(this.confirmation_template, { class: 'modal-lg' })}\n        } else {\n      //  TODO: modify this place\n      }\n\n    });\n  }\n\n  removeItemFromProductList() {\n    this.store.dispatch(new RemoveItemFromProductList(\n      {\n        id : this.deleteProduct.id\n      }\n    ));\n    Object.assign(this.deleteProductState, { action: 'delete_product', state: 'no_errors' });\n    this.deleteProductSubject.next(this.deleteProductState);\n    this.approveModal.hide();\n  }\n\n  deleteProductConfirmation(template: TemplateRef<any>, deleteProduct: ProductDetails) {\n    this.deleteProduct = deleteProduct;\n    this.errorModal = null;\n    this.approveModal = this.modalService.show(template, { class: 'modal-lg' });\n  }\n\n  getProductUrl(product) {\n    if (product && product.productInfo && product.productInfo.imageList.length > 0) {\n      return product.productInfo.imageList[0]['imageUrl'] ? product.productInfo.imageList[0]['imageUrl'] :\n        product.productInfo.imageList[0]['largeUrl'] ? product.productInfo.imageList[0]['largeUrl'] : '/assets/images/teapod.jpeg';\n    } else {\n      return  '/assets/images/teapod.jpeg';\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".products-parent-block {\n\n}\n\n/*.align-items-center:after {*/\n  /*content: \"X\";*/\n  /*position: relative;*/\n  /*top: 0%;*/\n  /*right: -80vw;*/\n/*}*/\n/*.product-name:after {*/\n  /*content: \"X\";*/\n  /*position: relative;*/\n  /*top: 0px;*/\n  /*right: 0px;*/\n/*}*/\n",
                    "styleUrl": "./product-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--<div class=\"container-fluid default-page-background\">-->\n  <!--<div class=\"row products-parent-block\">-->\n    <!--<div class=\"col-12\" *ngIf=\"!error\">-->\n      <!--<div class=\"container thumbnail product-details-container\" *ngFor='let product of products$ | async; last as isLast '>-->\n\n        <!--<div class=\"row\">-->\n          <!--<div class=\"col-10 product-name text-center\">-->\n            <!--{{product.name | titlecase}}-->\n          <!--</div>-->\n          <!--<div class=\"col-2 text-right\">-->\n            <!--<button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"deleteProductConfirmation(approval_template, product)\">-->\n              <!--<span aria-hidden=\"true\">&times;</span>-->\n            <!--</button>-->\n          <!--</div>-->\n        <!--</div>-->\n\n        <!--<div class=\"row align-items-center \">-->\n\n          <!--<div class=\"col-sm-4 text-center product-image\">-->\n            <!--<a [routerLink]=\"['/details/' + product?.slug]\" class=\"\">-->\n              <!--<img class=\"product-image\" [src]=\"getProductUrl(product)\" onerror=\"this.onerror=null;this.src='/assets/images/teapod.jpeg';\" alt=\"{{product.name}}\">-->\n            <!--</a>-->\n          <!--</div>-->\n\n          <!--<div class=\"col-sm-8 float-right product-description\">-->\n            <!--<div class=\"container-fluid\">-->\n\n                  <!--<div class=\"row product-description\">-->\n                    <!--<div class=\"col-5 col-xs-12\">{{ 'product.productDescription' | translate }}: </div>-->\n                    <!--<div class=\"col-7 col-xs-12\">{{product.description}}</div>-->\n                  <!--</div>-->\n\n                  <!--<div class=\"row product-price\">-->\n                    <!--<div class=\"col-5 col-xs-12\">{{ 'product.price' | translate }}:</div>-->\n                    <!--<div class=\"col-7 col-xs-12\">$ {{product.price}}</div>-->\n                  <!--</div>-->\n\n                  <!--<div class=\"row\" *ngIf=\"product.defaultMaxQuantity\">-->\n                    <!--<div class=\"col-5 col-xs-12\">{{ 'product.quantity' | translate }}:</div>-->\n                    <!--<div class=\"col-7 col-xs-12\">{{product.defaultMaxQuantity}}</div>-->\n                  <!--</div>-->\n\n              <!--<div class=\"row\">-->\n              <!--<span class=\"align-bottom product-rating\">-->\n                <!--<i class=\"glyphicon glyphicon-star-empty\"></i>-->\n                <!--<i class=\"glyphicon glyphicon-star-empty\"></i>-->\n                <!--<i class=\"glyphicon glyphicon-star-empty\"></i>-->\n                <!--<i class=\"glyphicon glyphicon-star-empty\"></i>-->\n                <!--<i class=\"glyphicon glyphicon-star-empty\"></i>-->\n              <!--</span>-->\n              <!--</div>-->\n            <!--</div>-->\n          <!--</div>-->\n\n          <!--&lt;!&ndash;<div class=\"sm-screen-product-divider\" *ngIf=\"!isLast\"></div>&ndash;&gt;-->\n\n        <!--</div>-->\n\n      <!--</div>-->\n    <!--</div>-->\n  <!--</div>-->\n<!--</div>-->\n\n<alert type=\"danger\" *ngIf='error'>\n  <strong>Something went wrong. Please login again. <a href=\"/logout\"> Login </a> </strong>\n</alert>\n<!--Product from purchased Template //start//-->\n<!--<div class=\"block\">-->\n  <!--<app-products-view [products]=\"(products$ | async)\" offcanvas=\"always\"></app-products-view>-->\n<!--</div>-->\n<app-page-header [header]=\"'Electronics'\" [breadcrumbs]=\"[\n    {label: 'Home',         url: '../'},\n    {label: 'Electronics', url: ''}\n]\"></app-page-header>\n\n<ng-container *ngIf=\"columns === 3\">\n  <div class=\"container\">\n    <div class=\"shop-layout shop-layout--sidebar--{{ sidebarPosition }}\">\n<!--      <div class=\"shop-layout__sidebar\" *ngIf=\"sidebarPosition === 'start'\">-->\n<!--        <app-shop-sidebar [filters]=\"filters\" offcanvas=\"mobile\"></app-shop-sidebar>-->\n<!--      </div>-->\n      <div class=\"shop-layout__content\">\n        <div class=\"block\">\n          <app-products-view [products]=\"(products$ | async)\" [layout]=\"viewMode\" grid=\"grid-3-sidebar\" [limit]=\"15\" offcanvas=\"mobile\"></app-products-view>\n        </div>\n      </div>\n      <div class=\"shop-layout__sidebar\" *ngIf=\"sidebarPosition === 'end'\">\n        <app-shop-sidebar [filters]=\"filters\" offcanvas=\"mobile\"></app-shop-sidebar>\n      </div>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"columns > 3\">\n  <div class=\"container\">\n    <div class=\"block\">\n      <app-products-view [products]=\"(products$ | async)\" [layout]=\"viewMode\" [grid]=\"'grid-'+columns+'-full'\" [limit]=\"15\" offcanvas=\"always\"></app-products-view>\n    </div>\n    <app-shop-sidebar [filters]=\"filters\" offcanvas=\"always\"></app-shop-sidebar>\n  </div>\n</ng-container>\n\n<!-- PRODUCT CARD FROM TEMPLATE -->\n\n<!--<div class=\"products-view\" *ngFor='let product of products$ | async; last as isLast '>-->\n  <!--<div class=\"products-view__list products-list\" [attr.data-layout]=\"layout != 'list' ? grid : layout\" [attr.data-with-features]=\"layout == 'grid-with-features' ? 'true' : 'false'\">-->\n    <!--<div class=\"products-list__body\">-->\n      <!--<div class=\"products-list__item\">-->\n        <!--<app-product-card [product]=\"product\"></app-product-card>-->\n      <!--</div>-->\n    <!--</div>-->\n  <!--</div>-->\n<!--</div>-->\n\n<!--Product from purchased Template //end//-->\n<ng-template #approval_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Delete product confirmation</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Cancel delete product button\" (click)=\"approveModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>Please confirm you want to remove \"{{deleteProduct.name}}\".</p>\n    <p>Once you remove product, the item will be not available for sale.</p>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeItemFromProductList()\">Delete product</button>\n  </div>\n</ng-template>\n\n\n<ng-template #confirmation_template>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Product removal confirmation</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close submit order confirmation\" (click)=\"confirmationModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    Product has been removed<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirmationModal.hide()\" (click)=\"approveModal.hide()\">Ok</button>\n  </div>\n</ng-template>\n\n\n<ng-template #error_modal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Error message</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close error message\" (click)=\"errorModal.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    Sorry, there was an error.\n    We are unable to remove the product at the moment.<br>\n    Please try again later or contact administrator.<br>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"errorModal.hide()\" >Ok</button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ProductsViewComponent",
            "id": "component-ProductsViewComponent-1159d4e0d169f59820e9866d81d28658",
            "file": "src/app/products/components/products-view/products-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products-view",
            "styleUrls": [
                "./products-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "grid",
                    "defaultValue": "'grid-3-sidebar'",
                    "line": 13,
                    "type": "\"grid-3-sidebar\" | \"grid-4-full\" | \"grid-5-full\""
                },
                {
                    "name": "layout",
                    "defaultValue": "'grid'",
                    "line": 12,
                    "type": "Layout"
                },
                {
                    "name": "limit",
                    "defaultValue": "16",
                    "line": 14
                },
                {
                    "name": "offcanvas",
                    "defaultValue": "'mobile'",
                    "line": 15,
                    "type": "\"always\" | \"mobile\""
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLayout",
                    "args": [
                        {
                            "name": "value",
                            "type": "Layout"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Layout",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport type Layout = 'grid'|'grid-with-features'|'list';\r\n\r\n@Component({\r\n    selector: 'app-products-view',\r\n    templateUrl: './products-view.component.html',\r\n    styleUrls: ['./products-view.component.scss']\r\n})\r\nexport class ProductsViewComponent {\r\n    @Input() products: any = [];\r\n    @Input() layout: Layout = 'grid';\r\n    @Input() grid: 'grid-3-sidebar'|'grid-4-full'|'grid-5-full' = 'grid-3-sidebar';\r\n    @Input() limit = 16;\r\n    @Input() offcanvas: 'always'|'mobile' = 'mobile';\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    setLayout(value: Layout): void {\r\n        this.layout = value;\r\n    }\r\n\r\n    onPageChange(page: number): void {\r\n        // console.log(page);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./products-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div class=\"products-view\">\r\n\r\n    <div class=\"products-view__list products-list\" [attr.data-layout]=\"layout != 'list' ? grid : layout\" [attr.data-with-features]=\"layout == 'grid-with-features' ? 'true' : 'false'\">\r\n        <div class=\"products-list__body\">\r\n            <div *ngFor=\"let product of products\" class=\"products-list__item\">\r\n                <app-product-card\r\n                  [product]=\"product\"\r\n                ></app-product-card>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n"
        },
        {
            "name": "QuickviewComponent",
            "id": "component-QuickviewComponent-8ff55c3f6e1f3954325ce6298d5c376f",
            "file": "src/app/shared/components/quickview/quickview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quickview",
            "styleUrls": [
                "./quickview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quickview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "modalRef",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modal', {read: TemplateRef, static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, OnDestroy, TemplateRef, ViewChild } from '@angular/core';\r\nimport { QuickviewService } from '../../services/quickview.service';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { Product } from '../../interfaces/product';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'app-quickview',\r\n    templateUrl: './quickview.component.html',\r\n    styleUrls: ['./quickview.component.scss']\r\n})\r\nexport class QuickviewComponent implements AfterViewInit, OnDestroy {\r\n    private destroy$: Subject<void> = new Subject();\r\n\r\n    @ViewChild('modal', { read: TemplateRef, static: false }) template: TemplateRef<any>;\r\n\r\n    modalRef: BsModalRef;\r\n    product: Product;\r\n\r\n    constructor(\r\n        private quickview: QuickviewService,\r\n        private modalService: BsModalService\r\n    ) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.quickview.show$.pipe(takeUntil(this.destroy$)).subscribe(product => {\r\n            if (this.modalRef) {\r\n                this.modalRef.hide();\r\n            }\r\n\r\n            this.product = product;\r\n            this.modalRef = this.modalService.show(this.template, {class: 'modal-dialog-centered modal-xl'});\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./quickview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "quickview",
                        "type": "QuickviewService"
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "quickview",
                        "type": "QuickviewService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<ng-template #modal>\r\n    <div class=\"quickview\">\r\n        <button class=\"quickview__close\" type=\"button\" appClick (click)=\"modalRef.hide()\">\r\n            <app-icon name=\"cross-20\" size=\"20\"></app-icon>\r\n        </button>\r\n\r\n        <app-product [product]=\"product\" layout=\"quickview\"></app-product>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "RatingComponent",
            "id": "component-RatingComponent-20acb5a90dd6819207041f3e9503a68d",
            "file": "src/app/shared/components/rating/rating.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rating",
            "styleUrls": [
                "./rating.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rating.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "defaultValue": "0",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-rating',\r\n    templateUrl: './rating.component.html',\r\n    styleUrls: ['./rating.component.scss']\r\n})\r\nexport class RatingComponent {\r\n    @Input() value = 0;\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./rating.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"rating\">\r\n    <div class=\"rating__body\">\r\n        <ng-container *ngFor=\"let i of [1, 2, 3, 4, 5]\">\r\n            <svg class=\"rating__star\" [ngClass]=\"{'rating__star--active': value >= i}\" width=\"13px\" height=\"12px\">\r\n                <g class=\"rating__fill\"><use xlink:href=\"assets/images/sprite.svg#star-normal\"></use></g>\r\n                <g class=\"rating__stroke\"><use xlink:href=\"assets/images/sprite.svg#star-normal-stroke\"></use></g>\r\n            </svg>\r\n\r\n            <div class=\"rating__star rating__star--only-edge\" [ngClass]=\"{'rating__star--active': value >= i}\">\r\n                <div class=\"rating__fill\"><div class=\"fake-svg-icon\"></div></div>\r\n                <div class=\"rating__stroke\"><div class=\"fake-svg-icon\"></div></div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-847c377d40c2ee0597d25daa6f1b8b86",
            "file": "src/app/auth/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "ErrorMessage",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {map} from 'rxjs/operators';\nimport {Component, OnInit} from '@angular/core';\nimport { Router } from '@angular/router';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport {getAuthSelector, loginErrorMapper, registerUserMapper} from '../../store/select/auth.selectors';\nimport { AppStates } from '../../../app.states';\nimport { LoginService } from '../../../core/services/login.service';\nimport { RegisterUserAction } from '../../store/actions/login.actions';\nimport {ErrorMessage} from '../login/login.component';\n\n@Component({\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  errorMessage: ErrorMessage;\n  loading = false;\n\n  constructor(private router: Router,\n              private loginService: LoginService,\n              private store: Store<AppStates>,\n              private fb: FormBuilder) {\n              }\n\n    ngOnInit() {\n      this.store.select( getAuthSelector).pipe(\n      map(registerUserMapper))\n      .subscribe(res => {\n        if (res && res.userName) {\n          this.router.navigate(['/login']);\n        }\n      });\n\n      this.registerForm = this.fb.group({\n        userName: [null, [Validators.required, Validators.minLength(6)]],\n        email:    [null, [Validators.required, Validators.minLength(6), Validators.email]],\n        mobile:   [null, [Validators.required, Validators.minLength(9), Validators.maxLength(10), Validators.pattern('^[0-9]+$')]],\n        password: [null, [Validators.required, Validators.minLength(6)]],\n        confirmPassword: [null, [Validators.required, Validators.minLength(6)]]\n      });\n\n      // Error handing\n      this.store.select(getAuthSelector).pipe(\n        map(loginErrorMapper)\n      )\n      .subscribe((error: ErrorMessage) => {\n        if ( error && error.message ) {\n          this.errorMessage = error;\n          this.loading = false;\n        }\n      });\n    }\n\n    register() {\n      this.store.dispatch(new RegisterUserAction(this.registerForm.value));\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-frame login-register-page\">\n\n  <alert type=\"danger\" *ngIf='errorMessage'>\n    <strong *ngIf=\"errorMessage?.status != 500\">{{errorMessage.message.errorMessage}} </strong>\n    <strong *ngIf=\"errorMessage?.status == 500 || 503 || 0\">{{ 'loginProcess.errorNetworkMessage' | translate }} </strong>\n  </alert>\n\n  <div class=\"row text-center register-or-login-main\">\n    <div class=\"col-12 col-sm-6 register-or-login-other\">\n      <a routerLink=\"/login\">{{ 'registerProcess.loginLink' | translate }}</a>\n    </div>\n    <div class=\"col-12 col-sm-6 register-or-login-selected\">\n      <a routerLink=\"/register\">{{ 'registerProcess.registerLink' | translate }}</a>\n    </div>\n  </div>\n\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" class=\"login-or-register-form\">\n    <div class=\"form-group\">\n      <label for=\"userName\"></label>\n      <input formControlName=\"userName\"  class=\"form-control custom-login\" [ngClass]=\"{'invalid-input': (registerForm.get('userName').touched || registerForm.get('userName').dirty)  && !registerForm.value.userName}\" id=\"userName\" placeholder=\"user name\">\n      <span *ngIf=\"(registerForm.get('userName').touched || registerForm.get('userName').dirty)  && !registerForm.get('userName').valid\" class=\"validation-message\"><i>{{'registerProcess.validationErrorMessages.userName' | translate}}</i></span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"email\"></label>\n      <input formControlName=\"email\" type=\"email\" class=\"form-control custom-login\" [ngClass]=\"{'invalid-input': (registerForm.get('email').touched || registerForm.get('email').dirty)  && !registerForm.get('email').valid}\" id=\"email\" placeholder=\"email\">\n      <span *ngIf=\"(registerForm.get('email').touched || registerForm.get('email').dirty)  && !registerForm.get('email').valid\" class=\"validation-message\"><i>{{'registerProcess.validationErrorMessages.email' | translate}}</i></span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"mobile\"></label>\n      <input formControlName=\"mobile\" type=\"tel\" class=\"form-control custom-login\" [ngClass]=\"{'invalid-input': (registerForm.get('mobile').touched || registerForm.get('mobile').dirty)  && !registerForm.get('mobile').valid}\" id=\"mobile\" placeholder=\"mobile\">\n      <span *ngIf=\"(registerForm.get('mobile').touched || registerForm.get('mobile').dirty)  && !registerForm.get('mobile').valid\" class=\"validation-message\"><i>{{'registerProcess.validationErrorMessages.phone' | translate}}</i></span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\"></label>\n      <input formControlName=\"password\" type=\"password\" class=\"form-control custom-login\" [ngClass]=\"{'invalid-input': (registerForm.get('password').touched || registerForm.get('password').dirty)  && !registerForm.get('password').valid}\" id=\"password\" placeholder=\"password\">\n      <span *ngIf=\"(registerForm.get('password').touched || registerForm.get('password').dirty) && !registerForm.get('password').valid\" class=\"validation-message\"><i>{{'registerProcess.validationErrorMessages.password' | translate}}</i></span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"confirm_password\"></label>\n      <input formControlName=\"confirmPassword\" type=\"password\" class=\"form-control custom-login\" [ngClass]=\"{'invalid-input': (registerForm.get('password').value !== registerForm.get('confirmPassword').value) }\" id=\"confirm_password\" placeholder=\"confirm password\">\n      <span *ngIf=\"registerForm.get('password').value !== registerForm.get('confirmPassword').value\"  class=\"validation-message\"><i>{{'registerProcess.validationErrorMessages.confirmPassword' | translate}}</i></span>\n    </div>\n    <div class=\"btn-box\">\n      <button [disabled]=\"registerForm.status !=='VALID' || !registerForm.value.userName ||\n            !registerForm.value.password || !registerForm.value.confirmPassword\" type=\"submit\" class=\"btn btn-primary login-btn\">{{'registerProcess.submitButton' | translate}}</button>\n\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "ShopSidebarComponent",
            "id": "component-ShopSidebarComponent-d106fcfb47ca57b3e789dcbcd25eef18",
            "file": "src/app/products/components/child-components/shop-sidebar/shop-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shop-sidebar",
            "styleUrls": [
                "./shop-sidebar.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./shop-sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "line": 19,
                    "type": "ProductFilter[]"
                },
                {
                    "name": "offcanvas",
                    "defaultValue": "'mobile'",
                    "line": 20,
                    "type": "\"always\" | \"mobile\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "products",
                    "defaultValue": "products",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sidebar",
                    "type": "ShopSidebarService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, OnDestroy, OnInit, PLATFORM_ID } from '@angular/core';\nimport { ProductFilter } from '../../../../shared/interfaces/product-filter';\nimport { Product } from '../../../../shared/interfaces/product';\nimport { products } from '../../../../../data/shop-products';\nimport { ShopSidebarService } from '../../../services/shop-sidebar.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { fromMatchMedia } from '../../../../shared/functions/rxjs/fromMatchMedia';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n    selector: 'app-shop-sidebar',\n    templateUrl: './shop-sidebar.component.html',\n    styleUrls: ['./shop-sidebar.component.sass']\n})\nexport class ShopSidebarComponent implements OnInit, OnDestroy {\n    private destroy$: Subject<void> = new Subject();\n\n    @Input() filters: ProductFilter[] = [];\n    @Input() offcanvas: 'always'|'mobile' = 'mobile';\n\n    products: Product[] = products;\n    isOpen = false;\n\n    constructor(\n        public sidebar: ShopSidebarService,\n        @Inject(PLATFORM_ID)\n        private platformId: any\n    ) { }\n\n    ngOnInit(): void {\n        this.sidebar.isOpen$.pipe(takeUntil(this.destroy$)).subscribe(isOpen => {\n            if (isOpen) {\n                this.open();\n            } else {\n                this.close();\n            }\n        });\n\n        if (isPlatformBrowser(this.platformId)) {\n            fromMatchMedia('(max-width: 991px)').pipe(takeUntil(this.destroy$)).subscribe(media => {\n                if (this.offcanvas === 'mobile' && this.isOpen && !media.matches) {\n                    this.close();\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private open(): void {\n        if (isPlatformBrowser(this.platformId)) {\n            const bodyWidth = document.body.offsetWidth;\n\n            document.body.style.overflow = 'hidden';\n            document.body.style.paddingRight = (document.body.offsetWidth - bodyWidth) + 'px';\n        }\n\n        this.isOpen = true;\n    }\n\n    private close(): void {\n        if (isPlatformBrowser(this.platformId)) {\n            document.body.style.overflow = 'auto';\n            document.body.style.paddingRight = '';\n        }\n\n        this.isOpen = false;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shop-sidebar.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sidebar",
                        "type": "ShopSidebarService"
                    },
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "sidebar",
                        "type": "ShopSidebarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"block block-sidebar\" [ngClass]=\"{\r\n    'block-sidebar--offcanvas--always': offcanvas === 'always',\r\n    'block-sidebar--offcanvas--mobile': offcanvas === 'mobile',\r\n    'block-sidebar--open': isOpen\r\n}\">\r\n    <div class=\"block-sidebar__backdrop\" (click)=\"sidebar.close()\"></div>\r\n    <div class=\"block-sidebar__body\">\r\n        <div class=\"block-sidebar__header\">\r\n            <div class=\"block-sidebar__title\">Filters</div>\r\n            <button class=\"block-sidebar__close\" type=\"button\" (click)=\"sidebar.close()\">\r\n                <app-icon name=\"cross-20\" size=\"20\"></app-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"block-sidebar__item\">\r\n            <app-widget-filters [filters]=\"filters\" [offcanvas]=\"offcanvas\"></app-widget-filters>\r\n        </div>\r\n        <div class=\"block-sidebar__item d-none d-lg-block\" *ngIf=\"offcanvas === 'mobile'\">\r\n            <app-widget-products header=\"Latest Products\" [products]=\"products\"></app-widget-products>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "UploadImagesComponent",
            "id": "component-UploadImagesComponent-709e5a4969f53e0afbf18cf4ee6d0124",
            "file": "src/app/products/components/create-product/upload-images/upload-images.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./upload-images.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upload-images.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fileDataUrl",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "image",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'image', {static: false}"
                        }
                    ]
                },
                {
                    "name": "productDetail$",
                    "type": "Observable<ProductDetails>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "productId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedImageToUpload",
                    "defaultValue": "null",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "uploadedImage",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "uploadedImage",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImageFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject, ViewChild, ElementRef } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppStates } from '../../../../app.states';\nimport { ProductsService } from '../../../../core/services/products.service';\nimport {UploadProductImage, GetProductDetails} from '../../../store/actions/products.actions';\n\nimport {map} from 'rxjs/operators';\nimport {Observable} from \"rxjs\";\nimport {ProductDetails} from \"../../../store/models/products.model\";\n\n@Component({\n  templateUrl: './upload-images.component.html',\n  styleUrls: ['./upload-images.component.scss']\n})\nexport class UploadImagesComponent implements OnInit {\n\n    @ViewChild('image', {'static': false}) image: ElementRef;\n    fileDataUrl: any;\n    slug: string;\n    public productDetail$: Observable<ProductDetails>;\n    private productId: string;\n    selectedImageToUpload: File = null;\n\n    constructor( @Inject(FormBuilder) fb: FormBuilder,\n                private productsService: ProductsService,\n                private router: Router,\n                private route: ActivatedRoute,\n                private store: Store<AppStates> ) {\n\n            this.productDetail$ = this.store.select(store => {\n              if (store && store['productsReducer']) {\n                return store['productsReducer'];\n              }\n            }).pipe(map((res: any) => {\n              if (res && res.uiStateProductDetails) {\n                this.productId = res.uiStateProductDetails.id;\n                return res.uiStateProductDetails;\n              } else {\n                return;\n              }\n            }));\n\n          this.store.select(store => {\n            if (store && store['productsReducer'] && store['productsReducer']['imageUploaded']) {\n              return store['productsReducer']['imageUploaded'];\n            }\n          }).pipe(map((res: any) => res))\n            .subscribe(uploadedImage => {\n              if(this.slug) {\n                this.store.dispatch(new GetProductDetails({ slug : this.slug }));\n              }\n            });\n\n      }\n\n      ngOnInit() {\n        this.route.params.subscribe(\n          (params: any) => {\n            this.slug = params['slug'];\n            this.store.dispatch(new GetProductDetails({ slug : this.slug }));\n          }\n        );\n      }\n\n      uploadImage(uploadedImage: any) {\n        this.selectedImageToUpload = <File>uploadedImage.target.files[0];\n      }\n\n      uploadImageFile() {\n\n        this.store.dispatch(new UploadProductImage({ file: this.selectedImageToUpload, productId: this.productId}));\n\n      }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./upload-images.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--<div class=\"form-frame default-page-background\">-->\n\n  <!--<div class=\"container\">-->\n    <!--<div class=\"row\">-->\n      <!--<div class=\"col-1\"></div>-->\n\n      <!--<div class=\"col-10\">-->\n        <!--<form [formGroup]=\"addProductForm\" (ngSubmit)=\"addProduct()\">-->\n          <!--<div class=\"form-group\">-->\n            <!--<label for=\"image-file-upload\">Upload image file:</label>-->\n            <!--<input #image type=\"file\" id=\"image-file-upload\" (change)=\"uploadImage()\">-->\n          <!--</div>-->\n          <!--<button [disabled]=\"!addProductForm.value.name || !addProductForm.value.price || addProductForm.status!=='VALID'\" type=\"submit\" class=\"btn btn-primary\">Add</button>-->\n        <!--</form>-->\n      <!--</div>-->\n\n      <!--<div class=\"col-1\"></div>-->\n    <!--</div>-->\n  <!--</div>-->\n\n<!--</div>-->\n<!--<div>{{errorMessage}}</div>-->\n\n\n<div class=\"container-fluid default-page-background\">\n  <div class=\"row\">\n    <div class=\"col-12 product-name text-center\">\n      {{(productDetail$  | async)?.name}}\n    </div>\n  </div>\n  <div class=\"row align-items-center\">\n    <div class=\"col-12 float-right product-description\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-12 product-description\">\n            <div class=\"row\">\n              <div class=\"col-5\">Description: </div>\n              <div class=\"col-7\">{{(productDetail$  | async)?.description}}</div>\n            </div>\n          </div>\n          <div class=\"col-12 product-price\">\n            <div class=\"row\">\n              <div class=\"col-5\">Price:</div>\n              <div class=\"col-7\">$ {{(productDetail$  | async)?.price}}</div>\n            </div>\n          </div>\n          <div class=\"col-12 images-container\">\n            <div class=\"row\">\n              <div class=\"col-12 col-md-6 col-lg-4\" *ngFor=\"let image of (productDetail$  | async)?.productInfo.imageList\">\n                <img class=\"image-product-details\"\n                     [src]=\"image.imageUrl\" alt=\"product image\">\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <label for=\"image-file-upload\">Select image file (max 1Mb):</label>\n  <input #image type=\"file\" id=\"image-file-upload\" (change)=\"uploadImage($event)\">\n  <button (click)=\"uploadImageFile()\">Upload file</button>\n</div>\n"
        },
        {
            "name": "UpperHeaderComponent",
            "id": "component-UpperHeaderComponent-aec3b38ab3690da1dae59038d9ff81f1",
            "file": "src/app/layout/header/components/upper-header/upper-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upper-header",
            "styleUrls": [
                "./upper-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upper-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "languages",
                    "defaultValue": "languages",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selectedLanguage",
                    "defaultValue": "'en'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onLanguageSelect",
                    "args": [
                        {
                            "name": "lang",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {TranslateService} from '@ngx-translate/core';\nimport { AppStates } from '../../../../app.states';\nimport { SelectLanguageAction } from '../../../../auth/store/actions/login.actions';\n\nimport { languages} from '../../../../core/consts/consts';\nimport { SessionService } from '../../../../core/services/session.service';\n\n@Component({\n  selector: 'app-upper-header',\n  templateUrl: './upper-header.component.html',\n  styleUrls: ['./upper-header.component.scss']\n})\nexport class UpperHeaderComponent implements OnInit{\n  languages: string[] = languages;\n  selectedLanguage = 'en';\n\n  constructor(private sessionService: SessionService,\n              private store: Store<AppStates>,\n              private translateService: TranslateService) {\n  }\n\n  ngOnInit(){}\n\n  logout() {\n    this.sessionService.logout();\n  }\n  onLanguageSelect(lang) {\n    this.store.dispatch(new SelectLanguageAction(lang));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./upper-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppStates>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul class=\"navbar-nav mr-auto navbar-custom-upper-header\">\n  <li class=\"nav-item active\">\n    <a class=\"nav-link\" href=\"#\">{{ 'upperHeader.home' | translate }}</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"#\">{{ 'upperHeader.product' | translate }}</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"#\">{{ 'upperHeader.about' | translate }}</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"#\">{{ 'upperHeader.contacts' | translate }}</a>\n  </li>\n  <li class=\"nav-item language-collapse mobile-hide-item\">\n    {{ 'header.language' | translate }}\n    <select class=\"language-selector\" id=\"languageSelectorMobile\"\n            [ngModel]=\"selectedLanguage\"\n            (ngModelChange)=\"onLanguageSelect($event)\">\n      <option *ngFor=\"let language of languages\">{{language}}</option>\n    </select>\n  </li>\n  <li class=\"nav-item mobile-hide-item\">\n    <a routerLink=\"/logout\" class=\"nav-link\">{{ 'header.logout' | translate }}</a>\n  </li>\n</ul>\n"
        },
        {
            "name": "WidgetAboutusComponent",
            "id": "component-WidgetAboutusComponent-a6f76a6f181acb9f239597b88dfb715e",
            "file": "src/app/widgets/widget-aboutus/widget-aboutus.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-aboutus",
            "styleUrls": [
                "./widget-aboutus.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-aboutus.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "defaultValue": "theme",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { theme } from '../../../data/theme';\r\n\r\n@Component({\r\n    selector: 'app-widget-aboutus',\r\n    templateUrl: './widget-aboutus.component.html',\r\n    styleUrls: ['./widget-aboutus.component.scss']\r\n})\r\nexport class WidgetAboutusComponent {\r\n    theme = theme;\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-aboutus.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"widget-aboutus widget\">\r\n    <h4 class=\"widget__title\">About Blog</h4>\r\n    <div class=\"widget-aboutus__text\">\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, erat in malesuada aliquam, est erat faucibus purus,\r\n        eget viverra nulla sem vitae neque. Quisque id sodales libero.\r\n    </div>\r\n    <div class=\"widget-aboutus__socials\">\r\n        <ul>\r\n            <li>\r\n                <a class=\"widget-aboutus__link widget-aboutus__link--rss\" [href]=\"theme.author.profile_url\" target=\"_blank\">\r\n                    <i class=\"widget-social__icon fas fa-rss\"></i>\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a class=\"widget-aboutus__link widget-aboutus__link--youtube\" [href]=\"theme.author.profile_url\" target=\"_blank\">\r\n                    <i class=\"widget-aboutus__icon fab fa-youtube\"></i>\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a class=\"widget-aboutus__link widget-aboutus__link--facebook\" [href]=\"theme.author.profile_url\" target=\"_blank\">\r\n                    <i class=\"widget-aboutus__icon fab fa-facebook-f\"></i>\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a class=\"widget-aboutus__link widget-aboutus__link--twitter\" [href]=\"theme.author.profile_url\" target=\"_blank\">\r\n                    <i class=\"widget-aboutus__icon fab fa-twitter\"></i>\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a class=\"widget-aboutus__link widget-aboutus__link--instagram\" [href]=\"theme.author.profile_url\" target=\"_blank\">\r\n                    <i class=\"widget-aboutus__icon fab fa-instagram\"></i>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "WidgetCategoriesComponent",
            "id": "component-WidgetCategoriesComponent-5eb8448c9f00e40b00e702035686cc6c",
            "file": "src/app/widgets/widget-categories/widget-categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-categories",
            "styleUrls": [
                "./widget-categories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "any[]"
                },
                {
                    "name": "location",
                    "defaultValue": "'blog'",
                    "line": 9,
                    "type": "\"blog\" | \"shop\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-widget-categories',\r\n    templateUrl: './widget-categories.component.html',\r\n    styleUrls: ['./widget-categories.component.scss']\r\n})\r\nexport class WidgetCategoriesComponent {\r\n    @Input() location: 'blog'|'shop' = 'blog';\r\n    @Input() categories: any[] = [];\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-categories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"widget-categories widget-categories--location--{{ location }} widget\">\r\n    <h4 class=\"widget__title\">Categories</h4>\r\n    <ul class=\"widget-categories__list\" appCollapse>\r\n        <li *ngFor=\"let category of categories\" class=\"widget-categories__item\" appCollapseItem=\"widget-categories__item--open\" #collapse=\"appCollapseItem\">\r\n            <div class=\"widget-categories__row\">\r\n                <a [routerLink]=\"category.url\">\r\n                    <app-icon class=\"widget-categories__arrow\" name=\"arrow-rounded-right-6x9\" size=\"6x9\"></app-icon>\r\n                    {{ category.name }}\r\n                </a>\r\n                <button *ngIf=\"category.children?.length\" class=\"widget-categories__expander\" type=\"button\" (click)=\"collapse.toggle()\"></button>\r\n            </div>\r\n            <div *ngIf=\"category.children?.length\" class=\"widget-categories__subs\" appCollapseContent>\r\n                <ul>\r\n                    <li *ngFor=\"let sub of category.children\"><a [routerLink]=\"sub.url\">{{ sub.name }}</a></li>\r\n                </ul>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n"
        },
        {
            "name": "WidgetCommentsComponent",
            "id": "component-WidgetCommentsComponent-7baecd23ff6776ea79db41528645899e",
            "file": "src/app/widgets/widget-comments/widget-comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-comments",
            "styleUrls": [
                "./widget-comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "PostComment[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { PostComment } from '../../shared/interfaces/post-comment';\r\n\r\n@Component({\r\n    selector: 'app-widget-comments',\r\n    templateUrl: './widget-comments.component.html',\r\n    styleUrls: ['./widget-comments.component.scss']\r\n})\r\nexport class WidgetCommentsComponent {\r\n    @Input() comments: PostComment[] = [];\r\n\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"widget-comments widget\">\r\n    <h4 class=\"widget__title\">Latest Comments</h4>\r\n    <ul class=\"widget-comments__list\">\r\n        <li *ngFor=\"let comment of comments\" class=\"widget-comments__item\">\r\n            <div class=\"widget-comments__author\"><a routerLink=\"./\">{{ comment.author }}</a></div>\r\n            <div class=\"widget-comments__content\">{{ comment.text }}</div>\r\n            <div class=\"widget-comments__meta\">\r\n                <div class=\"widget-comments__date\">{{ comment.date }}</div>\r\n                <div class=\"widget-comments__name\">On <a routerLink=\"./\" title=\"{{ comment.postTitle }}\">{{ comment.postTitle }}</a></div>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</div>\r\n"
        },
        {
            "name": "WidgetFiltersComponent",
            "id": "component-WidgetFiltersComponent-b18ac0b39b38fc753d43bfe588f32e67",
            "file": "src/app/widgets/widget-filters/widget-filters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-filters",
            "styleUrls": [
                "./widget-filters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-filters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "ProductFilter[]"
                },
                {
                    "name": "offcanvas",
                    "defaultValue": "'mobile'",
                    "line": 13,
                    "type": "\"always\" | \"mobile\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPlatformBrowser",
                    "defaultValue": "isPlatformBrowser(this.platformId)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "rightToLeft",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input, PLATFORM_ID } from '@angular/core';\r\nimport { ProductFilter } from '../../shared/interfaces/product-filter';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { DirectionService } from '../../shared/services/direction.service';\r\n\r\n@Component({\r\n    selector: 'app-widget-filters',\r\n    templateUrl: './widget-filters.component.html',\r\n    styleUrls: ['./widget-filters.component.scss']\r\n})\r\nexport class WidgetFiltersComponent {\r\n    @Input() filters: ProductFilter[] = [];\r\n    @Input() offcanvas: 'always'|'mobile' = 'mobile';\r\n\r\n    isPlatformBrowser = isPlatformBrowser(this.platformId);\r\n    rightToLeft = false;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: any,\r\n        private direction: DirectionService\r\n    ) {\r\n        this.rightToLeft = this.direction.isRTL();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-filters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any"
                    },
                    {
                        "name": "direction",
                        "type": "DirectionService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "direction",
                        "type": "DirectionService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"widget-filters widget\" [ngClass]=\"{\r\n    'widget-filters--offcanvas--always': offcanvas === 'always',\r\n    'widget-filters--offcanvas--mobile': offcanvas === 'mobile'\r\n}\" appCollapse>\r\n    <h4 class=\"widget-filters__title widget__title\">Filters</h4>\r\n\r\n    <div class=\"widget-filters__list\">\r\n        <div *ngFor=\"let filter of filters\" class=\"widget-filters__item\">\r\n\r\n            <div class=\"filter filter--opened\" appCollapseItem=\"filter--opened\" #collapse=\"appCollapseItem\">\r\n                <button type=\"button\" class=\"filter__title\" (click)=\"collapse.toggle()\">\r\n                    {{ filter.name }}\r\n                    <app-icon class=\"filter__arrow\" name=\"arrow-rounded-down-12x7\" size=\"12x7\"></app-icon>\r\n                </button>\r\n                <div class=\"filter__body\" appCollapseContent>\r\n                    <div class=\"filter__container\">\r\n\r\n                        <div *ngIf=\"filter.type === 'categories'\" class=\"filter-categories\">\r\n                            <ul class=\"filter-categories__list\">\r\n                                <li *ngFor=\"let item of filter.options.items\" class=\"filter-categories__item filter-categories__item--{{ item.type }}\">\r\n                                    <app-icon *ngIf=\"item.type == 'parent'\" class=\"filter-categories__arrow\"  name=\"arrow-rounded-left-6x9\" size=\"6x9\"></app-icon>\r\n                                    <a routerLink=\"./\">{{ item.name }}</a>\r\n                                    <div class=\"filter-categories__counter\">{{ item.count }}</div>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div *ngIf=\"['checkbox', 'radio'].includes(filter.type)\" class=\"filter-list\">\r\n                            <div class=\"filter-list__list\">\r\n                                <label *ngFor=\"let item of filter.options.items\" class=\"filter-list__item\" [ngClass]=\"{'filter-list__item--disabled': item.disabled}\">\r\n\r\n                                    <span *ngIf=\"filter.type === 'checkbox'\" class=\"filter-list__input input-check\">\r\n                                        <span class=\"input-check__body\">\r\n                                            <input class=\"input-check__input\" type=\"checkbox\" [checked]=\"item.checked\" [disabled]=\"item.disabled\">\r\n                                            <span class=\"input-check__box\"></span>\r\n                                            <app-icon class=\"input-check__icon\" name=\"check-9x7\" size=\"9x7\"></app-icon>\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <span *ngIf=\"filter.type === 'radio'\" class=\"filter-list__input input-radio\">\r\n                                        <span class=\"input-radio__body\">\r\n                                            <input class=\"input-radio__input\" [name]=\"filter.options.name\" type=\"radio\" [checked]=\"item.checked\" [disabled]=\"item.disabled\">\r\n                                            <span class=\"input-radio__circle\"></span>\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <span class=\"filter-list__title\">{{ item.label }}</span>\r\n                                    <span *ngIf=\"item.count\" class=\"filter-list__counter\">{{ item.count }}</span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div *ngIf=\"filter.type === 'color'\" class=\"filter-color\">\r\n                            <div class=\"filter-color__list\">\r\n                                <label *ngFor=\"let item of filter.options.items\" class=\"filter-color__item\">\r\n                                    <span class=\"filter-color__check input-check-color\" [ngClass]=\"{\r\n                                        'input-check-color--white': item.white,\r\n                                        'input-check-color--light': item.light\r\n                                    }\" [style.color]=\"item.color\">\r\n                                        <label class=\"input-check-color__body\">\r\n                                            <input class=\"input-check-color__input\" type=\"checkbox\" [checked]=\"item.checked\" [disabled]=\"item.disabled\">\r\n                                            <span class=\"input-check-color__box\"></span>\r\n                                            <app-icon class=\"input-check-color__icon\" name=\"check-12x9\" size=\"12x9\"></app-icon>\r\n                                            <span class=\"input-check-color__stick\"></span>\r\n                                        </label>\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div *ngIf=\"filter.type === 'price' && isPlatformBrowser\" class=\"filter-price\">\r\n                            <div class=\"filter-price__slider\">\r\n                                <div class=\"ng5-slider-custom\">\r\n                                    <ng5-slider [value]=\"filter.options.from\" [highValue]=\"filter.options.to\" [options]=\"{animate: false, mouseEventsInterval: 10, rightToLeft: rightToLeft, floor: filter.options.min, ceil: filter.options.max, step: 1}\" #slider></ng5-slider>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"filter-price__title\">\r\n                                Price:\r\n                                <span class=\"filter-price__min-value\">{{ (rightToLeft ? slider.highValue : slider.value)|currencyFormat }}</span> –\r\n                                <span class=\"filter-price__max-value\">{{ (rightToLeft ? slider.value : slider.highValue)|currencyFormat }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"widget-filters__actions d-flex\">\r\n        <button class=\"btn btn-primary btn-sm\">Filter</button>\r\n        <button class=\"btn btn-secondary btn-sm ml-2\">Reset</button>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "WidgetNewsletterComponent",
            "id": "component-WidgetNewsletterComponent-4d09917bb4e78beeadad915a25924326",
            "file": "src/app/widgets/widget-newsletter/widget-newsletter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-newsletter",
            "styleUrls": [
                "./widget-newsletter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-newsletter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-widget-newsletter',\r\n    templateUrl: './widget-newsletter.component.html',\r\n    styleUrls: ['./widget-newsletter.component.scss']\r\n})\r\nexport class WidgetNewsletterComponent {\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-newsletter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"widget-newsletter widget\">\r\n    <h4 class=\"widget-newsletter__title\">Our Newsletter</h4>\r\n    <div class=\"widget-newsletter__text\">\r\n        Phasellus eleifend sapien felis, at sollicitudin arcu semper mattis. Mauris quis mi quis ipsum tristique lobortis. Nulla vitae est blandit rutrum.\r\n    </div>\r\n    <form class=\"widget-newsletter__form\" action=\"\">\r\n        <label for=\"widget-newsletter-email\" class=\"sr-only\">Email Address</label>\r\n        <input id=\"widget-newsletter-email\" type=\"text\" class=\"form-control\" placeholder=\"Email Address\">\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary mt-3\">Subscribe</button>\r\n    </form>\r\n</div>\r\n"
        },
        {
            "name": "WidgetPostsComponent",
            "id": "component-WidgetPostsComponent-bbc8b8d31ba0c6c4af782c274ec439ab",
            "file": "src/app/widgets/widget-posts/widget-posts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-posts",
            "styleUrls": [
                "./widget-posts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-posts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "posts",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "Post[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "root",
                    "type": "RootService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "postImage",
                    "args": [
                        {
                            "name": "post",
                            "type": "Post"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "Post",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Post } from '../../shared/interfaces/post';\r\nimport { RootService } from '../../shared/services/root.service';\r\n\r\n@Component({\r\n    selector: 'app-widget-posts',\r\n    templateUrl: './widget-posts.component.html',\r\n    styleUrls: ['./widget-posts.component.scss']\r\n})\r\nexport class WidgetPostsComponent {\r\n    @Input() posts: Post[] = [];\r\n\r\n    constructor(public root: RootService) { }\r\n\r\n    postImage(post: Post): string {\r\n        return post.image.replace(/^\\.jpg$/, '-thumbnail.jpg');\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-posts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "root",
                        "type": "RootService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "root",
                        "type": "RootService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"widget-posts widget\">\r\n    <h4 class=\"widget__title\">Latest Posts</h4>\r\n    <div class=\"widget-posts__list\">\r\n        <div *ngFor=\"let post of posts\" class=\"widget-posts__item\">\r\n            <div class=\"widget-posts__image\">\r\n                <a [routerLink]=\"root.post()\">\r\n                    <img [src]=\"postImage(post)\" alt=\"\">\r\n                </a>\r\n            </div>\r\n            <div class=\"widget-posts__info\">\r\n                <div class=\"widget-posts__name\">\r\n                    <a [routerLink]=\"root.post()\">{{ post.title }}</a>\r\n                </div>\r\n                <div class=\"widget-posts__date\">{{ post.date }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "WidgetProductsComponent",
            "id": "component-WidgetProductsComponent-2d5a2c0bc4cea8908186d8f34fb2140d",
            "file": "src/app/widgets/widget-products/widget-products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-products",
            "styleUrls": [
                "./widget-products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "Product[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "root",
                    "type": "RootService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Product } from '../../shared/interfaces/product';\r\nimport { RootService } from '../../shared/services/root.service';\r\n\r\n@Component({\r\n    selector: 'app-widget-products',\r\n    templateUrl: './widget-products.component.html',\r\n    styleUrls: ['./widget-products.component.scss']\r\n})\r\nexport class WidgetProductsComponent {\r\n    @Input() header = '';\r\n    @Input() products: Product[] = [];\r\n\r\n    constructor(public root: RootService) { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "root",
                        "type": "RootService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "root",
                        "type": "RootService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"widget-products widget\">\r\n    <h4 class=\"widget__title\">{{ header }}</h4>\r\n    <div class=\"widget-products__list\">\r\n        <div *ngFor=\"let product of products|slice:0:5\" class=\"widget-products__item\">\r\n            <div class=\"widget-products__image\">\r\n                <a [routerLink]=\"root.product(product.id)\" *ngIf=\"product.images?.length\"><img [src]=\"product.images[0]\" alt=\"\"></a>\r\n            </div>\r\n            <div class=\"widget-products__info\">\r\n                <div class=\"widget-products__name\">\r\n                    <a [routerLink]=\"root.product(product.id)\">{{ product.name }}</a>\r\n                </div>\r\n                <div class=\"widget-products__prices\">\r\n                    <ng-container *ngIf=\"product.compareAtPrice\">\r\n                        <span class=\"widget-products__new-price\">{{ product.price|currencyFormat }}</span>{{ ' ' }}\r\n                        <span class=\"widget-products__old-price\">{{ product.compareAtPrice|currencyFormat }}</span>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!product.compareAtPrice\">\r\n                        {{ product.price|currencyFormat }}\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "WidgetSearchComponent",
            "id": "component-WidgetSearchComponent-b87bd12528ad19e669f3a789c6fe00e5",
            "file": "src/app/widgets/widget-search/widget-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-search",
            "styleUrls": [
                "./widget-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-widget-search',\r\n    templateUrl: './widget-search.component.html',\r\n    styleUrls: ['./widget-search.component.scss']\r\n})\r\nexport class WidgetSearchComponent {\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"widget-search\">\r\n    <form class=\"widget-search__body\">\r\n        <input class=\"widget-search__input\" placeholder=\"Blog search...\" type=\"text\" autocomplete=\"off\" spellcheck=\"false\">\r\n        <button class=\"widget-search__button\" type=\"submit\">\r\n            <app-icon name=\"search-20\" size=\"20\"></app-icon>\r\n        </button>\r\n    </form>\r\n</div>\r\n"
        },
        {
            "name": "WidgetTagsComponent",
            "id": "component-WidgetTagsComponent-4471819c2335141adc49f0a605b9a1e7",
            "file": "src/app/widgets/widget-tags/widget-tags.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget-tags",
            "styleUrls": [
                "./widget-tags.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-tags.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-widget-tags',\r\n    templateUrl: './widget-tags.component.html',\r\n    styleUrls: ['./widget-tags.component.scss']\r\n})\r\nexport class WidgetTagsComponent {\r\n    constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-tags.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"widget-tags widget\">\r\n    <h4 class=\"widget__title\">Tags Cloud</h4>\r\n    <div class=\"tags tags--lg\">\r\n        <div class=\"tags__list\">\r\n            <a routerLink=\"./\">Promotion</a>\r\n            <a routerLink=\"./\">Power Tool</a>\r\n            <a routerLink=\"./\">New Arrivals</a>\r\n            <a routerLink=\"./\">Screwdriver</a>\r\n            <a routerLink=\"./\">Wrench</a>\r\n            <a routerLink=\"./\">Mounts</a>\r\n            <a routerLink=\"./\">Electrodes</a>\r\n            <a routerLink=\"./\">Chainsaws</a>\r\n            <a routerLink=\"./\">Manometers</a>\r\n            <a routerLink=\"./\">Nails</a>\r\n            <a routerLink=\"./\">Air Guns</a>\r\n            <a routerLink=\"./\">Cutting Discs</a>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CartModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "LoginModule"
                        },
                        {
                            "name": "ProductsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CartCheckoutComponent"
                        },
                        {
                            "name": "CartDetailsComponent"
                        },
                        {
                            "name": "PlacedOrdersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CartService"
                        },
                        {
                            "name": "LoginService"
                        },
                        {
                            "name": "ProductsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "UpperHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UpperHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LogoutComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LogoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ProductsEffects"
                        },
                        {
                            "name": "ShopSidebarService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddDetailsComponent"
                        },
                        {
                            "name": "AddToCartComponent"
                        },
                        {
                            "name": "CreateProductComponent"
                        },
                        {
                            "name": "ProductDetailsComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        },
                        {
                            "name": "ProductsViewComponent"
                        },
                        {
                            "name": "ShopSidebarComponent"
                        },
                        {
                            "name": "UploadImagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "WidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ClickDirective"
                        },
                        {
                            "name": "CollapseContentDirective"
                        },
                        {
                            "name": "CollapseDirective"
                        },
                        {
                            "name": "CollapseItemDirective"
                        },
                        {
                            "name": "CurrencyFormatPipe"
                        },
                        {
                            "name": "DepartmentsAreaDirective"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "FakeSlidesDirective"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InputNumberComponent"
                        },
                        {
                            "name": "LoadingBarComponent"
                        },
                        {
                            "name": "OwlPreventClickDirective"
                        },
                        {
                            "name": "PageHeaderComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        },
                        {
                            "name": "PostCardComponent"
                        },
                        {
                            "name": "ProductCardComponent"
                        },
                        {
                            "name": "ProductComponent"
                        },
                        {
                            "name": "QuickviewComponent"
                        },
                        {
                            "name": "RatingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "ClickDirective"
                        },
                        {
                            "name": "CollapseContentDirective"
                        },
                        {
                            "name": "CollapseDirective"
                        },
                        {
                            "name": "CollapseItemDirective"
                        },
                        {
                            "name": "CurrencyFormatPipe"
                        },
                        {
                            "name": "DepartmentsAreaDirective"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "FakeSlidesDirective"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "InputNumberComponent"
                        },
                        {
                            "name": "LoadingBarComponent"
                        },
                        {
                            "name": "OwlPreventClickDirective"
                        },
                        {
                            "name": "PageHeaderComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        },
                        {
                            "name": "PostCardComponent"
                        },
                        {
                            "name": "ProductCardComponent"
                        },
                        {
                            "name": "ProductComponent"
                        },
                        {
                            "name": "QuickviewComponent"
                        },
                        {
                            "name": "RatingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WidgetsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetAboutusComponent"
                        },
                        {
                            "name": "WidgetCategoriesComponent"
                        },
                        {
                            "name": "WidgetCommentsComponent"
                        },
                        {
                            "name": "WidgetFiltersComponent"
                        },
                        {
                            "name": "WidgetNewsletterComponent"
                        },
                        {
                            "name": "WidgetPostsComponent"
                        },
                        {
                            "name": "WidgetProductsComponent"
                        },
                        {
                            "name": "WidgetSearchComponent"
                        },
                        {
                            "name": "WidgetTagsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetAboutusComponent"
                        },
                        {
                            "name": "WidgetCategoriesComponent"
                        },
                        {
                            "name": "WidgetCommentsComponent"
                        },
                        {
                            "name": "WidgetFiltersComponent"
                        },
                        {
                            "name": "WidgetNewsletterComponent"
                        },
                        {
                            "name": "WidgetPostsComponent"
                        },
                        {
                            "name": "WidgetProductsComponent"
                        },
                        {
                            "name": "WidgetSearchComponent"
                        },
                        {
                            "name": "WidgetTagsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_TO_CART",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'ADD_TO_CART'"
            },
            {
                "name": "ADD_TO_CART_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'ADD_PRODUCT_TO_CART_SUCCESS'"
            },
            {
                "name": "addProductToCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { productsInCart: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "addProductToCartSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { productToCartSuccess: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "addresses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/account-addresses.ts",
                "type": "Address[]",
                "defaultValue": "[\r\n    {\r\n        default: true,\r\n        firstName: 'Helena',\r\n        lastName: 'Garcia',\r\n        email: 'stroyka@example.com',\r\n        phone: '38 972 588-42-36',\r\n        country: 'Random Federation',\r\n        city: 'Moscow',\r\n        postcode: '115302',\r\n        address: 'ul. Varshavskaya, 15-2-178'\r\n    },\r\n    {\r\n        default: false,\r\n        firstName: 'Jupiter',\r\n        lastName: 'Saturnov',\r\n        email: 'stroyka@example.com',\r\n        phone: 'ZX 971 972-57-26',\r\n        country: 'RandomLand',\r\n        city: 'MarsGrad',\r\n        postcode: '4b4f53',\r\n        address: 'Sun Orbit, 43.3241-85.239'\r\n    }\r\n]"
            },
            {
                "name": "appendError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const stateWithError: AppStates = Object.assign({}, state,\n      {\n        errorState: {\n          message: 'Server connection error. Probably you need to login.',\n          status: 'error',\n          error_code: 'remove_product_error'\n        }\n      }\n    );\n  return stateWithError;\n}"
            },
            {
                "name": "brands",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/shop-brands.ts",
                "type": "Brand[]",
                "defaultValue": "[\r\n    {image: 'assets/images/logos/logo-1.png'},\r\n    {image: 'assets/images/logos/logo-2.png'},\r\n    {image: 'assets/images/logos/logo-3.png'},\r\n    {image: 'assets/images/logos/logo-4.png'},\r\n    {image: 'assets/images/logos/logo-5.png'},\r\n    {image: 'assets/images/logos/logo-6.png'},\r\n    {image: 'assets/images/logos/logo-7.png'}\r\n]"
            },
            {
                "name": "cartReducerStateMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test/mock.ts",
                "type": "object",
                "defaultValue": "{\n  cart: {\n    currentOrderInCart: {\n      \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n      \"orderToken\": null,\n      \"userId\": 1211,\n      \"totalAmount\": 123.97,\n      \"totalQuantity\": 4,\n      \"paymentId\": null,\n      \"paymentPlaced\": null,\n      \"paymentPaid\": null,\n      \"itemList\": [\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2305\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 42,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"robot\",\n            \"description\": \"robot1\",\n            \"slug\": \"robot1\",\n            \"price\": 100,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100113/m6xqpddpalxl2zubmajx.png\",\n                  \"publicId\": \"m6xqpddpalxl2zubmajx\",\n                  \"description\": null,\n                  \"productInfoId\": 43,\n                  \"id\": 44\n                }\n              ],\n              \"id\": 43\n            },\n            \"id\": 42\n          },\n          \"id\": 2306\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 55,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"Plastic toy\",\n            \"description\": \"plastic toy\",\n            \"slug\": \"plastic-toy\",\n            \"price\": 3.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg\",\n                  \"publicId\": \"s4l1dp26u0cllhvmafm6\",\n                  \"description\": null,\n                  \"productInfoId\": 56,\n                  \"id\": 57\n                }\n              ],\n              \"id\": 56\n            },\n            \"id\": 55\n          },\n          \"id\": 2307\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2308\n        }\n      ],\n      \"payment\": null,\n      \"id\": 2304\n    },\n    orderStoredInHistoryApi: [\n      {\n        'checked': false,\n        'id': 'fdb32730-337c-11eb-961c-11163f8d90be',\n        'orderDetails': {\n          'totalAmount': 13.98,\n          'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n          'orderToken': null,\n          'totalQuantity': 2,\n          'paymentPlaced': null,\n          'paymentId': null,\n          'itemList': [\n            {\n              'itemId': null,\n              'product': {\n                'isRemoved': false,\n                'price': 3.99,\n                'defaultMaxQuantity': 10,\n                'name': 'Plastic toy',\n                'description': 'plastic toy',\n                'id': 55,\n                'slug': 'plastic-toy',\n                'productInfo': {\n                  'imageList': [\n                    {\n                      'description': null,\n                      'largeUrl': null,\n                      'id': 57,\n                      'publicId': 's4l1dp26u0cllhvmafm6',\n                      'productInfoId': 56,\n                      'imageUrl': 'https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg'\n                    }\n                  ],\n                  'id': 56\n                }\n              },\n              'quantity': 1,\n              'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n              'id': 2007,\n              'productId': 55\n            }\n          ],\n          'payment': null,\n          'id': 2006,\n          'userId': 35,\n          'paymentPaid': null\n        },\n        'userid': '35',\n        'updatedAt': 1606789749027\n      }\n    ]\n  }\n}"
            },
            {
                "name": "categories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/blog-widget-categories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n    {name: 'Latest News', url: '../'},\r\n    {name: 'Special Offers', url: '../', children: [\r\n        {name: 'Spring Sales', url: '../'},\r\n        {name: 'Summer Sales', url: '../'},\r\n        {name: 'Autumn Sales', url: '../'},\r\n        {name: 'Christmas Sales', url: '../'},\r\n        {name: 'Other Sales', url: '../'}\r\n    ]},\r\n    {name: 'New Arrivals', url: '../'},\r\n    {name: 'Reviews', url: '../'},\r\n    {name: 'Drills and Mixers', url: '../'},\r\n    {name: 'Cordless Screwdrivers', url: '../'},\r\n    {name: 'Screwdrivers', url: '../'},\r\n    {name: 'Wrenches', url: '../'}\r\n]"
            },
            {
                "name": "categories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/shop-widget-categories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n    {name: 'Power Tools', url: '../', children: [\r\n        {name: 'Engravers', url: '../'},\r\n        {name: 'Drills', url: '../'},\r\n        {name: 'Wrenches', url: '../'},\r\n        {name: 'Plumbing', url: '../'},\r\n        {name: 'Wall Chaser', url: '../'},\r\n        {name: 'Pneumatic Tools', url: '../'},\r\n        {name: 'Milling Cutters', url: '../'}\r\n    ]},\r\n    {name: 'Hand Tools', url: '../', children: [\r\n        {name: 'Screwdrivers', url: '../'},\r\n        {name: 'Handsaws', url: '../'},\r\n        {name: 'Knives', url: '../'},\r\n        {name: 'Axes', url: '../'},\r\n        {name: 'Multitools', url: '../'},\r\n        {name: 'Paint Tools', url: '../'}\r\n    ]},\r\n    {name: 'Garden Equipment', url: '../', children: [\r\n        {name: 'Motor Pumps', url: '../'},\r\n        {name: 'Chainsaws', url: '../'},\r\n        {name: 'Electric Saws', url: '../'},\r\n        {name: 'Brush Cutters', url: '../'}\r\n    ]},\r\n    {name: 'Machine Tools', url: '../', children: [\r\n        {name: 'Thread Cutting', url: '../'},\r\n        {name: 'Chip Blowers', url: '../'},\r\n        {name: 'Sharpening Machines', url: '../'},\r\n        {name: 'Pipe Cutters', url: '../'},\r\n        {name: 'Slotting machines', url: '../'},\r\n        {name: 'Lathes', url: '../'}\r\n    ]},\r\n    {name: 'Instruments', url: '../', children: [\r\n        {name: 'Welding Equipment', url: '../'},\r\n        {name: 'Power Tools', url: '../'},\r\n        {name: 'Hand Tools', url: '../'},\r\n        {name: 'Measuring Tool', url: '../'}\r\n    ]},\r\n    {name: 'Workbenches', url: '../'},\r\n    {name: 'Presses', url: '../'},\r\n    {name: 'Spray Guns', url: '../'},\r\n    {name: 'Riveters', url: '../'}\r\n]"
            },
            {
                "name": "categories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/shop-block-categories.ts",
                "type": "[]",
                "defaultValue": "[\r\n    {title: 'Power Tools', url: '../shop', products: 572, image: 'assets/images/categories/category-1.jpg', subcategories: [\r\n        {title: 'Screwdrivers', url: '../shop'},\r\n        {title: 'Milling Cutters', url: '../shop'},\r\n        {title: 'Sanding Machines', url: '../shop'},\r\n        {title: 'Wrenches', url: '../shop'},\r\n        {title: 'Drills', url: '../shop'}\r\n    ]},\r\n    {title: 'Hand Tools', url: '../shop', products: 134, image: 'assets/images/categories/category-2.jpg', subcategories: [\r\n        {title: 'Screwdrivers', url: '../shop'},\r\n        {title: 'Hammers', url: '../shop'},\r\n        {title: 'Spanners', url: '../shop'},\r\n        {title: 'Handsaws', url: '../shop'},\r\n        {title: 'Paint Tools', url: '../shop'}\r\n    ]},\r\n    {title: 'Machine Tools', url: '../shop', products: 301, image: 'assets/images/categories/category-4.jpg', subcategories: [\r\n        {title: 'Lathes', url: '../shop'},\r\n        {title: 'Milling Machines', url: '../shop'},\r\n        {title: 'Grinding Machines', url: '../shop'},\r\n        {title: 'CNC Machines', url: '../shop'},\r\n        {title: 'Sharpening Machines', url: '../shop'}\r\n    ]},\r\n    {title: 'Power Machinery', url: '../shop', products: 79, image: 'assets/images/categories/category-3.jpg', subcategories: [\r\n        {title: 'Generators', url: '../shop'},\r\n        {title: 'Compressors', url: '../shop'},\r\n        {title: 'Winches', url: '../shop'},\r\n        {title: 'Plasma Cutting', url: '../shop'},\r\n        {title: 'Electric Motors', url: '../shop'}\r\n    ]},\r\n    {title: 'Measurement', url: '../shop', products: 366, image: 'assets/images/categories/category-5.jpg', subcategories: [\r\n        {title: 'Tape Measure', url: '../shop'},\r\n        {title: 'Theodolites', url: '../shop'},\r\n        {title: 'Thermal Imagers', url: '../shop'},\r\n        {title: 'Calipers', url: '../shop'},\r\n        {title: 'Levels', url: '../shop'}\r\n    ]},\r\n    {title: 'Clothes and PPE', url: '../shop', products: 81, image: 'assets/images/categories/category-6.jpg', subcategories: [\r\n        {title: 'Winter Workwear', url: '../shop'},\r\n        {title: 'Summer Workwear', url: '../shop'},\r\n        {title: 'Helmets', url: '../shop'},\r\n        {title: 'Belts and Bags', url: '../shop'},\r\n        {title: 'Work Shoes', url: '../shop'}\r\n    ]}\r\n]"
            },
            {
                "name": "CHECK_OUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'CHECK_OUT'"
            },
            {
                "name": "CHECK_OUT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'CHECK_OUT_SUCCESS'"
            },
            {
                "name": "checkOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { checkOutDetails: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "checkOutSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, {\n    checkOutConfirmationStatus: false,\n    shoppingOrderNumber: undefined,\n    productsInCart: undefined,\n    productToCartSuccess: undefined,\n    currentOrderInCart: undefined,\n    checkOutDetails: undefined\n  } );\n  return newData;\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CREATE_NEW_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'CREATE_NEW_PRODUCT'"
            },
            {
                "name": "CREATE_NEW_PRODUCT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'CREATE_NEW_PRODUCT_SUCCESS'"
            },
            {
                "name": "CREATE_ORDER_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'CREATE_ORDER_NUMBER'"
            },
            {
                "name": "createNewProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  return state;\n}"
            },
            {
                "name": "createNewProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  return Object.assign({}, state, { productCreated: action.payload} );\n}"
            },
            {
                "name": "defaultLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/consts/consts.ts",
                "type": "string",
                "defaultValue": "'en'"
            },
            {
                "name": "defaultRole",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/consts/consts.ts",
                "type": "string",
                "defaultValue": "'seller'"
            },
            {
                "name": "DELETE_ORDER_FROM_HISTORY_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'DELETE_ORDER_FROM_HISTORY_API'"
            },
            {
                "name": "departments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/header-departments.ts",
                "type": "NavigationLink[]",
                "defaultValue": "[\r\n    {label: 'Power Tools', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'xl',\r\n        image: 'assets/images/megamenu/megamenu-1.jpg',\r\n        columns: [\r\n            {size: 3, items: [\r\n                {label: 'Power Tools', url: './shop', items: [\r\n                    {label: 'Engravers', url: './shop'},\r\n                    {label: 'Drills', url: './shop'},\r\n                    {label: 'Wrenches', url: './shop'},\r\n                    {label: 'Plumbing', url: './shop'},\r\n                    {label: 'Wall Chaser', url: './shop'},\r\n                    {label: 'Pneumatic Tools', url: './shop'},\r\n                    {label: 'Milling Cutters', url: './shop'}\r\n                ]},\r\n                {label: 'Workbenches', url: './shop'},\r\n                {label: 'Presses', url: './shop'},\r\n                {label: 'Spray Guns', url: './shop'},\r\n                {label: 'Riveters', url: './shop'}\r\n            ]},\r\n            {size: 3, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 3, items: [\r\n                {label: 'Machine Tools', url: './shop', items: [\r\n                    {label: 'Thread Cutting', url: './shop'},\r\n                    {label: 'Chip Blowers', url: './shop'},\r\n                    {label: 'Sharpening Machines', url: './shop'},\r\n                    {label: 'Pipe Cutters', url: './shop'},\r\n                    {label: 'Slotting machines', url: './shop'},\r\n                    {label: 'Lathes', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 3, items: [\r\n                {label: 'Instruments', url: './shop', items: [\r\n                    {label: 'Welding Equipment', url: './shop'},\r\n                    {label: 'Power Tools', url: './shop'},\r\n                    {label: 'Hand Tools', url: './shop'},\r\n                    {label: 'Measuring Tool', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Hand Tools', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'lg',\r\n        image: 'assets/images/megamenu/megamenu-2.jpg',\r\n        columns: [\r\n            {size: 4, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 4, items: [\r\n                {label: 'Machine Tools', url: './shop', items: [\r\n                    {label: 'Thread Cutting', url: './shop'},\r\n                    {label: 'Chip Blowers', url: './shop'},\r\n                    {label: 'Sharpening Machines', url: './shop'},\r\n                    {label: 'Pipe Cutters', url: './shop'},\r\n                    {label: 'Slotting machines', url: './shop'},\r\n                    {label: 'Lathes', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 4, items: [\r\n                {label: 'Instruments', url: './shop', items: [\r\n                    {label: 'Welding Equipment', url: './shop'},\r\n                    {label: 'Power Tools', url: './shop'},\r\n                    {label: 'Hand Tools', url: './shop'},\r\n                    {label: 'Measuring Tool', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Machine Tools', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'nl',\r\n        image: 'assets/images/megamenu/megamenu-3.jpg',\r\n        columns: [\r\n            {size: 6, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 6, items: [\r\n                {label: 'Instruments', url: './shop', items: [\r\n                    {label: 'Welding Equipment', url: './shop'},\r\n                    {label: 'Power Tools', url: './shop'},\r\n                    {label: 'Hand Tools', url: './shop'},\r\n                    {label: 'Measuring Tool', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Building Supplies', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'sm',\r\n        columns: [\r\n            {size: 12, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Electrical', url: './shop', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Soldering Equipment', url: './shop', items: [\r\n                {label: 'Soldering Station', url: './shop'},\r\n                {label: 'Soldering Dryers', url: './shop'},\r\n                {label: 'Gas Soldering Iron', url: './shop'},\r\n                {label: 'Electric Soldering Iron', url: './shop'}\r\n            ]},\r\n            {label: 'Light Bulbs', url: './shop'},\r\n            {label: 'Batteries', url: './shop'},\r\n            {label: 'Light Fixtures', url: './shop'},\r\n            {label: 'Warm Floor', url: './shop'},\r\n            {label: 'Generators', url: './shop'},\r\n            {label: 'UPS', url: './shop'}\r\n        ]\r\n    }},\r\n    {label: 'Power Machinery',        url: './shop'},\r\n    {label: 'Measurement',            url: './shop'},\r\n    {label: 'Clothes & PPE',          url: './shop'},\r\n    {label: 'Plumbing',               url: './shop'},\r\n    {label: 'Storage & Organization', url: './shop'},\r\n    {label: 'Welding & Soldering',    url: './shop'}\r\n]"
            },
            {
                "name": "enJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test/mock.ts",
                "type": "",
                "defaultValue": "require('../assets/i18n/en.json')"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  REST_API: 'https://apiwebcodes.herokuapp.com',\n  ORDER_HISTORY_API: 'https://ro66kw5glj.execute-api.us-east-1.amazonaws.com/dev'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  REST_API: 'https://apiwebcodes.herokuapp.com',\n  ORDER_HISTORY_API: 'https://ro66kw5glj.execute-api.us-east-1.amazonaws.com/dev'\n}"
            },
            {
                "name": "ERROR_LOADING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'ERROR_LOADING'"
            },
            {
                "name": "ERROR_LOADING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'ERROR_LOADING'"
            },
            {
                "name": "FETCH_ORDERS_HISTORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'FETCH_ORDERS_HISTORY'"
            },
            {
                "name": "filters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/shop-filters.ts",
                "type": "ProductFilter[]",
                "defaultValue": "[\r\n    {\r\n        name: 'Categories',\r\n        type: 'categories',\r\n        options: {\r\n            items: [\r\n                {type: 'parent',  count: 254, name: 'Construction & Repair'},\r\n                {type: 'parent',  count: 75, name: 'Instruments'},\r\n                {type: 'current', count: 21, name: 'Power Tools'},\r\n                {type: 'child',   count: 15, name: 'Drills & Mixers'},\r\n                {type: 'child',   count: 2, name: 'Cordless Screwdrivers'},\r\n                {type: 'child',   count: 30, name: 'Screwdrivers'},\r\n                {type: 'child',   count: 7, name: 'Wrenches'},\r\n                {type: 'child',   count: 5, name: 'Grinding Machines'},\r\n                {type: 'child',   count: 2, name: 'Milling Cutters'},\r\n                {type: 'child',   count: 9, name: 'Electric Spray Guns'},\r\n                {type: 'child',   count: 4, name: 'Jigsaws'},\r\n                {type: 'child',   count: 0, name: 'Jackhammers'},\r\n                {type: 'child',   count: 12, name: 'Planers'},\r\n                {type: 'child',   count: 7, name: 'Glue Guns'}\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        name: 'Price',\r\n        type: 'price',\r\n        options: {\r\n            min: 500,\r\n            max: 1500,\r\n            from: 590,\r\n            to: 1130\r\n        }\r\n    },\r\n    {\r\n        name: 'Brand',\r\n        type: 'checkbox',\r\n        options: {\r\n            items: [\r\n                {label: 'Wakita', count: 7, checked: false, disabled: false},\r\n                {label: 'Zosch', count: 42, checked: true, disabled: false},\r\n                {label: 'WeVALT', count: 0, checked: true, disabled: true},\r\n                {label: 'Hammer', count: 0, checked: false, disabled: true},\r\n                {label: 'Mitasia', count: 1, checked: false, disabled: false},\r\n                {label: 'Metaggo', count: 25, checked: false, disabled: false}\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        name: 'Brand',\r\n        type: 'radio',\r\n        options: {\r\n            name: 'filter_radio',\r\n            items: [\r\n                {label: 'Wakita', count: 7, checked: false, disabled: false},\r\n                {label: 'Zosch', count: 42, checked: false, disabled: false},\r\n                {label: 'WeVALT', count: 0, checked: true, disabled: true},\r\n                {label: 'Hammer', count: 0, checked: false, disabled: true},\r\n                {label: 'Mitasia', count: 1, checked: false, disabled: false},\r\n                {label: 'Metaggo', count: 25, checked: false, disabled: false}\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        name: 'Color',\r\n        type: 'color',\r\n        options: {\r\n            items: [\r\n                {label: 'Color 1',  count: 7, color: '#fff',    checked: false, disabled: false, white: true,  light: false},\r\n                {label: 'Color 2',  count: 7, color: '#d9d9d9', checked: false, disabled: false, white: false, light: true},\r\n                {label: 'Color 3',  count: 7, color: '#b3b3b3', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 4',  count: 7, color: '#808080', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 5',  count: 7, color: '#666',    checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 6',  count: 7, color: '#4d4d4d', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 7',  count: 7, color: '#262626', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 8',  count: 7, color: '#ff4040', checked: true,  disabled: false, white: false, light: false},\r\n                {label: 'Color 9',  count: 7, color: '#ff8126', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 10', count: 7, color: '#ffd440', checked: false, disabled: false, white: false, light: true},\r\n                {label: 'Color 11', count: 7, color: '#becc1f', checked: false, disabled: false, white: false, light: true},\r\n                {label: 'Color 12', count: 7, color: '#8fcc14', checked: true,  disabled: false, white: false, light: false},\r\n                {label: 'Color 13', count: 7, color: '#47cc5e', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 14', count: 7, color: '#47cca0', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 15', count: 7, color: '#47cccc', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 16', count: 7, color: '#40bfff', checked: false, disabled: true,  white: false, light: false},\r\n                {label: 'Color 17', count: 7, color: '#3d6dcc', checked: true,  disabled: false, white: false, light: false},\r\n                {label: 'Color 18', count: 7, color: '#7766cc', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 19', count: 7, color: '#b852cc', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 20', count: 7, color: '#e53981', checked: false, disabled: false, white: false, light: false}\r\n            ]\r\n        }\r\n    }\r\n]"
            },
            {
                "name": "FINISH_STORAGE_CLEARENCE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'FINISH_STORAGE_CLEARENCE'"
            },
            {
                "name": "frJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test/mock.ts",
                "type": "",
                "defaultValue": "require('../assets/i18n/fr.json')"
            },
            {
                "name": "GET_CURRENT_ORDER_FROM_STORE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'GET_CURRENT_ORDER_FROM_STORE'"
            },
            {
                "name": "GET_CURRENT_ORDER_FROM_STORE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'GET_CURRENT_ORDER_FROM_STORE_SUCCESS'"
            },
            {
                "name": "GET_ORDER_NUMBER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'GET_ORDER_NUMBER'"
            },
            {
                "name": "GET_PRODUCT_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'GET_PRODUCT_DETAILS'"
            },
            {
                "name": "GET_PRODUCT_DETAILS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'GET_PRODUCT_DETAILS_SUCCESS'"
            },
            {
                "name": "GET_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'GET_PRODUCTS'"
            },
            {
                "name": "GET_PRODUCTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'GET_PRODUCTS_SUCCESS'"
            },
            {
                "name": "getAuthSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/select/auth.selectors.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<UserDetails>('userLoginReducer')"
            },
            {
                "name": "indicateErrorOnLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "",
                "defaultValue": "( state , action): AppStates => {\n const newData: AppStates = Object.assign({}, state, { errorLoading: action.payload });\n return newData;\n}"
            },
            {
                "name": "INITIAL_PRODUCTS_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/states/products.states.ts",
                "type": "any",
                "defaultValue": "[\n  {\n    'name': undefined,\n    'description': undefined,\n    'slug': undefined,\n    'price': null,\n    'result': undefined,\n    'productInfo': {\n      'imageList': [\n        {\n          '_id': null,\n          'largeUrl': undefined\n        }\n      ],\n      'id': null\n    },\n    'id': null\n  }]"
            },
            {
                "name": "INITIAL_STORE_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.states.ts",
                "type": "any",
                "defaultValue": "{\n  storeData: INITIAL_PRODUCTS_DATA,\n  uiProductDetailsSlug: {\n    'ProductSlug': undefined\n  },\n  uiStateProductDetails: {\n    'name':         undefined,\n    'description':  undefined,\n    'slug':         undefined,\n    'price':        null,\n    'productInfo':  [],\n    'id':           null,\n  },\n  order: {\n    'orderNumber': undefined,\n    'orderToken': null,\n    'userId': null,\n    'totalAmount': null,\n    'paymentId': null,\n    'paymentPlaced': null,\n    'paymentPaid': null,\n    'itemList': null,\n    'payment': null,\n    'id': null\n  },\n  'userDetails' : INITIAL_USER_DATA\n}"
            },
            {
                "name": "INITIAL_USER_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/states/auth.states.ts",
                "type": "any",
                "defaultValue": "{\n  'userDetails': {\n    'id': null,\n    'userName': undefined,\n    'orderNumber': null,\n    'mobile': null,\n    'token': undefined,\n    'language': defaultLanguage,\n    'login': login\n  }\n}"
            },
            {
                "name": "initialAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test/mock.ts",
                "type": "object",
                "defaultValue": "{\n  userLoginReducer: {\n    userDetails: {\n      'userName': 'kuku@kuku.com',\n      'password': '',\n      'token': 'eyJhbGciOiJIUzI1NiJ9',\n      'mobile': 123456789,\n      'login': {\n        'roles': [\n          {\n            'roleName': 'buyer',\n            'description': null,\n            'id': 34\n          }\n        ],\n        'id': 33\n      },\n      'id': 35\n    }\n  }\n}"
            },
            {
                "name": "initStateOfProductDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/models/products.model.ts",
                "type": "object",
                "defaultValue": "{\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n}"
            },
            {
                "name": "languages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/consts/consts.ts",
                "type": "[]",
                "defaultValue": "['en', 'fr', 'ru']"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "latestComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/blog-widget-latest-comments.ts",
                "type": "PostComment[]",
                "defaultValue": "[\r\n    {\r\n        author: 'Emma Williams',\r\n        postTitle: 'Nullam at varius sapien sed sit amet condimentum elit',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '3 minutes ago'\r\n    },\r\n    {\r\n        author: 'Airic Ford',\r\n        postTitle: 'Integer efficitur efficitur velit non pulvinar pellentesque dictum viverra',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '25 minutes ago'\r\n    },\r\n    {\r\n        author: 'Loyd Walker',\r\n        postTitle: 'Curabitur quam augue vestibulum in mauris fermentum pellentesque libero',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '2 hours ago'\r\n    },\r\n    {\r\n        author: 'Jessica Moore',\r\n        postTitle: 'Vestibulum leo sapien sollicitudin at magna eu interdum congue feugiat',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '3 days ago'\r\n    }\r\n]"
            },
            {
                "name": "lightGallery",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/components/product-details/product-details.component.ts",
                "type": "Function"
            },
            {
                "name": "loadProductDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { uiStateProductDetails: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "loadProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { storeData: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "loadProductSlug",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { uiProductDetailsSlug: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "loadUserCredentials",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates = INITIAL_USER_DATA, action: ReducerClass ): AppStates => {\n  const newUserDetailsState = { ...state.userDetails,  ...action.payload};\n  const newSate: AppStates = { ...state, ...{ userDetails: newUserDetailsState} };\n  return newSate;\n}"
            },
            {
                "name": "LOG_OUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'LOG_OUT'"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/states/auth.states.ts",
                "type": "Login",
                "defaultValue": "{\n  'id': null,\n  'roles': [role]\n}"
            },
            {
                "name": "LOGIN_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'LOGIN_USER'"
            },
            {
                "name": "loginErrorMapper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/select/auth.selectors.ts",
                "type": "",
                "defaultValue": "( data: any) => {\n  if (data && data.errorLoading && data.errorLoading.error) {\n    return {\n      message: data.errorLoading.error,\n      status: data.errorLoading.status\n    };\n  } else {\n    return ;\n  }\n}"
            },
            {
                "name": "loginUserDetailsMapper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/select/auth.selectors.ts",
                "type": "",
                "defaultValue": "( data: any) => {\n  if (data && data.userDetails) {\n    return data.userDetails;\n  } else {\n    return ;\n  }\n}"
            },
            {
                "name": "logOutUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, {'userDetails' : INITIAL_USER_DATA} );\n  return newData;\n}"
            },
            {
                "name": "mobileMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/mobile-menu.ts",
                "type": "MobileMenuItem[]",
                "defaultValue": "[\r\n    {type: 'link', label: 'Home', url: './', children: [\r\n        {type: 'link', label: 'Home 1', url: '/classic'},\r\n        {type: 'link', label: 'Home 2', url: '/compact'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Categories', url: '', children: [\r\n        {type: 'link', label: 'Power Tools', url: '', children: [\r\n            {type: 'link', label: 'Engravers',           url: ''},\r\n            {type: 'link', label: 'Wrenches',            url: ''},\r\n            {type: 'link', label: 'Wall Chaser',         url: ''},\r\n            {type: 'link', label: 'Pneumatic Tools',     url: ''}\r\n        ]},\r\n        {type: 'link', label: 'Machine Tools', url: '', children: [\r\n            {type: 'link', label: 'Thread Cutting',      url: ''},\r\n            {type: 'link', label: 'Chip Blowers',        url: ''},\r\n            {type: 'link', label: 'Sharpening Machines', url: ''},\r\n            {type: 'link', label: 'Pipe Cutters',        url: ''},\r\n            {type: 'link', label: 'Slotting machines',   url: ''},\r\n            {type: 'link', label: 'Lathes',              url: ''}\r\n        ]}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Shop', url: './shop', children: [\r\n        {type: 'link', label: 'Shop Grid', url: './shop', children: [\r\n            {type: 'link', label: '3 Columns Sidebar',  url: './shop/category-grid-3-columns-sidebar'},\r\n            {type: 'link', label: '4 Columns Full',     url: './shop/category-grid-4-columns-full'},\r\n            {type: 'link', label: '5 Columns Full',     url: './shop/category-grid-5-columns-full'}\r\n        ]},\r\n        {type: 'link', label: 'Shop List',          url: './shop/category-list'},\r\n        {type: 'link', label: 'Shop Right Sidebar', url: './shop/category-right-sidebar'},\r\n        {type: 'link', label: 'Product',            url: './shop/product', children: [\r\n            {type: 'link', label: 'Product',            url: './shop/product'},\r\n            {type: 'link', label: 'Product Alt',        url: './shop/product-columnar'},\r\n            {type: 'link', label: 'Product Sidebar',    url: './shop/product-sidebar'}\r\n        ]},\r\n        {type: 'link', label: 'Cart',        url: './shop/cart'},\r\n        {type: 'link', label: 'Checkout',    url: './shop/checkout'},\r\n        {type: 'link', label: 'Wishlist',    url: './shop/wishlist'},\r\n        {type: 'link', label: 'Compare',     url: './shop/compare'},\r\n        {type: 'link', label: 'Track Order', url: './shop/track-order'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Account', url: './account', children: [\r\n        {type: 'link', label: 'Login',           url: './account/login'},\r\n        {type: 'link', label: 'Dashboard',       url: './account/dashboard'},\r\n        {type: 'link', label: 'Edit Profile',    url: './account/profile'},\r\n        {type: 'link', label: 'Order History',   url: './account/orders'},\r\n        {type: 'link', label: 'Address Book',    url: './account/addresses'},\r\n        {type: 'link', label: 'Change Password', url: './account/password'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Blog', url: './blog', children: [\r\n        {type: 'link', label: 'Blog Classic',         url: './blog/category-classic'},\r\n        {type: 'link', label: 'Blog Grid',            url: './blog/category-grid'},\r\n        {type: 'link', label: 'Blog List',            url: './blog/category-list'},\r\n        {type: 'link', label: 'Blog Left Sidebar',    url: './blog/category-left-sidebar'},\r\n        {type: 'link', label: 'Post Page',            url: './blog/post-classic'},\r\n        {type: 'link', label: 'Post Without Sidebar', url: './blog/post-full'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Pages', url: './site', children: [\r\n        {type: 'link', label: 'About Us',             url: './site/about-us'},\r\n        {type: 'link', label: 'Contact Us',           url: './site/contact-us'},\r\n        {type: 'link', label: 'Contact Us Alt',       url: './site/contact-us-alt'},\r\n        {type: 'link', label: '404',                  url: './site/not-found'},\r\n        {type: 'link', label: 'Terms And Conditions', url: './site/terms'},\r\n        {type: 'link', label: 'FAQ',                  url: './site/faq'},\r\n        {type: 'link', label: 'Components',           url: './site/components'},\r\n        {type: 'link', label: 'Typography',           url: './site/typography'}\r\n    ]},\r\n\r\n    {type: 'button', label: 'Currency', children: [\r\n        {type: 'button', label: '€ Euro',           data: {currency: 'EUR'}},\r\n        {type: 'button', label: '£ Pound Sterling', data: {currency: 'GBP'}},\r\n        {type: 'button', label: '$ US Dollar',      data: {currency: 'USD'}},\r\n        {type: 'button', label: '₽ Russian Ruble',  data: {currency: 'RUB'}}\r\n    ]},\r\n\r\n    {type: 'button', label: 'Language', children: [\r\n        {type: 'button', label: 'English', data: {language: 'EN'}},\r\n        {type: 'button', label: 'French',  data: {language: 'FR'}},\r\n        {type: 'button', label: 'German',  data: {language: 'DE'}},\r\n        {type: 'button', label: 'Russian', data: {language: 'RU'}},\r\n        {type: 'button', label: 'Italian', data: {language: 'IT'}}\r\n    ]}\r\n]"
            },
            {
                "name": "navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/header-navigation.ts",
                "type": "NavigationLink[]",
                "defaultValue": "[\r\n    {label: 'Home', url: './', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Home 1', url: '/classic'},\r\n            {label: 'Home 2', url: '/compact'}\r\n        ]\r\n    }},\r\n    {label: 'Megamenu', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'nl',\r\n        columns: [\r\n            {size: 6, items: [\r\n                {label: 'Power Tools', url: './shop', items: [\r\n                    {label: 'Engravers', url: './shop'},\r\n                    {label: 'Wrenches', url: './shop'},\r\n                    {label: 'Wall Chaser', url: './shop'},\r\n                    {label: 'Pneumatic Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Machine Tools', url: './shop', items: [\r\n                    {label: 'Thread Cutting', url: './shop'},\r\n                    {label: 'Chip Blowers', url: './shop'},\r\n                    {label: 'Sharpening Machines', url: './shop'},\r\n                    {label: 'Pipe Cutters', url: './shop'},\r\n                    {label: 'Slotting machines', url: './shop'},\r\n                    {label: 'Lathes', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 6, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Shop', url: './shop', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Shop Grid', url: './shop', items: [\r\n                {label: '3 Columns Sidebar', url: './shop/category-grid-3-columns-sidebar'},\r\n                {label: '4 Columns Full',    url: './shop/category-grid-4-columns-full'},\r\n                {label: '5 Columns Full',    url: './shop/category-grid-5-columns-full'}\r\n            ]},\r\n            {label: 'Shop List', url: './shop/category-list'},\r\n            {label: 'Shop Right Sidebar', url: './shop/category-right-sidebar'},\r\n            {label: 'Product', url: './shop/product', items: [\r\n                {label: 'Product', url: './shop/product'},\r\n                {label: 'Product Alt', url: './shop/product-columnar'},\r\n                {label: 'Product Sidebar', url: './shop/product-sidebar'}\r\n            ]},\r\n            {label: 'Cart', url: './shop/cart'},\r\n            {label: 'Checkout', url: './shop/checkout'},\r\n            {label: 'Wishlist', url: './shop/wishlist'},\r\n            {label: 'Compare', url: './shop/compare'},\r\n            {label: 'Track Order', url: './shop/track-order'},\r\n        ]\r\n    }},\r\n    {label: 'Account', url: './account', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Login',           url: './account/login'},\r\n            {label: 'Dashboard',       url: './account/dashboard'},\r\n            {label: 'Edit Profile',    url: './account/profile'},\r\n            {label: 'Order History',   url: './account/orders'},\r\n            {label: 'Address Book',    url: './account/addresses'},\r\n            {label: 'Change Password', url: './account/password'}\r\n        ]\r\n    }},\r\n    {label: 'Blog', url: './blog', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Blog Classic',         url: './blog/category-classic'},\r\n            {label: 'Blog Grid',            url: './blog/category-grid'},\r\n            {label: 'Blog List',            url: './blog/category-list'},\r\n            {label: 'Blog Left Sidebar',    url: './blog/category-left-sidebar'},\r\n            {label: 'Post Page',            url: './blog/post-classic'},\r\n            {label: 'Post Without Sidebar', url: './blog/post-full'}\r\n        ]\r\n    }},\r\n    {label: 'Pages', url: './site', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'About Us',             url: './site/about-us'},\r\n            {label: 'Contact Us',           url: './site/contact-us'},\r\n            {label: 'Contact Us Alt',       url: './site/contact-us-alt'},\r\n            {label: '404',                  url: './site/not-found'},\r\n            {label: 'Terms And Conditions', url: './site/terms'},\r\n            {label: 'FAQ',                  url: './site/faq'},\r\n            {label: 'Components',           url: './site/components'},\r\n            {label: 'Typography',           url: './site/typography'}\r\n        ]\r\n    }},\r\n    {label: 'Buy Theme', url: 'https://themeforest.net/item/stroyka-tools-store-angular-7-template/23523630', external: true}\r\n]"
            },
            {
                "name": "orders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/account-orders.ts",
                "type": "Order[]",
                "defaultValue": "[\r\n    {\r\n        id: 8132,\r\n        date: '02 April, 2019',\r\n        status: 'Pending',\r\n        total: '$2,719.00 for 5 item(s)'\r\n    },\r\n    {\r\n        id: 7592,\r\n        date: '28 March, 2019',\r\n        status: 'Pending',\r\n        total: '$374.00 for 3 item(s)'\r\n    },\r\n    {\r\n        id: 7192,\r\n        date: '15 March, 2019',\r\n        status: 'Shipped',\r\n        total: '$791.00 for 4 item(s)'\r\n    },\r\n    {\r\n        id: 6321,\r\n        date: '28 February, 2019',\r\n        status: 'Completed',\r\n        total: '$57.00 for 1 item(s)'\r\n    },\r\n    {\r\n        id: 6001,\r\n        date: '21 February, 2019',\r\n        status: 'Completed',\r\n        total: '$252.00 for 2 item(s)'\r\n    },\r\n    {\r\n        id: 4120,\r\n        date: '11 December, 2018',\r\n        status: 'Completed',\r\n        total: '$3,978.00 for 7 item(s)'\r\n    }\r\n]"
            },
            {
                "name": "PhotoSwipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/photo-swipe.service.ts",
                "type": "any"
            },
            {
                "name": "PhotoSwipeUI_Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/photo-swipe.service.ts",
                "type": "any"
            },
            {
                "name": "postComments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/blog-post-comments.ts",
                "type": "PostCommentsList",
                "defaultValue": "{\r\n    count: 4,\r\n    items: [\r\n        {\r\n            avatar: 'assets/images/avatars/avatar-1',\r\n            author: 'Jessica Moore',\r\n            date: 'November 30, 2018',\r\n            text: 'Aliquam ullamcorper elementum sagittis. Etiam lacus lacus, mollis in mattis in, vehicula eu nulla. ' +\r\n                  'Nulla nec tellus pellentesque.',\r\n            children: [\r\n                {\r\n                    avatar: 'assets/images/avatars/avatar-2',\r\n                    author: 'Adam Taylor',\r\n                    date: 'December 4, 2018',\r\n                    text: 'Ut vitae finibus nisl, suscipit porttitor urna. Integer efficitur efficitur velit non pulvinar. ' +\r\n                          'Aliquam blandit volutpat arcu vel tristique. Integer commodo ligula id augue tincidunt faucibus.'\r\n                },\r\n                {\r\n                    avatar: 'assets/images/avatars/avatar-3',\r\n                    author: 'Helena Garcia',\r\n                    date: 'December 12, 2018',\r\n                    text: 'Suspendisse dignissim luctus metus vitae aliquam. Vestibulum sem odio, ullamcorper a imperdiet a, ' +\r\n                          'tincidunt sed lacus. Sed magna felis, consequat a erat ut, rutrum finibus odio.'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            avatar: 'assets/images/avatars/avatar-4',\r\n            author: 'Ryan Ford',\r\n            date: 'December 5, 2018',\r\n            text: 'Nullam at varius sapien. Sed sit amet condimentum elit.'\r\n        }\r\n    ]\r\n}"
            },
            {
                "name": "posts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/blog-posts.ts",
                "type": "Post[]",
                "defaultValue": "[\r\n    {\r\n        title: 'Philosophy That Addresses Topics Such As Goodness',\r\n        image: 'assets/images/posts/post-1.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'October 19, 2019'\r\n    },\r\n    {\r\n        title: 'Logic Is The Study Of Reasoning And Argument Part 2',\r\n        image: 'assets/images/posts/post-2.jpg',\r\n        categories: ['Latest News'],\r\n        date: 'September 5, 2019'\r\n    },\r\n    {\r\n        title: 'Some Philosophers Specialize In One Or More Historical Periods',\r\n        image: 'assets/images/posts/post-3.jpg',\r\n        categories: ['New Arrivals'],\r\n        date: 'August 12, 2019'\r\n    },\r\n    {\r\n        title: 'A Variety Of Other Academic And Non-Academic Approaches Have Been Explored',\r\n        image: 'assets/images/posts/post-4.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'Jule 30, 2019'\r\n    },\r\n    {\r\n        title: 'Germany Was The First Country To Professionalize Philosophy',\r\n        image: 'assets/images/posts/post-5.jpg',\r\n        categories: ['New Arrivals'],\r\n        date: 'June 12, 2019'\r\n    },\r\n    {\r\n        title: 'Logic Is The Study Of Reasoning And Argument Part 1',\r\n        image: 'assets/images/posts/post-6.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'May 21, 2019'\r\n    },\r\n    {\r\n        title: 'Many Inquiries Outside Of Academia Are Philosophical In The Broad Sense',\r\n        image: 'assets/images/posts/post-7.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'April 3, 2019'\r\n    },\r\n    {\r\n        title: 'An Advantage Of Digital Circuits When Compared To Analog Circuits',\r\n        image: 'assets/images/posts/post-8.jpg',\r\n        categories: ['Latest News'],\r\n        date: 'Mart 29, 2019'\r\n    },\r\n    {\r\n        title: 'A Digital Circuit Is Typically Constructed From Small Electronic Circuits',\r\n        image: 'assets/images/posts/post-9.jpg',\r\n        categories: ['New Arrivals'],\r\n        date: 'February 10, 2019'\r\n    },\r\n    {\r\n        title: 'Engineers Use Many Methods To Minimize Logic Functions',\r\n        image: 'assets/images/posts/post-10.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'January 1, 2019'\r\n    }\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "products",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/shop-products.ts",
                "type": "any",
                "defaultValue": "[\r\n    {\r\n        id: 1,\r\n        name: 'Electric Planer Brandix KL370090G 300 Watts',\r\n        price: 749,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-1.jpg', 'assets/images/products/product-1-1.jpg'],\r\n        badges: ['new'],\r\n        rating: 4,\r\n        reviews: 12,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Undefined Tool IRadix DPS3000SY 2700 Watts',\r\n        price: 1019,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-2.jpg', 'assets/images/products/product-2-1.jpg'],\r\n        badges: ['hot'],\r\n        rating: 5,\r\n        reviews: 3,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Drill Screwdriver Brandix ALX7054 200 Watts',\r\n        price: 850,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-3.jpg', 'assets/images/products/product-3-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 8,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Drill Series 3 Brandix KSR4590PQS 1500 Watts',\r\n        price: 949,\r\n        compareAtPrice: 1189,\r\n        images: ['assets/images/products/product-4.jpg', 'assets/images/products/product-4-1.jpg'],\r\n        badges: ['sale'],\r\n        rating: 3,\r\n        reviews: 15,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Brandix Router Power Tool 2017ERXPK',\r\n        price: 1700,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-5.jpg', 'assets/images/products/product-5-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 2,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Brandix Drilling Machine DM2019KW4 4kW',\r\n        price: 3199,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-6.jpg', 'assets/images/products/product-6-1.jpg'],\r\n        badges: [],\r\n        rating: 3,\r\n        reviews: 21,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Brandix Pliers',\r\n        price: 24,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-7.jpg', 'assets/images/products/product-7-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 1,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Water Hose 40cm',\r\n        price: 15,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-8.jpg', 'assets/images/products/product-8-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 5,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Spanner Wrench',\r\n        price: 19,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-9.jpg', 'assets/images/products/product-9-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 34,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Water Tap',\r\n        price: 15,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-10.jpg', 'assets/images/products/product-10-1.jpg'],\r\n        badges: [],\r\n        rating: 5,\r\n        reviews: 3,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Hand Tool Kit',\r\n        price: 149,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-11.jpg', 'assets/images/products/product-11-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 7,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Ash\\'s Chainsaw 3.5kW',\r\n        price: 666.99,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-12.jpg', 'assets/images/products/product-12-1.jpg'],\r\n        badges: [],\r\n        rating: 5,\r\n        reviews: 17,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Brandix Angle Grinder KZX3890PQW',\r\n        price: 649,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-13.jpg', 'assets/images/products/product-13-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 8,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 14,\r\n        name: 'Brandix Air Compressor DELTAKX500',\r\n        price: 1800,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-14.jpg', 'assets/images/products/product-14-1.jpg'],\r\n        badges: [],\r\n        rating: 3,\r\n        reviews: 14,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Brandix Electric Jigsaw JIG7000BQ',\r\n        price: 290,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-15.jpg', 'assets/images/products/product-15-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 1,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 16,\r\n        name: 'Brandix Screwdriver SCREW1500ACC',\r\n        price: 1499,\r\n        compareAtPrice: null,\r\n        images: [\r\n            'assets/images/products/product-16.jpg',\r\n            'assets/images/products/product-16-1.jpg',\r\n            'assets/images/products/product-16-2.jpg',\r\n            'assets/images/products/product-16-3.jpg',\r\n            'assets/images/products/product-16-4.jpg'\r\n        ],\r\n        badges: [],\r\n        rating: 5,\r\n        reviews: 3,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    }\r\n]"
            },
            {
                "name": "RE_LOGIN_ON_REFRESH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'RE_LOGIN_ON_REFRESH'"
            },
            {
                "name": "readCurrentOrderFromStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  return state;\n}"
            },
            {
                "name": "readCurrentOrderFromStoreSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  return state;\n}"
            },
            {
                "name": "REGISTER_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'REGISTER_USER'"
            },
            {
                "name": "REGISTER_USER_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'REGISTER_USER_SUCCESS'"
            },
            {
                "name": "registerUserMapper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/select/auth.selectors.ts",
                "type": "",
                "defaultValue": "(data: any) => {\n  if (data && data.registerUser) {\n    return data.registerUser;\n  } else {\n    return ;\n  }\n}"
            },
            {
                "name": "registerUserSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "",
                "defaultValue": "( state , action): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { registerUserState: action.payload });\n  return newData;\n}"
            },
            {
                "name": "REMOVE_FROM_CART",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'REMOVE_FROM_CART'"
            },
            {
                "name": "REMOVE_ITEM_FROM_PRODUCT_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'REMOVE_ITEM_FROM_PRODUCT_LIST'"
            },
            {
                "name": "removeProductFromCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { removeProductFromCart: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "RESET_PRODUCT_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'RESET_PRODUCT_DETAILS'"
            },
            {
                "name": "resetProductDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const  newData: AppStates = Object.assign({}, state, { uiStateProductDetails: initStateOfProductDetails} );\n  return newData;\n}"
            },
            {
                "name": "reviews",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/shop-product-reviews.ts",
                "type": "ProductReview[]",
                "defaultValue": "[\r\n    {\r\n        avatar: 'assets/images/avatars/avatar-1.jpg',\r\n        author: 'Samantha Smith',\r\n        rating: 4,\r\n        date: '27 May, 2018',\r\n        text: 'Phasellus id mattis nulla. Mauris velit nisi, imperdiet vitae sodales in, maximus ut lectus. Vivamus commodo ' +\r\n              'scelerisque lacus, at porttitor dui iaculis id. Curabitur imperdiet ultrices fermentum.'\r\n    },\r\n    {\r\n        avatar: 'assets/images/avatars/avatar-2.jpg',\r\n        author: 'Adam Taylor',\r\n        rating: 3,\r\n        date: '12 April, 2018',\r\n        text: 'Aenean non lorem nisl. Duis tempor sollicitudin orci, eget tincidunt ex semper sit amet. Nullam neque justo, ' +\r\n              'sodales congue feugiat ac, facilisis a augue. Donec tempor sapien et fringilla facilisis. Nam maximus consectetur ' +\r\n              'diam. Nulla ut ex mollis, volutpat tellus vitae, accumsan ligula.'\r\n    },\r\n    {\r\n        avatar: 'assets/images/avatars/avatar-3.jpg',\r\n        author: 'Helena Garcia',\r\n        rating: 5,\r\n        date: '2 January, 2018',\r\n        text: 'Duis ac lectus scelerisque quam blandit egestas. Pellentesque hendrerit eros laoreet suscipit ultrices.'\r\n    }\r\n]"
            },
            {
                "name": "role",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/states/auth.states.ts",
                "type": "Role",
                "defaultValue": "{\n  'description': null,\n  'id': null,\n  'roleName': undefined\n}"
            },
            {
                "name": "roles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/consts/consts.ts",
                "type": "[]",
                "defaultValue": "['seller', 'buyer', 'guest']"
            },
            {
                "name": "ruJson",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test/mock.ts",
                "type": "",
                "defaultValue": "require('../assets/i18n/ru.json')"
            },
            {
                "name": "SAVE_CURRENT_ORDER_IN_STORE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'SAVE_CURRENT_ORDER_IN_STORE'"
            },
            {
                "name": "SAVE_ORDER_IN_HISTORY_API",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'SAVE_ORDER_IN_HISTORY_API'"
            },
            {
                "name": "SAVE_PLACED_ORDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'SAVE_PLACED_ORDER'"
            },
            {
                "name": "savePlacedOrder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { processedOrders: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "savePlacedOrderDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { processedOrdersDetails: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SELECT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/actions/login.actions.ts",
                "type": "string",
                "defaultValue": "'SELECT_LANGUAGE'"
            },
            {
                "name": "selectCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<CartState>('cart')"
            },
            {
                "name": "selectCurrentOrderInCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCart,\n  (state: CartState) => {\n    if (state && state.currentOrderInCart)\n      return state.currentOrderInCart;\n  }\n)"
            },
            {
                "name": "selectItemListDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCurrentOrderInCart,\n  (orderInCart: CurrentOrderInCart) => {\n    if (orderInCart && orderInCart.itemList) {\n      return orderInCart.itemList;\n    }\n  }\n)"
            },
            {
                "name": "selectLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newUserDetails = {...state.userDetails, language: action.payload};\n  return {...state, ...{userDetails: newUserDetails}};\n}"
            },
            {
                "name": "selectOrdersHistory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCart,\n  (state: CartState) => {\n    if(state && state.orderStoredInHistoryApi) {\n      return state && state.orderStoredInHistoryApi;\n    }\n  }\n)"
            },
            {
                "name": "selectTotalAmountInCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCurrentOrderInCart,\n  (orderInCart: CurrentOrderInCart) => {\n    if (orderInCart && orderInCart.totalAmount){\n      return orderInCart.totalAmount;\n    }\n  }\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/actions/cart.actions.ts",
                "type": "string",
                "defaultValue": "'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS'"
            },
            {
                "name": "storeCurrentOrderInCart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { currentOrderInCart: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "storeOrderNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newUserDetails = {...state.userDetails, orderNumber: action.payload.orderNumber};\n  return {...state, ...{userDetails: newUserDetails}};\n}"
            },
            {
                "name": "storeProcessedOrderInHistoryApi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "",
                "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { orderStoredInHistoryApi: action.payload} );\n  return newData;\n}"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/photo-swipe.service.ts",
                "type": "",
                "defaultValue": "`\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "theme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/data/theme.ts",
                "type": "object",
                "defaultValue": "{\r\n    name: 'Stroyka',\r\n    author: {\r\n        name: 'Kos',\r\n        profile_url: 'https://themeforest.net/user/kos9'\r\n    }\r\n}"
            },
            {
                "name": "UPLOAD_PRODUCT_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'UPLOAD_PRODUCT_IMAGE'"
            },
            {
                "name": "UPLOAD_PRODUCT_IMAGE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/products.actions.ts",
                "type": "string",
                "defaultValue": "'UPLOAD_PRODUCT_IMAGE_SUCCESS'"
            },
            {
                "name": "uploadProductImageSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/reducers.ts",
                "type": "",
                "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  return Object.assign({}, state, { imageUploaded: action.payload} );\n}"
            }
        ],
        "functions": [
            {
                "name": "cartReducer",
                "file": "src/app/cart/store/reducers/cart.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fromMatchMedia",
                "file": "src/app/shared/functions/rxjs/fromMatchMedia.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "query"
                    }
                ],
                "returnType": "Observable<MediaQueryList>",
                "jsdoctags": [
                    {
                        "name": "query",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "parseNumber",
                "file": "src/app/shared/components/input-number/input-number.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any"
                    },
                    {
                        "name": "def"
                    }
                ],
                "returnType": "number | T",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "def",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "productsReducer",
                "file": "src/app/products/store/reducers/reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "userLoginReducer",
                "file": "src/app/auth/store/reducers/login.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Direction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"ltr\" | \"rtl\"",
                "file": "src/app/shared/services/direction.service.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Layout",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"grid\" | \"grid-with-features\" | \"list\"",
                "file": "src/app/products/components/products-view/products-view.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Layout",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"standard\" | \"sidebar\" | \"columnar\" | \"quickview\"",
                "file": "src/app/shared/components/product/product.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "MobileMenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "MobileMenuItemLink | MobileMenuItemButton",
                "file": "src/app/shared/interfaces/mobile-menu-item.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor",
                "file": "src/app/shared/interfaces/product-filter.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Task",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/services/resources.service.ts",
                "description": "",
                "kind": 162
            }
        ],
        "enumerations": [
            {
                "name": "Payments",
                "childs": [
                    {
                        "name": "cash",
                        "value": "1"
                    },
                    {
                        "name": "debit"
                    },
                    {
                        "name": "credit"
                    },
                    {
                        "name": "check"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/cart/enums/payments.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/cart/store/actions/cart.actions.ts": [
                {
                    "name": "ADD_TO_CART",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'ADD_TO_CART'"
                },
                {
                    "name": "ADD_TO_CART_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'ADD_PRODUCT_TO_CART_SUCCESS'"
                },
                {
                    "name": "CHECK_OUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'CHECK_OUT'"
                },
                {
                    "name": "CHECK_OUT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'CHECK_OUT_SUCCESS'"
                },
                {
                    "name": "DELETE_ORDER_FROM_HISTORY_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'DELETE_ORDER_FROM_HISTORY_API'"
                },
                {
                    "name": "FETCH_ORDERS_HISTORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'FETCH_ORDERS_HISTORY'"
                },
                {
                    "name": "GET_CURRENT_ORDER_FROM_STORE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_CURRENT_ORDER_FROM_STORE'"
                },
                {
                    "name": "GET_CURRENT_ORDER_FROM_STORE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_CURRENT_ORDER_FROM_STORE_SUCCESS'"
                },
                {
                    "name": "REMOVE_FROM_CART",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'REMOVE_FROM_CART'"
                },
                {
                    "name": "SAVE_CURRENT_ORDER_IN_STORE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'SAVE_CURRENT_ORDER_IN_STORE'"
                },
                {
                    "name": "SAVE_ORDER_IN_HISTORY_API",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'SAVE_ORDER_IN_HISTORY_API'"
                },
                {
                    "name": "SAVE_PLACED_ORDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'SAVE_PLACED_ORDER'"
                },
                {
                    "name": "STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/actions/cart.actions.ts",
                    "type": "string",
                    "defaultValue": "'STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS'"
                }
            ],
            "src/app/cart/store/reducers/cart.reducers.ts": [
                {
                    "name": "addProductToCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { productsInCart: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "addProductToCartSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { productToCartSuccess: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "checkOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { checkOutDetails: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "checkOutSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, {\n    checkOutConfirmationStatus: false,\n    shoppingOrderNumber: undefined,\n    productsInCart: undefined,\n    productToCartSuccess: undefined,\n    currentOrderInCart: undefined,\n    checkOutDetails: undefined\n  } );\n  return newData;\n}"
                },
                {
                    "name": "readCurrentOrderFromStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  return state;\n}"
                },
                {
                    "name": "readCurrentOrderFromStoreSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  return state;\n}"
                },
                {
                    "name": "removeProductFromCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { removeProductFromCart: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "savePlacedOrder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { processedOrders: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "savePlacedOrderDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { processedOrdersDetails: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "storeCurrentOrderInCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { currentOrderInCart: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "storeProcessedOrderInHistoryApi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "type": "",
                    "defaultValue": "(state: CartState, action: ReducerClass): CartState => {\n  const newData: CartState = Object.assign({}, state, { orderStoredInHistoryApi: action.payload} );\n  return newData;\n}"
                }
            ],
            "src/data/account-addresses.ts": [
                {
                    "name": "addresses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/account-addresses.ts",
                    "type": "Address[]",
                    "defaultValue": "[\r\n    {\r\n        default: true,\r\n        firstName: 'Helena',\r\n        lastName: 'Garcia',\r\n        email: 'stroyka@example.com',\r\n        phone: '38 972 588-42-36',\r\n        country: 'Random Federation',\r\n        city: 'Moscow',\r\n        postcode: '115302',\r\n        address: 'ul. Varshavskaya, 15-2-178'\r\n    },\r\n    {\r\n        default: false,\r\n        firstName: 'Jupiter',\r\n        lastName: 'Saturnov',\r\n        email: 'stroyka@example.com',\r\n        phone: 'ZX 971 972-57-26',\r\n        country: 'RandomLand',\r\n        city: 'MarsGrad',\r\n        postcode: '4b4f53',\r\n        address: 'Sun Orbit, 43.3241-85.239'\r\n    }\r\n]"
                }
            ],
            "src/app/products/store/reducers/reducers.ts": [
                {
                    "name": "appendError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const stateWithError: AppStates = Object.assign({}, state,\n      {\n        errorState: {\n          message: 'Server connection error. Probably you need to login.',\n          status: 'error',\n          error_code: 'remove_product_error'\n        }\n      }\n    );\n  return stateWithError;\n}"
                },
                {
                    "name": "createNewProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  return state;\n}"
                },
                {
                    "name": "createNewProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  return Object.assign({}, state, { productCreated: action.payload} );\n}"
                },
                {
                    "name": "loadProductDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { uiStateProductDetails: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "loadProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { storeData: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "loadProductSlug",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { uiProductDetailsSlug: action.payload} );\n  return newData;\n}"
                },
                {
                    "name": "resetProductDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const  newData: AppStates = Object.assign({}, state, { uiStateProductDetails: initStateOfProductDetails} );\n  return newData;\n}"
                },
                {
                    "name": "uploadProductImageSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  return Object.assign({}, state, { imageUploaded: action.payload} );\n}"
                }
            ],
            "src/data/shop-brands.ts": [
                {
                    "name": "brands",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/shop-brands.ts",
                    "type": "Brand[]",
                    "defaultValue": "[\r\n    {image: 'assets/images/logos/logo-1.png'},\r\n    {image: 'assets/images/logos/logo-2.png'},\r\n    {image: 'assets/images/logos/logo-3.png'},\r\n    {image: 'assets/images/logos/logo-4.png'},\r\n    {image: 'assets/images/logos/logo-5.png'},\r\n    {image: 'assets/images/logos/logo-6.png'},\r\n    {image: 'assets/images/logos/logo-7.png'}\r\n]"
                }
            ],
            "src/test/mock.ts": [
                {
                    "name": "cartReducerStateMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test/mock.ts",
                    "type": "object",
                    "defaultValue": "{\n  cart: {\n    currentOrderInCart: {\n      \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n      \"orderToken\": null,\n      \"userId\": 1211,\n      \"totalAmount\": 123.97,\n      \"totalQuantity\": 4,\n      \"paymentId\": null,\n      \"paymentPlaced\": null,\n      \"paymentPaid\": null,\n      \"itemList\": [\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2305\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 42,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"robot\",\n            \"description\": \"robot1\",\n            \"slug\": \"robot1\",\n            \"price\": 100,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100113/m6xqpddpalxl2zubmajx.png\",\n                  \"publicId\": \"m6xqpddpalxl2zubmajx\",\n                  \"description\": null,\n                  \"productInfoId\": 43,\n                  \"id\": 44\n                }\n              ],\n              \"id\": 43\n            },\n            \"id\": 42\n          },\n          \"id\": 2306\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 55,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"Plastic toy\",\n            \"description\": \"plastic toy\",\n            \"slug\": \"plastic-toy\",\n            \"price\": 3.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg\",\n                  \"publicId\": \"s4l1dp26u0cllhvmafm6\",\n                  \"description\": null,\n                  \"productInfoId\": 56,\n                  \"id\": 57\n                }\n              ],\n              \"id\": 56\n            },\n            \"id\": 55\n          },\n          \"id\": 2307\n        },\n        {\n          \"itemId\": null,\n          \"productId\": 40,\n          \"quantity\": 1,\n          \"orderNumber\": \"c7fc090507095ac35e251a5973ec916b\",\n          \"product\": {\n            \"name\": \"toy\",\n            \"description\": \"mechanic toy\",\n            \"slug\": \"mechanic-toy\",\n            \"price\": 9.99,\n            \"defaultMaxQuantity\": 10,\n            \"isRemoved\": false,\n            \"productInfo\": {\n              \"imageList\": [\n                {\n                  \"largeUrl\": null,\n                  \"imageUrl\": \"https://res.cloudinary.com/webcodes-io/image/upload/v1573100286/cgncnogdofepfd1jc9oy.jpg\",\n                  \"publicId\": \"cgncnogdofepfd1jc9oy\",\n                  \"description\": null,\n                  \"productInfoId\": 41,\n                  \"id\": 50\n                }\n              ],\n              \"id\": 41\n            },\n            \"id\": 40\n          },\n          \"id\": 2308\n        }\n      ],\n      \"payment\": null,\n      \"id\": 2304\n    },\n    orderStoredInHistoryApi: [\n      {\n        'checked': false,\n        'id': 'fdb32730-337c-11eb-961c-11163f8d90be',\n        'orderDetails': {\n          'totalAmount': 13.98,\n          'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n          'orderToken': null,\n          'totalQuantity': 2,\n          'paymentPlaced': null,\n          'paymentId': null,\n          'itemList': [\n            {\n              'itemId': null,\n              'product': {\n                'isRemoved': false,\n                'price': 3.99,\n                'defaultMaxQuantity': 10,\n                'name': 'Plastic toy',\n                'description': 'plastic toy',\n                'id': 55,\n                'slug': 'plastic-toy',\n                'productInfo': {\n                  'imageList': [\n                    {\n                      'description': null,\n                      'largeUrl': null,\n                      'id': 57,\n                      'publicId': 's4l1dp26u0cllhvmafm6',\n                      'productInfoId': 56,\n                      'imageUrl': 'https://res.cloudinary.com/webcodes-io/image/upload/v1573100620/s4l1dp26u0cllhvmafm6.jpg'\n                    }\n                  ],\n                  'id': 56\n                }\n              },\n              'quantity': 1,\n              'orderNumber': '16de0e54369c7fe88517122ec7bb5d0c',\n              'id': 2007,\n              'productId': 55\n            }\n          ],\n          'payment': null,\n          'id': 2006,\n          'userId': 35,\n          'paymentPaid': null\n        },\n        'userid': '35',\n        'updatedAt': 1606789749027\n      }\n    ]\n  }\n}"
                },
                {
                    "name": "enJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test/mock.ts",
                    "type": "",
                    "defaultValue": "require('../assets/i18n/en.json')"
                },
                {
                    "name": "frJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test/mock.ts",
                    "type": "",
                    "defaultValue": "require('../assets/i18n/fr.json')"
                },
                {
                    "name": "initialAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test/mock.ts",
                    "type": "object",
                    "defaultValue": "{\n  userLoginReducer: {\n    userDetails: {\n      'userName': 'kuku@kuku.com',\n      'password': '',\n      'token': 'eyJhbGciOiJIUzI1NiJ9',\n      'mobile': 123456789,\n      'login': {\n        'roles': [\n          {\n            'roleName': 'buyer',\n            'description': null,\n            'id': 34\n          }\n        ],\n        'id': 33\n      },\n      'id': 35\n    }\n  }\n}"
                },
                {
                    "name": "ruJson",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test/mock.ts",
                    "type": "",
                    "defaultValue": "require('../assets/i18n/ru.json')"
                }
            ],
            "src/data/blog-widget-categories.ts": [
                {
                    "name": "categories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/blog-widget-categories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n    {name: 'Latest News', url: '../'},\r\n    {name: 'Special Offers', url: '../', children: [\r\n        {name: 'Spring Sales', url: '../'},\r\n        {name: 'Summer Sales', url: '../'},\r\n        {name: 'Autumn Sales', url: '../'},\r\n        {name: 'Christmas Sales', url: '../'},\r\n        {name: 'Other Sales', url: '../'}\r\n    ]},\r\n    {name: 'New Arrivals', url: '../'},\r\n    {name: 'Reviews', url: '../'},\r\n    {name: 'Drills and Mixers', url: '../'},\r\n    {name: 'Cordless Screwdrivers', url: '../'},\r\n    {name: 'Screwdrivers', url: '../'},\r\n    {name: 'Wrenches', url: '../'}\r\n]"
                }
            ],
            "src/data/shop-widget-categories.ts": [
                {
                    "name": "categories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/shop-widget-categories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n    {name: 'Power Tools', url: '../', children: [\r\n        {name: 'Engravers', url: '../'},\r\n        {name: 'Drills', url: '../'},\r\n        {name: 'Wrenches', url: '../'},\r\n        {name: 'Plumbing', url: '../'},\r\n        {name: 'Wall Chaser', url: '../'},\r\n        {name: 'Pneumatic Tools', url: '../'},\r\n        {name: 'Milling Cutters', url: '../'}\r\n    ]},\r\n    {name: 'Hand Tools', url: '../', children: [\r\n        {name: 'Screwdrivers', url: '../'},\r\n        {name: 'Handsaws', url: '../'},\r\n        {name: 'Knives', url: '../'},\r\n        {name: 'Axes', url: '../'},\r\n        {name: 'Multitools', url: '../'},\r\n        {name: 'Paint Tools', url: '../'}\r\n    ]},\r\n    {name: 'Garden Equipment', url: '../', children: [\r\n        {name: 'Motor Pumps', url: '../'},\r\n        {name: 'Chainsaws', url: '../'},\r\n        {name: 'Electric Saws', url: '../'},\r\n        {name: 'Brush Cutters', url: '../'}\r\n    ]},\r\n    {name: 'Machine Tools', url: '../', children: [\r\n        {name: 'Thread Cutting', url: '../'},\r\n        {name: 'Chip Blowers', url: '../'},\r\n        {name: 'Sharpening Machines', url: '../'},\r\n        {name: 'Pipe Cutters', url: '../'},\r\n        {name: 'Slotting machines', url: '../'},\r\n        {name: 'Lathes', url: '../'}\r\n    ]},\r\n    {name: 'Instruments', url: '../', children: [\r\n        {name: 'Welding Equipment', url: '../'},\r\n        {name: 'Power Tools', url: '../'},\r\n        {name: 'Hand Tools', url: '../'},\r\n        {name: 'Measuring Tool', url: '../'}\r\n    ]},\r\n    {name: 'Workbenches', url: '../'},\r\n    {name: 'Presses', url: '../'},\r\n    {name: 'Spray Guns', url: '../'},\r\n    {name: 'Riveters', url: '../'}\r\n]"
                }
            ],
            "src/data/shop-block-categories.ts": [
                {
                    "name": "categories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/shop-block-categories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    {title: 'Power Tools', url: '../shop', products: 572, image: 'assets/images/categories/category-1.jpg', subcategories: [\r\n        {title: 'Screwdrivers', url: '../shop'},\r\n        {title: 'Milling Cutters', url: '../shop'},\r\n        {title: 'Sanding Machines', url: '../shop'},\r\n        {title: 'Wrenches', url: '../shop'},\r\n        {title: 'Drills', url: '../shop'}\r\n    ]},\r\n    {title: 'Hand Tools', url: '../shop', products: 134, image: 'assets/images/categories/category-2.jpg', subcategories: [\r\n        {title: 'Screwdrivers', url: '../shop'},\r\n        {title: 'Hammers', url: '../shop'},\r\n        {title: 'Spanners', url: '../shop'},\r\n        {title: 'Handsaws', url: '../shop'},\r\n        {title: 'Paint Tools', url: '../shop'}\r\n    ]},\r\n    {title: 'Machine Tools', url: '../shop', products: 301, image: 'assets/images/categories/category-4.jpg', subcategories: [\r\n        {title: 'Lathes', url: '../shop'},\r\n        {title: 'Milling Machines', url: '../shop'},\r\n        {title: 'Grinding Machines', url: '../shop'},\r\n        {title: 'CNC Machines', url: '../shop'},\r\n        {title: 'Sharpening Machines', url: '../shop'}\r\n    ]},\r\n    {title: 'Power Machinery', url: '../shop', products: 79, image: 'assets/images/categories/category-3.jpg', subcategories: [\r\n        {title: 'Generators', url: '../shop'},\r\n        {title: 'Compressors', url: '../shop'},\r\n        {title: 'Winches', url: '../shop'},\r\n        {title: 'Plasma Cutting', url: '../shop'},\r\n        {title: 'Electric Motors', url: '../shop'}\r\n    ]},\r\n    {title: 'Measurement', url: '../shop', products: 366, image: 'assets/images/categories/category-5.jpg', subcategories: [\r\n        {title: 'Tape Measure', url: '../shop'},\r\n        {title: 'Theodolites', url: '../shop'},\r\n        {title: 'Thermal Imagers', url: '../shop'},\r\n        {title: 'Calipers', url: '../shop'},\r\n        {title: 'Levels', url: '../shop'}\r\n    ]},\r\n    {title: 'Clothes and PPE', url: '../shop', products: 81, image: 'assets/images/categories/category-6.jpg', subcategories: [\r\n        {title: 'Winter Workwear', url: '../shop'},\r\n        {title: 'Summer Workwear', url: '../shop'},\r\n        {title: 'Helmets', url: '../shop'},\r\n        {title: 'Belts and Bags', url: '../shop'},\r\n        {title: 'Work Shoes', url: '../shop'}\r\n    ]}\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/app/products/store/actions/products.actions.ts": [
                {
                    "name": "CREATE_NEW_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'CREATE_NEW_PRODUCT'"
                },
                {
                    "name": "CREATE_NEW_PRODUCT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'CREATE_NEW_PRODUCT_SUCCESS'"
                },
                {
                    "name": "ERROR_LOADING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'ERROR_LOADING'"
                },
                {
                    "name": "GET_PRODUCT_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_PRODUCT_DETAILS'"
                },
                {
                    "name": "GET_PRODUCT_DETAILS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_PRODUCT_DETAILS_SUCCESS'"
                },
                {
                    "name": "GET_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_PRODUCTS'"
                },
                {
                    "name": "GET_PRODUCTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_PRODUCTS_SUCCESS'"
                },
                {
                    "name": "REMOVE_ITEM_FROM_PRODUCT_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'REMOVE_ITEM_FROM_PRODUCT_LIST'"
                },
                {
                    "name": "RESET_PRODUCT_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'RESET_PRODUCT_DETAILS'"
                },
                {
                    "name": "UPLOAD_PRODUCT_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'UPLOAD_PRODUCT_IMAGE'"
                },
                {
                    "name": "UPLOAD_PRODUCT_IMAGE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'UPLOAD_PRODUCT_IMAGE_SUCCESS'"
                }
            ],
            "src/app/auth/store/actions/login.actions.ts": [
                {
                    "name": "CREATE_ORDER_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'CREATE_ORDER_NUMBER'"
                },
                {
                    "name": "ERROR_LOADING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'ERROR_LOADING'"
                },
                {
                    "name": "FINISH_STORAGE_CLEARENCE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'FINISH_STORAGE_CLEARENCE'"
                },
                {
                    "name": "GET_ORDER_NUMBER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'GET_ORDER_NUMBER'"
                },
                {
                    "name": "LOG_OUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'LOG_OUT'"
                },
                {
                    "name": "LOGIN_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'LOGIN_USER'"
                },
                {
                    "name": "RE_LOGIN_ON_REFRESH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'RE_LOGIN_ON_REFRESH'"
                },
                {
                    "name": "REGISTER_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'REGISTER_USER'"
                },
                {
                    "name": "REGISTER_USER_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'REGISTER_USER_SUCCESS'"
                },
                {
                    "name": "SELECT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/actions/login.actions.ts",
                    "type": "string",
                    "defaultValue": "'SELECT_LANGUAGE'"
                }
            ],
            "src/app/core/consts/consts.ts": [
                {
                    "name": "defaultLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/consts/consts.ts",
                    "type": "string",
                    "defaultValue": "'en'"
                },
                {
                    "name": "defaultRole",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/consts/consts.ts",
                    "type": "string",
                    "defaultValue": "'seller'"
                },
                {
                    "name": "languages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/consts/consts.ts",
                    "type": "[]",
                    "defaultValue": "['en', 'fr', 'ru']"
                },
                {
                    "name": "roles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/consts/consts.ts",
                    "type": "[]",
                    "defaultValue": "['seller', 'buyer', 'guest']"
                }
            ],
            "src/data/header-departments.ts": [
                {
                    "name": "departments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/header-departments.ts",
                    "type": "NavigationLink[]",
                    "defaultValue": "[\r\n    {label: 'Power Tools', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'xl',\r\n        image: 'assets/images/megamenu/megamenu-1.jpg',\r\n        columns: [\r\n            {size: 3, items: [\r\n                {label: 'Power Tools', url: './shop', items: [\r\n                    {label: 'Engravers', url: './shop'},\r\n                    {label: 'Drills', url: './shop'},\r\n                    {label: 'Wrenches', url: './shop'},\r\n                    {label: 'Plumbing', url: './shop'},\r\n                    {label: 'Wall Chaser', url: './shop'},\r\n                    {label: 'Pneumatic Tools', url: './shop'},\r\n                    {label: 'Milling Cutters', url: './shop'}\r\n                ]},\r\n                {label: 'Workbenches', url: './shop'},\r\n                {label: 'Presses', url: './shop'},\r\n                {label: 'Spray Guns', url: './shop'},\r\n                {label: 'Riveters', url: './shop'}\r\n            ]},\r\n            {size: 3, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 3, items: [\r\n                {label: 'Machine Tools', url: './shop', items: [\r\n                    {label: 'Thread Cutting', url: './shop'},\r\n                    {label: 'Chip Blowers', url: './shop'},\r\n                    {label: 'Sharpening Machines', url: './shop'},\r\n                    {label: 'Pipe Cutters', url: './shop'},\r\n                    {label: 'Slotting machines', url: './shop'},\r\n                    {label: 'Lathes', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 3, items: [\r\n                {label: 'Instruments', url: './shop', items: [\r\n                    {label: 'Welding Equipment', url: './shop'},\r\n                    {label: 'Power Tools', url: './shop'},\r\n                    {label: 'Hand Tools', url: './shop'},\r\n                    {label: 'Measuring Tool', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Hand Tools', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'lg',\r\n        image: 'assets/images/megamenu/megamenu-2.jpg',\r\n        columns: [\r\n            {size: 4, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 4, items: [\r\n                {label: 'Machine Tools', url: './shop', items: [\r\n                    {label: 'Thread Cutting', url: './shop'},\r\n                    {label: 'Chip Blowers', url: './shop'},\r\n                    {label: 'Sharpening Machines', url: './shop'},\r\n                    {label: 'Pipe Cutters', url: './shop'},\r\n                    {label: 'Slotting machines', url: './shop'},\r\n                    {label: 'Lathes', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 4, items: [\r\n                {label: 'Instruments', url: './shop', items: [\r\n                    {label: 'Welding Equipment', url: './shop'},\r\n                    {label: 'Power Tools', url: './shop'},\r\n                    {label: 'Hand Tools', url: './shop'},\r\n                    {label: 'Measuring Tool', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Machine Tools', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'nl',\r\n        image: 'assets/images/megamenu/megamenu-3.jpg',\r\n        columns: [\r\n            {size: 6, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 6, items: [\r\n                {label: 'Instruments', url: './shop', items: [\r\n                    {label: 'Welding Equipment', url: './shop'},\r\n                    {label: 'Power Tools', url: './shop'},\r\n                    {label: 'Hand Tools', url: './shop'},\r\n                    {label: 'Measuring Tool', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Building Supplies', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'sm',\r\n        columns: [\r\n            {size: 12, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Electrical', url: './shop', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Soldering Equipment', url: './shop', items: [\r\n                {label: 'Soldering Station', url: './shop'},\r\n                {label: 'Soldering Dryers', url: './shop'},\r\n                {label: 'Gas Soldering Iron', url: './shop'},\r\n                {label: 'Electric Soldering Iron', url: './shop'}\r\n            ]},\r\n            {label: 'Light Bulbs', url: './shop'},\r\n            {label: 'Batteries', url: './shop'},\r\n            {label: 'Light Fixtures', url: './shop'},\r\n            {label: 'Warm Floor', url: './shop'},\r\n            {label: 'Generators', url: './shop'},\r\n            {label: 'UPS', url: './shop'}\r\n        ]\r\n    }},\r\n    {label: 'Power Machinery',        url: './shop'},\r\n    {label: 'Measurement',            url: './shop'},\r\n    {label: 'Clothes & PPE',          url: './shop'},\r\n    {label: 'Plumbing',               url: './shop'},\r\n    {label: 'Storage & Organization', url: './shop'},\r\n    {label: 'Welding & Soldering',    url: './shop'}\r\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  REST_API: 'https://apiwebcodes.herokuapp.com',\n  ORDER_HISTORY_API: 'https://ro66kw5glj.execute-api.us-east-1.amazonaws.com/dev'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  REST_API: 'https://apiwebcodes.herokuapp.com',\n  ORDER_HISTORY_API: 'https://ro66kw5glj.execute-api.us-east-1.amazonaws.com/dev'\n}"
                }
            ],
            "src/data/shop-filters.ts": [
                {
                    "name": "filters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/shop-filters.ts",
                    "type": "ProductFilter[]",
                    "defaultValue": "[\r\n    {\r\n        name: 'Categories',\r\n        type: 'categories',\r\n        options: {\r\n            items: [\r\n                {type: 'parent',  count: 254, name: 'Construction & Repair'},\r\n                {type: 'parent',  count: 75, name: 'Instruments'},\r\n                {type: 'current', count: 21, name: 'Power Tools'},\r\n                {type: 'child',   count: 15, name: 'Drills & Mixers'},\r\n                {type: 'child',   count: 2, name: 'Cordless Screwdrivers'},\r\n                {type: 'child',   count: 30, name: 'Screwdrivers'},\r\n                {type: 'child',   count: 7, name: 'Wrenches'},\r\n                {type: 'child',   count: 5, name: 'Grinding Machines'},\r\n                {type: 'child',   count: 2, name: 'Milling Cutters'},\r\n                {type: 'child',   count: 9, name: 'Electric Spray Guns'},\r\n                {type: 'child',   count: 4, name: 'Jigsaws'},\r\n                {type: 'child',   count: 0, name: 'Jackhammers'},\r\n                {type: 'child',   count: 12, name: 'Planers'},\r\n                {type: 'child',   count: 7, name: 'Glue Guns'}\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        name: 'Price',\r\n        type: 'price',\r\n        options: {\r\n            min: 500,\r\n            max: 1500,\r\n            from: 590,\r\n            to: 1130\r\n        }\r\n    },\r\n    {\r\n        name: 'Brand',\r\n        type: 'checkbox',\r\n        options: {\r\n            items: [\r\n                {label: 'Wakita', count: 7, checked: false, disabled: false},\r\n                {label: 'Zosch', count: 42, checked: true, disabled: false},\r\n                {label: 'WeVALT', count: 0, checked: true, disabled: true},\r\n                {label: 'Hammer', count: 0, checked: false, disabled: true},\r\n                {label: 'Mitasia', count: 1, checked: false, disabled: false},\r\n                {label: 'Metaggo', count: 25, checked: false, disabled: false}\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        name: 'Brand',\r\n        type: 'radio',\r\n        options: {\r\n            name: 'filter_radio',\r\n            items: [\r\n                {label: 'Wakita', count: 7, checked: false, disabled: false},\r\n                {label: 'Zosch', count: 42, checked: false, disabled: false},\r\n                {label: 'WeVALT', count: 0, checked: true, disabled: true},\r\n                {label: 'Hammer', count: 0, checked: false, disabled: true},\r\n                {label: 'Mitasia', count: 1, checked: false, disabled: false},\r\n                {label: 'Metaggo', count: 25, checked: false, disabled: false}\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        name: 'Color',\r\n        type: 'color',\r\n        options: {\r\n            items: [\r\n                {label: 'Color 1',  count: 7, color: '#fff',    checked: false, disabled: false, white: true,  light: false},\r\n                {label: 'Color 2',  count: 7, color: '#d9d9d9', checked: false, disabled: false, white: false, light: true},\r\n                {label: 'Color 3',  count: 7, color: '#b3b3b3', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 4',  count: 7, color: '#808080', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 5',  count: 7, color: '#666',    checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 6',  count: 7, color: '#4d4d4d', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 7',  count: 7, color: '#262626', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 8',  count: 7, color: '#ff4040', checked: true,  disabled: false, white: false, light: false},\r\n                {label: 'Color 9',  count: 7, color: '#ff8126', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 10', count: 7, color: '#ffd440', checked: false, disabled: false, white: false, light: true},\r\n                {label: 'Color 11', count: 7, color: '#becc1f', checked: false, disabled: false, white: false, light: true},\r\n                {label: 'Color 12', count: 7, color: '#8fcc14', checked: true,  disabled: false, white: false, light: false},\r\n                {label: 'Color 13', count: 7, color: '#47cc5e', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 14', count: 7, color: '#47cca0', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 15', count: 7, color: '#47cccc', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 16', count: 7, color: '#40bfff', checked: false, disabled: true,  white: false, light: false},\r\n                {label: 'Color 17', count: 7, color: '#3d6dcc', checked: true,  disabled: false, white: false, light: false},\r\n                {label: 'Color 18', count: 7, color: '#7766cc', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 19', count: 7, color: '#b852cc', checked: false, disabled: false, white: false, light: false},\r\n                {label: 'Color 20', count: 7, color: '#e53981', checked: false, disabled: false, white: false, light: false}\r\n            ]\r\n        }\r\n    }\r\n]"
                }
            ],
            "src/app/auth/store/select/auth.selectors.ts": [
                {
                    "name": "getAuthSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/select/auth.selectors.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<UserDetails>('userLoginReducer')"
                },
                {
                    "name": "loginErrorMapper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/select/auth.selectors.ts",
                    "type": "",
                    "defaultValue": "( data: any) => {\n  if (data && data.errorLoading && data.errorLoading.error) {\n    return {\n      message: data.errorLoading.error,\n      status: data.errorLoading.status\n    };\n  } else {\n    return ;\n  }\n}"
                },
                {
                    "name": "loginUserDetailsMapper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/select/auth.selectors.ts",
                    "type": "",
                    "defaultValue": "( data: any) => {\n  if (data && data.userDetails) {\n    return data.userDetails;\n  } else {\n    return ;\n  }\n}"
                },
                {
                    "name": "registerUserMapper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/select/auth.selectors.ts",
                    "type": "",
                    "defaultValue": "(data: any) => {\n  if (data && data.registerUser) {\n    return data.registerUser;\n  } else {\n    return ;\n  }\n}"
                }
            ],
            "src/app/auth/store/reducers/login.reducers.ts": [
                {
                    "name": "indicateErrorOnLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "type": "",
                    "defaultValue": "( state , action): AppStates => {\n const newData: AppStates = Object.assign({}, state, { errorLoading: action.payload });\n return newData;\n}"
                },
                {
                    "name": "loadUserCredentials",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates = INITIAL_USER_DATA, action: ReducerClass ): AppStates => {\n  const newUserDetailsState = { ...state.userDetails,  ...action.payload};\n  const newSate: AppStates = { ...state, ...{ userDetails: newUserDetailsState} };\n  return newSate;\n}"
                },
                {
                    "name": "logOutUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newData: AppStates = Object.assign({}, state, {'userDetails' : INITIAL_USER_DATA} );\n  return newData;\n}"
                },
                {
                    "name": "registerUserSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "type": "",
                    "defaultValue": "( state , action): AppStates => {\n  const newData: AppStates = Object.assign({}, state, { registerUserState: action.payload });\n  return newData;\n}"
                },
                {
                    "name": "selectLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newUserDetails = {...state.userDetails, language: action.payload};\n  return {...state, ...{userDetails: newUserDetails}};\n}"
                },
                {
                    "name": "storeOrderNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "type": "",
                    "defaultValue": "( state: AppStates, action: ReducerClass ): AppStates => {\n  const newUserDetails = {...state.userDetails, orderNumber: action.payload.orderNumber};\n  return {...state, ...{userDetails: newUserDetails}};\n}"
                }
            ],
            "src/app/products/store/states/products.states.ts": [
                {
                    "name": "INITIAL_PRODUCTS_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/states/products.states.ts",
                    "type": "any",
                    "defaultValue": "[\n  {\n    'name': undefined,\n    'description': undefined,\n    'slug': undefined,\n    'price': null,\n    'result': undefined,\n    'productInfo': {\n      'imageList': [\n        {\n          '_id': null,\n          'largeUrl': undefined\n        }\n      ],\n      'id': null\n    },\n    'id': null\n  }]"
                }
            ],
            "src/app/app.states.ts": [
                {
                    "name": "INITIAL_STORE_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.states.ts",
                    "type": "any",
                    "defaultValue": "{\n  storeData: INITIAL_PRODUCTS_DATA,\n  uiProductDetailsSlug: {\n    'ProductSlug': undefined\n  },\n  uiStateProductDetails: {\n    'name':         undefined,\n    'description':  undefined,\n    'slug':         undefined,\n    'price':        null,\n    'productInfo':  [],\n    'id':           null,\n  },\n  order: {\n    'orderNumber': undefined,\n    'orderToken': null,\n    'userId': null,\n    'totalAmount': null,\n    'paymentId': null,\n    'paymentPlaced': null,\n    'paymentPaid': null,\n    'itemList': null,\n    'payment': null,\n    'id': null\n  },\n  'userDetails' : INITIAL_USER_DATA\n}"
                }
            ],
            "src/app/auth/store/states/auth.states.ts": [
                {
                    "name": "INITIAL_USER_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/states/auth.states.ts",
                    "type": "any",
                    "defaultValue": "{\n  'userDetails': {\n    'id': null,\n    'userName': undefined,\n    'orderNumber': null,\n    'mobile': null,\n    'token': undefined,\n    'language': defaultLanguage,\n    'login': login\n  }\n}"
                },
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/states/auth.states.ts",
                    "type": "Login",
                    "defaultValue": "{\n  'id': null,\n  'roles': [role]\n}"
                },
                {
                    "name": "role",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/store/states/auth.states.ts",
                    "type": "Role",
                    "defaultValue": "{\n  'description': null,\n  'id': null,\n  'roleName': undefined\n}"
                }
            ],
            "src/app/products/store/models/products.model.ts": [
                {
                    "name": "initStateOfProductDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/models/products.model.ts",
                    "type": "object",
                    "defaultValue": "{\n  'name':               undefined,\n  'description':        undefined,\n  'slug':               undefined,\n  'price':              undefined,\n  'productInfo':        undefined,\n  'id':                 undefined,\n  'defaultMaxQuantity': undefined\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/data/blog-widget-latest-comments.ts": [
                {
                    "name": "latestComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/blog-widget-latest-comments.ts",
                    "type": "PostComment[]",
                    "defaultValue": "[\r\n    {\r\n        author: 'Emma Williams',\r\n        postTitle: 'Nullam at varius sapien sed sit amet condimentum elit',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '3 minutes ago'\r\n    },\r\n    {\r\n        author: 'Airic Ford',\r\n        postTitle: 'Integer efficitur efficitur velit non pulvinar pellentesque dictum viverra',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '25 minutes ago'\r\n    },\r\n    {\r\n        author: 'Loyd Walker',\r\n        postTitle: 'Curabitur quam augue vestibulum in mauris fermentum pellentesque libero',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '2 hours ago'\r\n    },\r\n    {\r\n        author: 'Jessica Moore',\r\n        postTitle: 'Vestibulum leo sapien sollicitudin at magna eu interdum congue feugiat',\r\n        text: 'In one general sense, philosophy is associated with wisdom, intellectual culture and a search for knowledge...',\r\n        date: '3 days ago'\r\n    }\r\n]"
                }
            ],
            "src/app/products/components/product-details/product-details.component.ts": [
                {
                    "name": "lightGallery",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/components/product-details/product-details.component.ts",
                    "type": "Function"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/data/mobile-menu.ts": [
                {
                    "name": "mobileMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/mobile-menu.ts",
                    "type": "MobileMenuItem[]",
                    "defaultValue": "[\r\n    {type: 'link', label: 'Home', url: './', children: [\r\n        {type: 'link', label: 'Home 1', url: '/classic'},\r\n        {type: 'link', label: 'Home 2', url: '/compact'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Categories', url: '', children: [\r\n        {type: 'link', label: 'Power Tools', url: '', children: [\r\n            {type: 'link', label: 'Engravers',           url: ''},\r\n            {type: 'link', label: 'Wrenches',            url: ''},\r\n            {type: 'link', label: 'Wall Chaser',         url: ''},\r\n            {type: 'link', label: 'Pneumatic Tools',     url: ''}\r\n        ]},\r\n        {type: 'link', label: 'Machine Tools', url: '', children: [\r\n            {type: 'link', label: 'Thread Cutting',      url: ''},\r\n            {type: 'link', label: 'Chip Blowers',        url: ''},\r\n            {type: 'link', label: 'Sharpening Machines', url: ''},\r\n            {type: 'link', label: 'Pipe Cutters',        url: ''},\r\n            {type: 'link', label: 'Slotting machines',   url: ''},\r\n            {type: 'link', label: 'Lathes',              url: ''}\r\n        ]}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Shop', url: './shop', children: [\r\n        {type: 'link', label: 'Shop Grid', url: './shop', children: [\r\n            {type: 'link', label: '3 Columns Sidebar',  url: './shop/category-grid-3-columns-sidebar'},\r\n            {type: 'link', label: '4 Columns Full',     url: './shop/category-grid-4-columns-full'},\r\n            {type: 'link', label: '5 Columns Full',     url: './shop/category-grid-5-columns-full'}\r\n        ]},\r\n        {type: 'link', label: 'Shop List',          url: './shop/category-list'},\r\n        {type: 'link', label: 'Shop Right Sidebar', url: './shop/category-right-sidebar'},\r\n        {type: 'link', label: 'Product',            url: './shop/product', children: [\r\n            {type: 'link', label: 'Product',            url: './shop/product'},\r\n            {type: 'link', label: 'Product Alt',        url: './shop/product-columnar'},\r\n            {type: 'link', label: 'Product Sidebar',    url: './shop/product-sidebar'}\r\n        ]},\r\n        {type: 'link', label: 'Cart',        url: './shop/cart'},\r\n        {type: 'link', label: 'Checkout',    url: './shop/checkout'},\r\n        {type: 'link', label: 'Wishlist',    url: './shop/wishlist'},\r\n        {type: 'link', label: 'Compare',     url: './shop/compare'},\r\n        {type: 'link', label: 'Track Order', url: './shop/track-order'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Account', url: './account', children: [\r\n        {type: 'link', label: 'Login',           url: './account/login'},\r\n        {type: 'link', label: 'Dashboard',       url: './account/dashboard'},\r\n        {type: 'link', label: 'Edit Profile',    url: './account/profile'},\r\n        {type: 'link', label: 'Order History',   url: './account/orders'},\r\n        {type: 'link', label: 'Address Book',    url: './account/addresses'},\r\n        {type: 'link', label: 'Change Password', url: './account/password'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Blog', url: './blog', children: [\r\n        {type: 'link', label: 'Blog Classic',         url: './blog/category-classic'},\r\n        {type: 'link', label: 'Blog Grid',            url: './blog/category-grid'},\r\n        {type: 'link', label: 'Blog List',            url: './blog/category-list'},\r\n        {type: 'link', label: 'Blog Left Sidebar',    url: './blog/category-left-sidebar'},\r\n        {type: 'link', label: 'Post Page',            url: './blog/post-classic'},\r\n        {type: 'link', label: 'Post Without Sidebar', url: './blog/post-full'}\r\n    ]},\r\n\r\n    {type: 'link', label: 'Pages', url: './site', children: [\r\n        {type: 'link', label: 'About Us',             url: './site/about-us'},\r\n        {type: 'link', label: 'Contact Us',           url: './site/contact-us'},\r\n        {type: 'link', label: 'Contact Us Alt',       url: './site/contact-us-alt'},\r\n        {type: 'link', label: '404',                  url: './site/not-found'},\r\n        {type: 'link', label: 'Terms And Conditions', url: './site/terms'},\r\n        {type: 'link', label: 'FAQ',                  url: './site/faq'},\r\n        {type: 'link', label: 'Components',           url: './site/components'},\r\n        {type: 'link', label: 'Typography',           url: './site/typography'}\r\n    ]},\r\n\r\n    {type: 'button', label: 'Currency', children: [\r\n        {type: 'button', label: '€ Euro',           data: {currency: 'EUR'}},\r\n        {type: 'button', label: '£ Pound Sterling', data: {currency: 'GBP'}},\r\n        {type: 'button', label: '$ US Dollar',      data: {currency: 'USD'}},\r\n        {type: 'button', label: '₽ Russian Ruble',  data: {currency: 'RUB'}}\r\n    ]},\r\n\r\n    {type: 'button', label: 'Language', children: [\r\n        {type: 'button', label: 'English', data: {language: 'EN'}},\r\n        {type: 'button', label: 'French',  data: {language: 'FR'}},\r\n        {type: 'button', label: 'German',  data: {language: 'DE'}},\r\n        {type: 'button', label: 'Russian', data: {language: 'RU'}},\r\n        {type: 'button', label: 'Italian', data: {language: 'IT'}}\r\n    ]}\r\n]"
                }
            ],
            "src/data/header-navigation.ts": [
                {
                    "name": "navigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/header-navigation.ts",
                    "type": "NavigationLink[]",
                    "defaultValue": "[\r\n    {label: 'Home', url: './', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Home 1', url: '/classic'},\r\n            {label: 'Home 2', url: '/compact'}\r\n        ]\r\n    }},\r\n    {label: 'Megamenu', url: './shop', menu: {\r\n        type: 'megamenu',\r\n        size: 'nl',\r\n        columns: [\r\n            {size: 6, items: [\r\n                {label: 'Power Tools', url: './shop', items: [\r\n                    {label: 'Engravers', url: './shop'},\r\n                    {label: 'Wrenches', url: './shop'},\r\n                    {label: 'Wall Chaser', url: './shop'},\r\n                    {label: 'Pneumatic Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Machine Tools', url: './shop', items: [\r\n                    {label: 'Thread Cutting', url: './shop'},\r\n                    {label: 'Chip Blowers', url: './shop'},\r\n                    {label: 'Sharpening Machines', url: './shop'},\r\n                    {label: 'Pipe Cutters', url: './shop'},\r\n                    {label: 'Slotting machines', url: './shop'},\r\n                    {label: 'Lathes', url: './shop'}\r\n                ]}\r\n            ]},\r\n            {size: 6, items: [\r\n                {label: 'Hand Tools', url: './shop', items: [\r\n                    {label: 'Screwdrivers', url: './shop'},\r\n                    {label: 'Handsaws', url: './shop'},\r\n                    {label: 'Knives', url: './shop'},\r\n                    {label: 'Axes', url: './shop'},\r\n                    {label: 'Multitools', url: './shop'},\r\n                    {label: 'Paint Tools', url: './shop'}\r\n                ]},\r\n                {label: 'Garden Equipment', url: './shop', items: [\r\n                    {label: 'Motor Pumps', url: './shop'},\r\n                    {label: 'Chainsaws', url: './shop'},\r\n                    {label: 'Electric Saws', url: './shop'},\r\n                    {label: 'Brush Cutters', url: './shop'}\r\n                ]}\r\n            ]}\r\n        ]\r\n    }},\r\n    {label: 'Shop', url: './shop', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Shop Grid', url: './shop', items: [\r\n                {label: '3 Columns Sidebar', url: './shop/category-grid-3-columns-sidebar'},\r\n                {label: '4 Columns Full',    url: './shop/category-grid-4-columns-full'},\r\n                {label: '5 Columns Full',    url: './shop/category-grid-5-columns-full'}\r\n            ]},\r\n            {label: 'Shop List', url: './shop/category-list'},\r\n            {label: 'Shop Right Sidebar', url: './shop/category-right-sidebar'},\r\n            {label: 'Product', url: './shop/product', items: [\r\n                {label: 'Product', url: './shop/product'},\r\n                {label: 'Product Alt', url: './shop/product-columnar'},\r\n                {label: 'Product Sidebar', url: './shop/product-sidebar'}\r\n            ]},\r\n            {label: 'Cart', url: './shop/cart'},\r\n            {label: 'Checkout', url: './shop/checkout'},\r\n            {label: 'Wishlist', url: './shop/wishlist'},\r\n            {label: 'Compare', url: './shop/compare'},\r\n            {label: 'Track Order', url: './shop/track-order'},\r\n        ]\r\n    }},\r\n    {label: 'Account', url: './account', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Login',           url: './account/login'},\r\n            {label: 'Dashboard',       url: './account/dashboard'},\r\n            {label: 'Edit Profile',    url: './account/profile'},\r\n            {label: 'Order History',   url: './account/orders'},\r\n            {label: 'Address Book',    url: './account/addresses'},\r\n            {label: 'Change Password', url: './account/password'}\r\n        ]\r\n    }},\r\n    {label: 'Blog', url: './blog', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'Blog Classic',         url: './blog/category-classic'},\r\n            {label: 'Blog Grid',            url: './blog/category-grid'},\r\n            {label: 'Blog List',            url: './blog/category-list'},\r\n            {label: 'Blog Left Sidebar',    url: './blog/category-left-sidebar'},\r\n            {label: 'Post Page',            url: './blog/post-classic'},\r\n            {label: 'Post Without Sidebar', url: './blog/post-full'}\r\n        ]\r\n    }},\r\n    {label: 'Pages', url: './site', menu: {\r\n        type: 'menu',\r\n        items: [\r\n            {label: 'About Us',             url: './site/about-us'},\r\n            {label: 'Contact Us',           url: './site/contact-us'},\r\n            {label: 'Contact Us Alt',       url: './site/contact-us-alt'},\r\n            {label: '404',                  url: './site/not-found'},\r\n            {label: 'Terms And Conditions', url: './site/terms'},\r\n            {label: 'FAQ',                  url: './site/faq'},\r\n            {label: 'Components',           url: './site/components'},\r\n            {label: 'Typography',           url: './site/typography'}\r\n        ]\r\n    }},\r\n    {label: 'Buy Theme', url: 'https://themeforest.net/item/stroyka-tools-store-angular-7-template/23523630', external: true}\r\n]"
                }
            ],
            "src/data/account-orders.ts": [
                {
                    "name": "orders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/account-orders.ts",
                    "type": "Order[]",
                    "defaultValue": "[\r\n    {\r\n        id: 8132,\r\n        date: '02 April, 2019',\r\n        status: 'Pending',\r\n        total: '$2,719.00 for 5 item(s)'\r\n    },\r\n    {\r\n        id: 7592,\r\n        date: '28 March, 2019',\r\n        status: 'Pending',\r\n        total: '$374.00 for 3 item(s)'\r\n    },\r\n    {\r\n        id: 7192,\r\n        date: '15 March, 2019',\r\n        status: 'Shipped',\r\n        total: '$791.00 for 4 item(s)'\r\n    },\r\n    {\r\n        id: 6321,\r\n        date: '28 February, 2019',\r\n        status: 'Completed',\r\n        total: '$57.00 for 1 item(s)'\r\n    },\r\n    {\r\n        id: 6001,\r\n        date: '21 February, 2019',\r\n        status: 'Completed',\r\n        total: '$252.00 for 2 item(s)'\r\n    },\r\n    {\r\n        id: 4120,\r\n        date: '11 December, 2018',\r\n        status: 'Completed',\r\n        total: '$3,978.00 for 7 item(s)'\r\n    }\r\n]"
                }
            ],
            "src/app/shared/services/photo-swipe.service.ts": [
                {
                    "name": "PhotoSwipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/photo-swipe.service.ts",
                    "type": "any"
                },
                {
                    "name": "PhotoSwipeUI_Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/photo-swipe.service.ts",
                    "type": "any"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/photo-swipe.service.ts",
                    "type": "",
                    "defaultValue": "`\r\n<div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\r\n    <div class=\"pswp__bg\"></div>\r\n    <div class=\"pswp__scroll-wrap\">\r\n        <div class=\"pswp__container\">\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n            <div class=\"pswp__item\"></div>\r\n        </div>\r\n        <div class=\"pswp__ui pswp__ui--hidden\">\r\n            <div class=\"pswp__top-bar\">\r\n                <div class=\"pswp__counter\"></div>\r\n                <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\r\n                <!--<button class=\"pswp__button pswp__button&#45;&#45;share\" title=\"Share\"></button>-->\r\n                <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\r\n                <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\r\n                <div class=\"pswp__preloader\">\r\n                    <div class=\"pswp__preloader__icn\">\r\n                      <div class=\"pswp__preloader__cut\">\r\n                        <div class=\"pswp__preloader__donut\"></div>\r\n                      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\r\n                <div class=\"pswp__share-tooltip\"></div>\r\n            </div>\r\n            <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"></button>\r\n            <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"></button>\r\n            <div class=\"pswp__caption\">\r\n                <div class=\"pswp__caption__center\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n`"
                }
            ],
            "src/data/blog-post-comments.ts": [
                {
                    "name": "postComments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/blog-post-comments.ts",
                    "type": "PostCommentsList",
                    "defaultValue": "{\r\n    count: 4,\r\n    items: [\r\n        {\r\n            avatar: 'assets/images/avatars/avatar-1',\r\n            author: 'Jessica Moore',\r\n            date: 'November 30, 2018',\r\n            text: 'Aliquam ullamcorper elementum sagittis. Etiam lacus lacus, mollis in mattis in, vehicula eu nulla. ' +\r\n                  'Nulla nec tellus pellentesque.',\r\n            children: [\r\n                {\r\n                    avatar: 'assets/images/avatars/avatar-2',\r\n                    author: 'Adam Taylor',\r\n                    date: 'December 4, 2018',\r\n                    text: 'Ut vitae finibus nisl, suscipit porttitor urna. Integer efficitur efficitur velit non pulvinar. ' +\r\n                          'Aliquam blandit volutpat arcu vel tristique. Integer commodo ligula id augue tincidunt faucibus.'\r\n                },\r\n                {\r\n                    avatar: 'assets/images/avatars/avatar-3',\r\n                    author: 'Helena Garcia',\r\n                    date: 'December 12, 2018',\r\n                    text: 'Suspendisse dignissim luctus metus vitae aliquam. Vestibulum sem odio, ullamcorper a imperdiet a, ' +\r\n                          'tincidunt sed lacus. Sed magna felis, consequat a erat ut, rutrum finibus odio.'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            avatar: 'assets/images/avatars/avatar-4',\r\n            author: 'Ryan Ford',\r\n            date: 'December 5, 2018',\r\n            text: 'Nullam at varius sapien. Sed sit amet condimentum elit.'\r\n        }\r\n    ]\r\n}"
                }
            ],
            "src/data/blog-posts.ts": [
                {
                    "name": "posts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/blog-posts.ts",
                    "type": "Post[]",
                    "defaultValue": "[\r\n    {\r\n        title: 'Philosophy That Addresses Topics Such As Goodness',\r\n        image: 'assets/images/posts/post-1.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'October 19, 2019'\r\n    },\r\n    {\r\n        title: 'Logic Is The Study Of Reasoning And Argument Part 2',\r\n        image: 'assets/images/posts/post-2.jpg',\r\n        categories: ['Latest News'],\r\n        date: 'September 5, 2019'\r\n    },\r\n    {\r\n        title: 'Some Philosophers Specialize In One Or More Historical Periods',\r\n        image: 'assets/images/posts/post-3.jpg',\r\n        categories: ['New Arrivals'],\r\n        date: 'August 12, 2019'\r\n    },\r\n    {\r\n        title: 'A Variety Of Other Academic And Non-Academic Approaches Have Been Explored',\r\n        image: 'assets/images/posts/post-4.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'Jule 30, 2019'\r\n    },\r\n    {\r\n        title: 'Germany Was The First Country To Professionalize Philosophy',\r\n        image: 'assets/images/posts/post-5.jpg',\r\n        categories: ['New Arrivals'],\r\n        date: 'June 12, 2019'\r\n    },\r\n    {\r\n        title: 'Logic Is The Study Of Reasoning And Argument Part 1',\r\n        image: 'assets/images/posts/post-6.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'May 21, 2019'\r\n    },\r\n    {\r\n        title: 'Many Inquiries Outside Of Academia Are Philosophical In The Broad Sense',\r\n        image: 'assets/images/posts/post-7.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'April 3, 2019'\r\n    },\r\n    {\r\n        title: 'An Advantage Of Digital Circuits When Compared To Analog Circuits',\r\n        image: 'assets/images/posts/post-8.jpg',\r\n        categories: ['Latest News'],\r\n        date: 'Mart 29, 2019'\r\n    },\r\n    {\r\n        title: 'A Digital Circuit Is Typically Constructed From Small Electronic Circuits',\r\n        image: 'assets/images/posts/post-9.jpg',\r\n        categories: ['New Arrivals'],\r\n        date: 'February 10, 2019'\r\n    },\r\n    {\r\n        title: 'Engineers Use Many Methods To Minimize Logic Functions',\r\n        image: 'assets/images/posts/post-10.jpg',\r\n        categories: ['Special Offers'],\r\n        date: 'January 1, 2019'\r\n    }\r\n]"
                }
            ],
            "src/data/shop-products.ts": [
                {
                    "name": "products",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/shop-products.ts",
                    "type": "any",
                    "defaultValue": "[\r\n    {\r\n        id: 1,\r\n        name: 'Electric Planer Brandix KL370090G 300 Watts',\r\n        price: 749,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-1.jpg', 'assets/images/products/product-1-1.jpg'],\r\n        badges: ['new'],\r\n        rating: 4,\r\n        reviews: 12,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Undefined Tool IRadix DPS3000SY 2700 Watts',\r\n        price: 1019,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-2.jpg', 'assets/images/products/product-2-1.jpg'],\r\n        badges: ['hot'],\r\n        rating: 5,\r\n        reviews: 3,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Drill Screwdriver Brandix ALX7054 200 Watts',\r\n        price: 850,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-3.jpg', 'assets/images/products/product-3-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 8,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Drill Series 3 Brandix KSR4590PQS 1500 Watts',\r\n        price: 949,\r\n        compareAtPrice: 1189,\r\n        images: ['assets/images/products/product-4.jpg', 'assets/images/products/product-4-1.jpg'],\r\n        badges: ['sale'],\r\n        rating: 3,\r\n        reviews: 15,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Brandix Router Power Tool 2017ERXPK',\r\n        price: 1700,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-5.jpg', 'assets/images/products/product-5-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 2,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Brandix Drilling Machine DM2019KW4 4kW',\r\n        price: 3199,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-6.jpg', 'assets/images/products/product-6-1.jpg'],\r\n        badges: [],\r\n        rating: 3,\r\n        reviews: 21,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Brandix Pliers',\r\n        price: 24,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-7.jpg', 'assets/images/products/product-7-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 1,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Water Hose 40cm',\r\n        price: 15,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-8.jpg', 'assets/images/products/product-8-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 5,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Spanner Wrench',\r\n        price: 19,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-9.jpg', 'assets/images/products/product-9-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 34,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Water Tap',\r\n        price: 15,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-10.jpg', 'assets/images/products/product-10-1.jpg'],\r\n        badges: [],\r\n        rating: 5,\r\n        reviews: 3,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Hand Tool Kit',\r\n        price: 149,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-11.jpg', 'assets/images/products/product-11-1.jpg'],\r\n        badges: [],\r\n        rating: 4,\r\n        reviews: 7,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Ash\\'s Chainsaw 3.5kW',\r\n        price: 666.99,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-12.jpg', 'assets/images/products/product-12-1.jpg'],\r\n        badges: [],\r\n        rating: 5,\r\n        reviews: 17,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Brandix Angle Grinder KZX3890PQW',\r\n        price: 649,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-13.jpg', 'assets/images/products/product-13-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 8,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 14,\r\n        name: 'Brandix Air Compressor DELTAKX500',\r\n        price: 1800,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-14.jpg', 'assets/images/products/product-14-1.jpg'],\r\n        badges: [],\r\n        rating: 3,\r\n        reviews: 14,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Brandix Electric Jigsaw JIG7000BQ',\r\n        price: 290,\r\n        compareAtPrice: null,\r\n        images: ['assets/images/products/product-15.jpg', 'assets/images/products/product-15-1.jpg'],\r\n        badges: [],\r\n        rating: 2,\r\n        reviews: 1,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    },\r\n    {\r\n        id: 16,\r\n        name: 'Brandix Screwdriver SCREW1500ACC',\r\n        price: 1499,\r\n        compareAtPrice: null,\r\n        images: [\r\n            'assets/images/products/product-16.jpg',\r\n            'assets/images/products/product-16-1.jpg',\r\n            'assets/images/products/product-16-2.jpg',\r\n            'assets/images/products/product-16-3.jpg',\r\n            'assets/images/products/product-16-4.jpg'\r\n        ],\r\n        badges: [],\r\n        rating: 5,\r\n        reviews: 3,\r\n        availability: 'in-stock',\r\n        features: [\r\n            {name: 'Speed', value: '750 RPM'},\r\n            {name: 'Power Source', value: 'Cordless-Electric'},\r\n            {name: 'Battery Cell Type', value: 'Lithium'},\r\n            {name: 'Voltage', value: '20 Volts'},\r\n            {name: 'Battery Capacity', value: '2 Ah'}\r\n        ],\r\n        options: []\r\n    }\r\n]"
                }
            ],
            "src/data/shop-product-reviews.ts": [
                {
                    "name": "reviews",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/shop-product-reviews.ts",
                    "type": "ProductReview[]",
                    "defaultValue": "[\r\n    {\r\n        avatar: 'assets/images/avatars/avatar-1.jpg',\r\n        author: 'Samantha Smith',\r\n        rating: 4,\r\n        date: '27 May, 2018',\r\n        text: 'Phasellus id mattis nulla. Mauris velit nisi, imperdiet vitae sodales in, maximus ut lectus. Vivamus commodo ' +\r\n              'scelerisque lacus, at porttitor dui iaculis id. Curabitur imperdiet ultrices fermentum.'\r\n    },\r\n    {\r\n        avatar: 'assets/images/avatars/avatar-2.jpg',\r\n        author: 'Adam Taylor',\r\n        rating: 3,\r\n        date: '12 April, 2018',\r\n        text: 'Aenean non lorem nisl. Duis tempor sollicitudin orci, eget tincidunt ex semper sit amet. Nullam neque justo, ' +\r\n              'sodales congue feugiat ac, facilisis a augue. Donec tempor sapien et fringilla facilisis. Nam maximus consectetur ' +\r\n              'diam. Nulla ut ex mollis, volutpat tellus vitae, accumsan ligula.'\r\n    },\r\n    {\r\n        avatar: 'assets/images/avatars/avatar-3.jpg',\r\n        author: 'Helena Garcia',\r\n        rating: 5,\r\n        date: '2 January, 2018',\r\n        text: 'Duis ac lectus scelerisque quam blandit egestas. Pellentesque hendrerit eros laoreet suscipit ultrices.'\r\n    }\r\n]"
                }
            ],
            "src/app/cart/store/selectors/cart.selectors.ts": [
                {
                    "name": "selectCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/selectors/cart.selectors.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<CartState>('cart')"
                },
                {
                    "name": "selectCurrentOrderInCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/selectors/cart.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCart,\n  (state: CartState) => {\n    if (state && state.currentOrderInCart)\n      return state.currentOrderInCart;\n  }\n)"
                },
                {
                    "name": "selectItemListDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/selectors/cart.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCurrentOrderInCart,\n  (orderInCart: CurrentOrderInCart) => {\n    if (orderInCart && orderInCart.itemList) {\n      return orderInCart.itemList;\n    }\n  }\n)"
                },
                {
                    "name": "selectOrdersHistory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/selectors/cart.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCart,\n  (state: CartState) => {\n    if(state && state.orderStoredInHistoryApi) {\n      return state && state.orderStoredInHistoryApi;\n    }\n  }\n)"
                },
                {
                    "name": "selectTotalAmountInCart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cart/store/selectors/cart.selectors.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCurrentOrderInCart,\n  (orderInCart: CurrentOrderInCart) => {\n    if (orderInCart && orderInCart.totalAmount){\n      return orderInCart.totalAmount;\n    }\n  }\n)"
                }
            ],
            "src/data/theme.ts": [
                {
                    "name": "theme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/data/theme.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    name: 'Stroyka',\r\n    author: {\r\n        name: 'Kos',\r\n        profile_url: 'https://themeforest.net/user/kos9'\r\n    }\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/cart/store/reducers/cart.reducers.ts": [
                {
                    "name": "cartReducer",
                    "file": "src/app/cart/store/reducers/cart.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/functions/rxjs/fromMatchMedia.ts": [
                {
                    "name": "fromMatchMedia",
                    "file": "src/app/shared/functions/rxjs/fromMatchMedia.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "query"
                        }
                    ],
                    "returnType": "Observable<MediaQueryList>",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/input-number/input-number.component.ts": [
                {
                    "name": "parseNumber",
                    "file": "src/app/shared/components/input-number/input-number.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "def"
                        }
                    ],
                    "returnType": "number | T",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "def",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/products/store/reducers/reducers.ts": [
                {
                    "name": "productsReducer",
                    "file": "src/app/products/store/reducers/reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/auth/store/reducers/login.reducers.ts": [
                {
                    "name": "userLoginReducer",
                    "file": "src/app/auth/store/reducers/login.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/cart/enums/payments.enum.ts": [
                {
                    "name": "Payments",
                    "childs": [
                        {
                            "name": "cash",
                            "value": "1"
                        },
                        {
                            "name": "debit"
                        },
                        {
                            "name": "credit"
                        },
                        {
                            "name": "check"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/cart/enums/payments.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/services/direction.service.ts": [
                {
                    "name": "Direction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"ltr\" | \"rtl\"",
                    "file": "src/app/shared/services/direction.service.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/products/components/products-view/products-view.component.ts": [
                {
                    "name": "Layout",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"grid\" | \"grid-with-features\" | \"list\"",
                    "file": "src/app/products/components/products-view/products-view.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/components/product/product.component.ts": [
                {
                    "name": "Layout",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"standard\" | \"sidebar\" | \"columnar\" | \"quickview\"",
                    "file": "src/app/shared/components/product/product.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/interfaces/mobile-menu-item.ts": [
                {
                    "name": "MobileMenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "MobileMenuItemLink | MobileMenuItemButton",
                    "file": "src/app/shared/interfaces/mobile-menu-item.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/interfaces/product-filter.ts": [
                {
                    "name": "ProductFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ProductFilterCategory | ProductFilterPrice | ProductFilterCheckbox | ProductFilterRadio | ProductFilterColor",
                    "file": "src/app/shared/interfaces/product-filter.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/services/resources.service.ts": [
                {
                    "name": "Task",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/services/resources.service.ts",
                    "description": "",
                    "kind": 162
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/cart/cart.module.ts",
                "module": "CartModule",
                "children": [
                    {
                        "path": "cart",
                        "component": "CartDetailsComponent"
                    },
                    {
                        "path": "checkout",
                        "component": "CartCheckoutComponent"
                    },
                    {
                        "path": "placed-orders",
                        "component": "PlacedOrdersComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/login.module.ts",
                "module": "LoginModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "logout",
                        "component": "LogoutComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/products/products.module.ts",
                "module": "ProductsModule",
                "children": [
                    {
                        "path": "products",
                        "component": "ProductListComponent",
                        "canActivate": [
                            "AuthguardService"
                        ]
                    },
                    {
                        "path": "details/:slug",
                        "component": "ProductDetailsComponent",
                        "canActivate": [
                            "AuthguardService"
                        ]
                    },
                    {
                        "path": "create-product",
                        "component": "CreateProductComponent",
                        "canActivate": [
                            "AuthguardService"
                        ],
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "add-details",
                                "pathMatch": "full"
                            },
                            {
                                "path": "add-details",
                                "component": "AddDetailsComponent"
                            },
                            {
                                "path": "upload-images/:slug",
                                "component": "UploadImagesComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppStates",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_STORE_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login/login.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login/login.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/logout/logout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateOrderNumber",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EffectError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FinishStorageClearence",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetOrderNumber",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RegisterUserAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RegisterUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ReloginOnRefresh",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectLanguageAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_ORDER_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ERROR_LOADING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FINISH_STORAGE_CLEARENCE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_ORDER_NUMBER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOG_OUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RE_LOGIN_ON_REFRESH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REGISTER_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REGISTER_USER_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/actions/login.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/effects/login.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterUser",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetails",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ReducerClass",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "userLoginReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "indicateErrorOnLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadUserCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logOutUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/reducers/login.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeOrderNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/select/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/select/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginErrorMapper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/select/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginUserDetailsMapper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/select/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerUserMapper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/states/auth.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_USER_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/states/auth.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/store/states/auth.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "role",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/components/cart-checkout/cart-checkout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartCheckoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/components/cart-details/cart-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/components/placed-orders/placed-orders.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlacedOrdersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckoutInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Order",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaymentDescription",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaymentMethods",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/models/cart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/service/orders-history-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrdersHistoryApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddToCart",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddToCartSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckOut",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckOutSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteOrderFromHistoryApi",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchOrderHistory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCurrentOrderFromStore",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetCurrentOrderFromStoreSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemoveFromCart",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveOrderInHistoryApi",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SavePlacedOrder",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StoreCurrentOrder",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StoreProcessedOrderInHistoryApiSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_TO_CART",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_TO_CART_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CHECK_OUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CHECK_OUT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_ORDER_FROM_HISTORY_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FETCH_ORDERS_HISTORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_CURRENT_ORDER_FROM_STORE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_CURRENT_ORDER_FROM_STORE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REMOVE_FROM_CART",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SAVE_CURRENT_ORDER_IN_STORE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SAVE_ORDER_IN_HISTORY_API",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SAVE_PLACED_ORDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/actions/cart.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_PROCESSED_ORDER_IN_HISTORY_API_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/effects/cart.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ReducerClass",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "cartReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductToCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductToCartSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkOutSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "readCurrentOrderFromStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "readCurrentOrderFromStoreSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeProductFromCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "savePlacedOrder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "savePlacedOrderDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeCurrentOrderInCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/reducers/cart.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeProcessedOrderInHistoryApi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentOrderInCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectItemListDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOrdersHistory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/selectors/cart.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTotalAmountInCart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/states/cart.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/states/cart.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentOrderInCart",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/states/cart.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderDetails",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/store/states/cart.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderHistory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/consts/consts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/consts/consts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/consts/consts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/consts/consts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/authguard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthguardService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/components/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/components/upper-header/upper-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpperHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/child-components/add-to-cart/add-to-cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddToCartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/child-components/shop-sidebar/shop-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShopSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/create-product/add-details/add-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/create-product/create-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/create-product/upload-images/upload-images.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UploadImagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/product-details/product-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductDetailsComponent",
                "coveragePercent": 3,
                "coverageCount": "1/29",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/product-details/product-details.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightGallery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/products/components/products-view/products-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/products/services/shop-sidebar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShopSidebarService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateNewProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateNewProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EffectError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetProductDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetProductDetailsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetProducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetProductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemoveItemFromProductList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetProductDetails",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "uploadImageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UploadProductImage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_NEW_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CREATE_NEW_PRODUCT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ERROR_LOADING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCT_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCT_DETAILS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REMOVE_ITEM_FROM_PRODUCT_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESET_PRODUCT_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPLOAD_PRODUCT_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPLOAD_PRODUCT_IMAGE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/effects/products.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsEffects",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "error_message",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "errorState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Order",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductDetails",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Products",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductSlug",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RemoveItemId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/models/products.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initStateOfProductDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ReducerClass",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "productsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appendError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createNewProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createNewProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductSlug",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetProductDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uploadProductImageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/states/products.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_PRODUCTS_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-number/input-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-number/input-number.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "parseNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loading-bar/loading-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-header/page-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post-card/post-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/product-card/product-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/product/product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/product/product.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductImage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/quickview/quickview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/rating/rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/click.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickDirective",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/collapse.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CollapseContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/collapse.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CollapseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/collapse.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CollapseItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/departments-area.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DepartmentsAreaDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/fake-slides.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FakeSlidesDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/owl-prevent-click.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OwlPreventClickDirective",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/functions/rxjs/fromMatchMedia.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "fromMatchMedia",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/address.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/block-header-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockHeaderGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/block-product-column.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BlockProductColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/brand.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Brand",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/cart-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/category.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/currency-format-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrencyFormatOptions",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/link.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/megamenu-column.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MegamenuColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/megamenu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Megamenu",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/mobile-menu-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MobileMenuItemBase",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/mobile-menu-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MobileMenuItemButton",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/mobile-menu-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MobileMenuItemLink",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/navigation-link.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationLink",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/nested-link.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NestedLink",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/order.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Order",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/post-comment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostComment",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/post-comments-list.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostCommentsList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/post.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterBase",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterCategory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterColor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterPrice",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFilterRadio",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFeature",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductFeaturesSection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductReview",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/currency-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CurrencyFormatPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/cart.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/cart.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartTotal",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/compare.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CompareService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/compare.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompareData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/currency.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CurrencyService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/currency.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrencyServiceData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/departments.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DepartmentsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/direction.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DirectionService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/mobile-menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MobileMenuService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PhotoSwipeService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSwipeItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSwipeModelRef",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSwipeOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSwipeThumbBounds",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PhotoSwipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PhotoSwipeUI_Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/photo-swipe.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/quickview.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuickviewService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/resources.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResourcesService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/resources.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibrariesDef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/root.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RootService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/wishlist.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WishlistService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/wishlist.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WishlistData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-aboutus/widget-aboutus.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetAboutusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-categories/widget-categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetCategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-comments/widget-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-filters/widget-filters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetFiltersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-newsletter/widget-newsletter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetNewsletterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-posts/widget-posts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetPostsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-products/widget-products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-search/widget-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/widgets/widget-tags/widget-tags.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetTagsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/data/account-addresses.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addresses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/account-orders.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "orders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/blog-post-comments.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/blog-posts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "posts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/blog-widget-categories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/blog-widget-latest-comments.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "latestComments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/header-departments.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "departments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/header-navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/mobile-menu.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mobileMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/shop-block-categories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/shop-brands.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "brands",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/shop-filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/shop-product-reviews.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reviews",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/shop-products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "products",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/shop-widget-categories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "categories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/data/theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "theme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SessionServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StoreMock",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TranslateLoaderMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TranslateServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cartReducerStateMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "enJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "frJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test/mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ruJson",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}